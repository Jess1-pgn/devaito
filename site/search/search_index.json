{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Guide du D\u00e9veloppeur Devaito Bienvenue dans le Guide du D\u00e9veloppeur Devaito ! Ce guide vous accompagne dans la cr\u00e9ation, le test et la publication d'applications pour l'\u00e9cosyst\u00e8me Devaito, une plateforme qui transforme la cr\u00e9ation de sites web en une exp\u00e9rience puissante et personnalisable. Qu'est-ce que Devaito ? Devaito est une plateforme qui \u00e9volue d'un march\u00e9 de templates vers un \u00e9cosyst\u00e8me d'applications. Avec Devaito, vous pouvez : - Cr\u00e9er des apps pour ajouter des fonctionnalit\u00e9s (ex. : e-commerce, analytique) aux sites web Devaito. - Mon\u00e9tiser vos apps avec des mod\u00e8les de tarification flexibles (abonnements, paiements uniques). - Atteindre des milliers de propri\u00e9taires de sites via le Devaito App Store . Pourquoi d\u00e9velopper pour Devaito ? En tant que d\u00e9veloppeur, Devaito vous offre : Des outils puissants : CLI Devaito (bas\u00e9 sur oclif ), SDKs ( @devaito/dev-kit et @devaito/app-bridge ), et APIs REST (avec GraphQL en perspective). Une int\u00e9gration simplifi\u00e9e : Connectez vos apps aux sites Devaito avec OAuth 2.0 et int\u00e9grez-les dans le panneau d'administration via un iframe s\u00e9curis\u00e9. Un tableau de bord complet : G\u00e9rez vos apps, suivez les performances, et configurez des webhooks sur devaito-admin.redg.io . Un d\u00e9marrage rapide : Utilisez des mod\u00e8les d'apps pr\u00e9configur\u00e9s (Laravel, Remix, Node.js) pour acc\u00e9l\u00e9rer le d\u00e9veloppement. Comment ce guide est organis\u00e9 Ce guide couvre tout ce dont vous avez besoin pour cr\u00e9er une app Devaito, \u00e9tape par \u00e9tape : Getting Started : Configurez votre environnement et cr\u00e9ez un compte d\u00e9veloppeur. APIs : Apprenez \u00e0 utiliser les APIs Devaito pour acc\u00e9der aux donn\u00e9es des sites. CLI : Ma\u00eetrisez le CLI Devaito pour automatiser la cr\u00e9ation et les tests. App Bridge : Int\u00e9grez votre interface dans le panneau d'administration Devaito. OAuth : Impl\u00e9mentez une authentification s\u00e9curis\u00e9e avec OAuth 2.0. Testing : Testez vos apps localement et dans un environnement sandbox. Publishing : Soumettez votre app au Devaito App Store. Resources : Trouvez des r\u00e9f\u00e9rences API, un support, et une communaut\u00e9. Premiers pas Pour commencer : Cr\u00e9ez un compte d\u00e9veloppeur sur devaito-admin.redg.io . Installez le CLI Devaito : bash npm install -g @devaito/cli G\u00e9n\u00e9rez votre premi\u00e8re app : bash devaito app create --template=laravel Exemple rapide : Une app \"Bonjour Devaito\" Voici un aper\u00e7u de ce que vous pouvez construire : import { createApp } from '@devaito/app-bridge'; const app = createApp({ apiKey: 'votre-cl\u00e9', host: window.location.host }); app.render({ component: () => { const button = document.createElement('button'); button.innerText = 'Bonjour, Devaito !'; button.onclick = () => app.notify('Bouton cliqu\u00e9 !'); return button; }, target: '#devaito-app-container' }); Cette app affiche un bouton dans le panneau d'administration Devaito. Consultez App Bridge pour plus de d\u00e9tails. Support et communaut\u00e9 Documentation API : devaito.redg.io/docs/api Support : Contactez devsupport@devaito.redg.io Forum : Rejoignez la communaut\u00e9 sur devaito.redg.io/community Pr\u00eat \u00e0 commencer ? Plongez dans Getting Started et construisez votre premi\u00e8re app Devaito d\u00e8s aujourd'hui ! \ud83d\ude80 Devaito Developer Guide, powered by passion and code.","title":"Home / Introduction"},{"location":"#guide-du-developpeur-devaito","text":"Bienvenue dans le Guide du D\u00e9veloppeur Devaito ! Ce guide vous accompagne dans la cr\u00e9ation, le test et la publication d'applications pour l'\u00e9cosyst\u00e8me Devaito, une plateforme qui transforme la cr\u00e9ation de sites web en une exp\u00e9rience puissante et personnalisable.","title":"Guide du D\u00e9veloppeur Devaito"},{"location":"#quest-ce-que-devaito","text":"Devaito est une plateforme qui \u00e9volue d'un march\u00e9 de templates vers un \u00e9cosyst\u00e8me d'applications. Avec Devaito, vous pouvez : - Cr\u00e9er des apps pour ajouter des fonctionnalit\u00e9s (ex. : e-commerce, analytique) aux sites web Devaito. - Mon\u00e9tiser vos apps avec des mod\u00e8les de tarification flexibles (abonnements, paiements uniques). - Atteindre des milliers de propri\u00e9taires de sites via le Devaito App Store .","title":"Qu'est-ce que Devaito ?"},{"location":"#pourquoi-developper-pour-devaito","text":"En tant que d\u00e9veloppeur, Devaito vous offre : Des outils puissants : CLI Devaito (bas\u00e9 sur oclif ), SDKs ( @devaito/dev-kit et @devaito/app-bridge ), et APIs REST (avec GraphQL en perspective). Une int\u00e9gration simplifi\u00e9e : Connectez vos apps aux sites Devaito avec OAuth 2.0 et int\u00e9grez-les dans le panneau d'administration via un iframe s\u00e9curis\u00e9. Un tableau de bord complet : G\u00e9rez vos apps, suivez les performances, et configurez des webhooks sur devaito-admin.redg.io . Un d\u00e9marrage rapide : Utilisez des mod\u00e8les d'apps pr\u00e9configur\u00e9s (Laravel, Remix, Node.js) pour acc\u00e9l\u00e9rer le d\u00e9veloppement.","title":"Pourquoi d\u00e9velopper pour Devaito ?"},{"location":"#comment-ce-guide-est-organise","text":"Ce guide couvre tout ce dont vous avez besoin pour cr\u00e9er une app Devaito, \u00e9tape par \u00e9tape : Getting Started : Configurez votre environnement et cr\u00e9ez un compte d\u00e9veloppeur. APIs : Apprenez \u00e0 utiliser les APIs Devaito pour acc\u00e9der aux donn\u00e9es des sites. CLI : Ma\u00eetrisez le CLI Devaito pour automatiser la cr\u00e9ation et les tests. App Bridge : Int\u00e9grez votre interface dans le panneau d'administration Devaito. OAuth : Impl\u00e9mentez une authentification s\u00e9curis\u00e9e avec OAuth 2.0. Testing : Testez vos apps localement et dans un environnement sandbox. Publishing : Soumettez votre app au Devaito App Store. Resources : Trouvez des r\u00e9f\u00e9rences API, un support, et une communaut\u00e9.","title":"Comment ce guide est organis\u00e9"},{"location":"#premiers-pas","text":"Pour commencer : Cr\u00e9ez un compte d\u00e9veloppeur sur devaito-admin.redg.io . Installez le CLI Devaito : bash npm install -g @devaito/cli G\u00e9n\u00e9rez votre premi\u00e8re app : bash devaito app create --template=laravel","title":"Premiers pas"},{"location":"#exemple-rapide-une-app-bonjour-devaito","text":"Voici un aper\u00e7u de ce que vous pouvez construire : import { createApp } from '@devaito/app-bridge'; const app = createApp({ apiKey: 'votre-cl\u00e9', host: window.location.host }); app.render({ component: () => { const button = document.createElement('button'); button.innerText = 'Bonjour, Devaito !'; button.onclick = () => app.notify('Bouton cliqu\u00e9 !'); return button; }, target: '#devaito-app-container' }); Cette app affiche un bouton dans le panneau d'administration Devaito. Consultez App Bridge pour plus de d\u00e9tails.","title":"Exemple rapide : Une app \"Bonjour Devaito\""},{"location":"#support-et-communaute","text":"Documentation API : devaito.redg.io/docs/api Support : Contactez devsupport@devaito.redg.io Forum : Rejoignez la communaut\u00e9 sur devaito.redg.io/community","title":"Support et communaut\u00e9"},{"location":"#pret-a-commencer","text":"Plongez dans Getting Started et construisez votre premi\u00e8re app Devaito d\u00e8s aujourd'hui ! \ud83d\ude80 Devaito Developer Guide, powered by passion and code.","title":"Pr\u00eat \u00e0 commencer ?"},{"location":"api-management/keys/","text":"","title":"API Keys & Permissions"},{"location":"api-management/list/","text":"Liste des APIs Accessibles et leur Description Introduction Cette section fournit une liste d\u00e9taill\u00e9e des APIs disponibles sur Devaito (version SaaS multi-tenant). Chaque API couvre des fonctionnalit\u00e9s de gestion de contenus, e-commerce, social media et personnalisation. Serveur principal : https://admin.devaito.com/api 1. Authentication API Description : G\u00e8re l\u2019authentification et la gestion de session des utilisateurs. Endpoints : /login \u2192 Connexion utilisateur /logout \u2192 D\u00e9connexion Utilisation : S\u00e9curise l\u2019acc\u00e8s et g\u00e9n\u00e8re un token Bearer pour toutes les op\u00e9rations authentifi\u00e9es. 2. User API Description : R\u00e9cup\u00e8re les informations de l\u2019utilisateur et de son store. Endpoint : /user Utilisation : Obtenir le profil, avatar, type de site (ecommerce, vitrine, etc.). 3. Products API Description : Gestion et r\u00e9cup\u00e9ration du catalogue produits. Endpoints : /fetch-all-products \u2192 Liste pagin\u00e9e des produits /get-product/{slug} \u2192 D\u00e9tails d\u2019un produit via slug /popular-products \u2192 Produits les plus command\u00e9s Utilisation : Afficher produits, images, prix, promotions. 4. Orders API Description : R\u00e9cup\u00e9ration des commandes. Endpoint : /get-all-orders Utilisation : Suivi des commandes en livraison. 5. Categories API Description : Organisation et gestion des cat\u00e9gories de produits. Endpoints : /categories (CRUD : GET, POST, PUT, DELETE) /categories/{id} \u2192 D\u00e9tails, mise \u00e0 jour, suppression /fetch-categories \u2192 Liste des cat\u00e9gories avec images & slug /fetch-categories-product/{permalink} \u2192 Produits par cat\u00e9gorie Utilisation : Filtrage et navigation produit. 6. Campaigns API Description : Gestion des campagnes marketing. Endpoints : /campaigns (GET, POST) /campaigns/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er, planifier et g\u00e9rer des campagnes. 7. Posts API Description : Gestion des posts internes. Endpoints : /posts (GET, POST) \u2192 Liste ou cr\u00e9ation de posts /posts/{id} (GET, PUT, DELETE) \u2192 D\u00e9tails ou modification /posts/{id}/{job_id} \u2192 Mise \u00e0 jour du job li\u00e9 \u00e0 un post Utilisation : Publier et g\u00e9rer du contenu li\u00e9 au store. 8. Social Media APIs a. Facebook API Endpoints : /facebook/pages \u2192 R\u00e9cup\u00e9rer pages connect\u00e9es /facebook/publish-post \u2192 Publier imm\u00e9diatement un post /facebook/publish-post-job \u2192 Planifier un post (job) Utilisation : Int\u00e9gration avec les pages Facebook de l\u2019utilisateur. b. Instagram API Endpoints : /instagram/publish-post \u2192 Publier imm\u00e9diatement un post /instagram/publish-post-job \u2192 Planifier un post (job) Utilisation : Poster du contenu sur Instagram via pages li\u00e9es \u00e0 Facebook. c. Platform Connections API Endpoint : /platform-connections Utilisation : Voir les comptes sociaux connect\u00e9s. 9. Templates API Description : CRUD des templates de design. Endpoints : /templates (GET, POST) /templates/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er et r\u00e9utiliser des mod\u00e8les pour publications. 10. Platforms API Description : Gestion des plateformes disponibles. Endpoints : /platforms (GET, POST) /platforms/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir les plateformes sociales ou de publication. 11. Resolutions API Description : Gestion des tailles & r\u00e9solutions li\u00e9es aux plateformes. Endpoints : /resolutions (GET, POST) /resolutions/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir formats d\u2019images/vid\u00e9os adapt\u00e9s aux plateformes. 12. Gallery & Media APIs Description : Gestion des images et vid\u00e9os du store. Endpoints : /gallery-store \u2192 Tous les m\u00e9dias li\u00e9s au store /image-gallery \u2192 Galerie d\u2019images (pagin\u00e9e) /video-gallery \u2192 Galerie vid\u00e9os (pagin\u00e9e) /save-image \u2192 Upload image /save-video \u2192 Upload vid\u00e9o Utilisation : Centraliser les m\u00e9dias du store. 13. Store Settings APIs Description : Personnalisation du store. Endpoints : /get-store-prompt \u2192 R\u00e9cup\u00e9rer le prompt (description du store) /get-store-language \u2192 Langue du store /fonts-and-colors \u2192 Polices & couleurs configur\u00e9es Utilisation : Branding et customisation du site. 14. Content Generator API Description : G\u00e9n\u00e9ration de contenu via IA (ChatGPT). Endpoint : /content-generator Utilisation : G\u00e9n\u00e9rer titres, descriptions, textes marketing. Formats de R\u00e9ponse Format : JSON Codes statut : 200 , 201 , 400 , 401 , 404 , 500 Auth requise : Bearer Token ( Authorization: Bearer xxx ) pour la majorit\u00e9 des endpoints.","title":"API List & Descriptions"},{"location":"api-management/list/#liste-des-apis-accessibles-et-leur-description","text":"","title":"Liste des APIs Accessibles et leur Description"},{"location":"api-management/list/#introduction","text":"Cette section fournit une liste d\u00e9taill\u00e9e des APIs disponibles sur Devaito (version SaaS multi-tenant). Chaque API couvre des fonctionnalit\u00e9s de gestion de contenus, e-commerce, social media et personnalisation. Serveur principal : https://admin.devaito.com/api","title":"Introduction"},{"location":"api-management/list/#1-authentication-api","text":"Description : G\u00e8re l\u2019authentification et la gestion de session des utilisateurs. Endpoints : /login \u2192 Connexion utilisateur /logout \u2192 D\u00e9connexion Utilisation : S\u00e9curise l\u2019acc\u00e8s et g\u00e9n\u00e8re un token Bearer pour toutes les op\u00e9rations authentifi\u00e9es.","title":"1. Authentication API"},{"location":"api-management/list/#2-user-api","text":"Description : R\u00e9cup\u00e8re les informations de l\u2019utilisateur et de son store. Endpoint : /user Utilisation : Obtenir le profil, avatar, type de site (ecommerce, vitrine, etc.).","title":"2. User API"},{"location":"api-management/list/#3-products-api","text":"Description : Gestion et r\u00e9cup\u00e9ration du catalogue produits. Endpoints : /fetch-all-products \u2192 Liste pagin\u00e9e des produits /get-product/{slug} \u2192 D\u00e9tails d\u2019un produit via slug /popular-products \u2192 Produits les plus command\u00e9s Utilisation : Afficher produits, images, prix, promotions.","title":"3. Products API"},{"location":"api-management/list/#4-orders-api","text":"Description : R\u00e9cup\u00e9ration des commandes. Endpoint : /get-all-orders Utilisation : Suivi des commandes en livraison.","title":"4. Orders API"},{"location":"api-management/list/#5-categories-api","text":"Description : Organisation et gestion des cat\u00e9gories de produits. Endpoints : /categories (CRUD : GET, POST, PUT, DELETE) /categories/{id} \u2192 D\u00e9tails, mise \u00e0 jour, suppression /fetch-categories \u2192 Liste des cat\u00e9gories avec images & slug /fetch-categories-product/{permalink} \u2192 Produits par cat\u00e9gorie Utilisation : Filtrage et navigation produit.","title":"5. Categories API"},{"location":"api-management/list/#6-campaigns-api","text":"Description : Gestion des campagnes marketing. Endpoints : /campaigns (GET, POST) /campaigns/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er, planifier et g\u00e9rer des campagnes.","title":"6. Campaigns API"},{"location":"api-management/list/#7-posts-api","text":"Description : Gestion des posts internes. Endpoints : /posts (GET, POST) \u2192 Liste ou cr\u00e9ation de posts /posts/{id} (GET, PUT, DELETE) \u2192 D\u00e9tails ou modification /posts/{id}/{job_id} \u2192 Mise \u00e0 jour du job li\u00e9 \u00e0 un post Utilisation : Publier et g\u00e9rer du contenu li\u00e9 au store.","title":"7. Posts API"},{"location":"api-management/list/#8-social-media-apis","text":"","title":"8. Social Media APIs"},{"location":"api-management/list/#a-facebook-api","text":"Endpoints : /facebook/pages \u2192 R\u00e9cup\u00e9rer pages connect\u00e9es /facebook/publish-post \u2192 Publier imm\u00e9diatement un post /facebook/publish-post-job \u2192 Planifier un post (job) Utilisation : Int\u00e9gration avec les pages Facebook de l\u2019utilisateur.","title":"a. Facebook API"},{"location":"api-management/list/#b-instagram-api","text":"Endpoints : /instagram/publish-post \u2192 Publier imm\u00e9diatement un post /instagram/publish-post-job \u2192 Planifier un post (job) Utilisation : Poster du contenu sur Instagram via pages li\u00e9es \u00e0 Facebook.","title":"b. Instagram API"},{"location":"api-management/list/#c-platform-connections-api","text":"Endpoint : /platform-connections Utilisation : Voir les comptes sociaux connect\u00e9s.","title":"c. Platform Connections API"},{"location":"api-management/list/#9-templates-api","text":"Description : CRUD des templates de design. Endpoints : /templates (GET, POST) /templates/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er et r\u00e9utiliser des mod\u00e8les pour publications.","title":"9. Templates API"},{"location":"api-management/list/#10-platforms-api","text":"Description : Gestion des plateformes disponibles. Endpoints : /platforms (GET, POST) /platforms/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir les plateformes sociales ou de publication.","title":"10. Platforms API"},{"location":"api-management/list/#11-resolutions-api","text":"Description : Gestion des tailles & r\u00e9solutions li\u00e9es aux plateformes. Endpoints : /resolutions (GET, POST) /resolutions/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir formats d\u2019images/vid\u00e9os adapt\u00e9s aux plateformes.","title":"11. Resolutions API"},{"location":"api-management/list/#12-gallery-media-apis","text":"Description : Gestion des images et vid\u00e9os du store. Endpoints : /gallery-store \u2192 Tous les m\u00e9dias li\u00e9s au store /image-gallery \u2192 Galerie d\u2019images (pagin\u00e9e) /video-gallery \u2192 Galerie vid\u00e9os (pagin\u00e9e) /save-image \u2192 Upload image /save-video \u2192 Upload vid\u00e9o Utilisation : Centraliser les m\u00e9dias du store.","title":"12. Gallery &amp; Media APIs"},{"location":"api-management/list/#13-store-settings-apis","text":"Description : Personnalisation du store. Endpoints : /get-store-prompt \u2192 R\u00e9cup\u00e9rer le prompt (description du store) /get-store-language \u2192 Langue du store /fonts-and-colors \u2192 Polices & couleurs configur\u00e9es Utilisation : Branding et customisation du site.","title":"13. Store Settings APIs"},{"location":"api-management/list/#14-content-generator-api","text":"Description : G\u00e9n\u00e9ration de contenu via IA (ChatGPT). Endpoint : /content-generator Utilisation : G\u00e9n\u00e9rer titres, descriptions, textes marketing.","title":"14. Content Generator API"},{"location":"api-management/list/#formats-de-reponse","text":"Format : JSON Codes statut : 200 , 201 , 400 , 401 , 404 , 500 Auth requise : Bearer Token ( Authorization: Bearer xxx ) pour la majorit\u00e9 des endpoints.","title":"Formats de R\u00e9ponse"},{"location":"api-management/usage/","text":"Comment Connecter/Utiliser les APIs Devaito Introduction Ce guide vous explique \u00e9tape par \u00e9tape comment int\u00e9grer et utiliser les APIs Devaito (version SaaS multi-tenant). Vous trouverez des exemples de code, les bonnes pratiques et les \u00e9tapes essentielles pour chaque API. URL de base : https://admin.devaito.com/api Configuration Initiale 1. Pr\u00e9requis Acc\u00e8s au serveur Devaito Environnement de d\u00e9veloppement configur\u00e9 Biblioth\u00e8que HTTP (ex: fetch, axios, curl) Gestion des tokens pour l'authentification 2. Headers Standards // Pour les requ\u00eates authentifi\u00e9es const headers = { 'Authorization': 'Bearer YOUR_TOKEN_HERE', 'Content-Type': 'application/json' } Guide par API 1. Authentication API - Premi\u00e8re \u00c9tape Connexion d'un Utilisateur // POST /login const login = async (email, password) => { const response = await fetch('https://admin.devaito.com/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) }); const result = await response.json(); if (response.ok) { localStorage.setItem('authToken', result.token); } return result; } D\u00e9connexion // POST /logout const logout = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/logout', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } 2. User API // GET /user const getUser = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/user', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } 3. Products API R\u00e9cup\u00e9rer tous les produits // GET /fetch-all-products const getProducts = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fetch-all-products', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } R\u00e9cup\u00e9rer un produit par slug // GET /get-product/{slug} const getProduct = async (slug) => { const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`); if (response.status === 404) { throw new Error('Produit non trouv\u00e9'); } return await response.json(); } 4. Orders API // GET /get-all-orders const getOrders = async () => { const response = await fetch('https://admin.devaito.com/api/get-all-orders'); return await response.json(); } 5. Categories API // GET /fetch-categories const getCategories = async () => { const response = await fetch('https://admin.devaito.com/api/fetch-categories'); return await response.json(); } // GET /fetch-categories-product/{permalink} const getProductsByCategory = async (permalink) => { const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`); return await response.json(); } 6. Campaigns API // POST /campaigns const createCampaign = async (data) => { const response = await fetch('https://admin.devaito.com/api/campaigns', { method: 'POST', headers, body: JSON.stringify(data) }); return await response.json(); } 7. Posts API // POST /posts const createPost = async (data) => { const response = await fetch('https://admin.devaito.com/api/posts', { method: 'POST', headers, body: JSON.stringify(data) }); return await response.json(); } 8. Social Media APIs Facebook - Publier un post // POST /facebook/publish-post const publishFacebookPost = async (pageIds, caption, imageUrl) => { const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', { method: 'POST', headers, body: JSON.stringify({ page_id: pageIds, caption, imageUrl }) }); return await response.json(); } Instagram - Publier un post // POST /instagram/publish-post const publishInstagramPost = async (caption, imageUrl) => { const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', { method: 'POST', headers, body: JSON.stringify({ caption, imageUrl }) }); return await response.json(); } 9. Templates API // GET /templates const getTemplates = async () => { const response = await fetch('https://admin.devaito.com/api/templates'); return await response.json(); } 10. Gallery & Media API Upload une image // POST /save-image const uploadImage = async (file) => { const formData = new FormData(); formData.append(\"file\", file); const response = await fetch('https://admin.devaito.com/api/save-image', { method: 'POST', headers: { 'Authorization': `Bearer ${localStorage.getItem('authToken')}` }, body: formData }); return await response.json(); } Lister la galerie d\u2019images // GET /image-gallery const getImageGallery = async (page = 1) => { const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`); return await response.json(); } 11. Store Settings API // GET /fonts-and-colors const getFontsAndColors = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } 12. Content Generator API // POST /content-generator const generateContent = async (message) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/content-generator', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ message }) }); return await response.json(); } Bonnes Pratiques Toujours utiliser HTTPS en production Stocker les tokens de mani\u00e8re s\u00e9curis\u00e9e Impl\u00e9menter un refresh automatique des tokens Mettre en cache les donn\u00e9es statiques (cat\u00e9gories, templates\u2026) G\u00e9rer les erreurs (401 \u2192 reconnecter l\u2019utilisateur, 404 \u2192 message clair) D\u00e9bogage Utilisez Postman/Insomnia pour tester les endpoints Activez les DevTools r\u00e9seau du navigateur Logger toutes les requ\u00eates/r\u00e9ponses c\u00f4t\u00e9 client const originalFetch = window.fetch; window.fetch = async (...args) => { console.log('API Call:', args[0], args[1]); const response = await originalFetch(...args); console.log('API Response:', response.status, response.statusText); return response; }","title":"API Usage"},{"location":"api-management/usage/#comment-connecterutiliser-les-apis-devaito","text":"","title":"Comment Connecter/Utiliser les APIs Devaito"},{"location":"api-management/usage/#introduction","text":"Ce guide vous explique \u00e9tape par \u00e9tape comment int\u00e9grer et utiliser les APIs Devaito (version SaaS multi-tenant). Vous trouverez des exemples de code, les bonnes pratiques et les \u00e9tapes essentielles pour chaque API. URL de base : https://admin.devaito.com/api","title":"Introduction"},{"location":"api-management/usage/#configuration-initiale","text":"","title":"Configuration Initiale"},{"location":"api-management/usage/#1-prerequis","text":"Acc\u00e8s au serveur Devaito Environnement de d\u00e9veloppement configur\u00e9 Biblioth\u00e8que HTTP (ex: fetch, axios, curl) Gestion des tokens pour l'authentification","title":"1. Pr\u00e9requis"},{"location":"api-management/usage/#2-headers-standards","text":"// Pour les requ\u00eates authentifi\u00e9es const headers = { 'Authorization': 'Bearer YOUR_TOKEN_HERE', 'Content-Type': 'application/json' }","title":"2. Headers Standards"},{"location":"api-management/usage/#guide-par-api","text":"","title":"Guide par API"},{"location":"api-management/usage/#1-authentication-api-premiere-etape","text":"","title":"1. Authentication API - Premi\u00e8re \u00c9tape"},{"location":"api-management/usage/#connexion-dun-utilisateur","text":"// POST /login const login = async (email, password) => { const response = await fetch('https://admin.devaito.com/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) }); const result = await response.json(); if (response.ok) { localStorage.setItem('authToken', result.token); } return result; }","title":"Connexion d'un Utilisateur"},{"location":"api-management/usage/#deconnexion","text":"// POST /logout const logout = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/logout', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); }","title":"D\u00e9connexion"},{"location":"api-management/usage/#2-user-api","text":"// GET /user const getUser = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/user', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); }","title":"2. User API"},{"location":"api-management/usage/#3-products-api","text":"","title":"3. Products API"},{"location":"api-management/usage/#recuperer-tous-les-produits","text":"// GET /fetch-all-products const getProducts = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fetch-all-products', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); }","title":"R\u00e9cup\u00e9rer tous les produits"},{"location":"api-management/usage/#recuperer-un-produit-par-slug","text":"// GET /get-product/{slug} const getProduct = async (slug) => { const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`); if (response.status === 404) { throw new Error('Produit non trouv\u00e9'); } return await response.json(); }","title":"R\u00e9cup\u00e9rer un produit par slug"},{"location":"api-management/usage/#4-orders-api","text":"// GET /get-all-orders const getOrders = async () => { const response = await fetch('https://admin.devaito.com/api/get-all-orders'); return await response.json(); }","title":"4. Orders API"},{"location":"api-management/usage/#5-categories-api","text":"// GET /fetch-categories const getCategories = async () => { const response = await fetch('https://admin.devaito.com/api/fetch-categories'); return await response.json(); } // GET /fetch-categories-product/{permalink} const getProductsByCategory = async (permalink) => { const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`); return await response.json(); }","title":"5. Categories API"},{"location":"api-management/usage/#6-campaigns-api","text":"// POST /campaigns const createCampaign = async (data) => { const response = await fetch('https://admin.devaito.com/api/campaigns', { method: 'POST', headers, body: JSON.stringify(data) }); return await response.json(); }","title":"6. Campaigns API"},{"location":"api-management/usage/#7-posts-api","text":"// POST /posts const createPost = async (data) => { const response = await fetch('https://admin.devaito.com/api/posts', { method: 'POST', headers, body: JSON.stringify(data) }); return await response.json(); }","title":"7. Posts API"},{"location":"api-management/usage/#8-social-media-apis","text":"","title":"8. Social Media APIs"},{"location":"api-management/usage/#facebook-publier-un-post","text":"// POST /facebook/publish-post const publishFacebookPost = async (pageIds, caption, imageUrl) => { const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', { method: 'POST', headers, body: JSON.stringify({ page_id: pageIds, caption, imageUrl }) }); return await response.json(); }","title":"Facebook - Publier un post"},{"location":"api-management/usage/#instagram-publier-un-post","text":"// POST /instagram/publish-post const publishInstagramPost = async (caption, imageUrl) => { const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', { method: 'POST', headers, body: JSON.stringify({ caption, imageUrl }) }); return await response.json(); }","title":"Instagram - Publier un post"},{"location":"api-management/usage/#9-templates-api","text":"// GET /templates const getTemplates = async () => { const response = await fetch('https://admin.devaito.com/api/templates'); return await response.json(); }","title":"9. Templates API"},{"location":"api-management/usage/#10-gallery-media-api","text":"","title":"10. Gallery &amp; Media API"},{"location":"api-management/usage/#upload-une-image","text":"// POST /save-image const uploadImage = async (file) => { const formData = new FormData(); formData.append(\"file\", file); const response = await fetch('https://admin.devaito.com/api/save-image', { method: 'POST', headers: { 'Authorization': `Bearer ${localStorage.getItem('authToken')}` }, body: formData }); return await response.json(); }","title":"Upload une image"},{"location":"api-management/usage/#lister-la-galerie-dimages","text":"// GET /image-gallery const getImageGallery = async (page = 1) => { const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`); return await response.json(); }","title":"Lister la galerie d\u2019images"},{"location":"api-management/usage/#11-store-settings-api","text":"// GET /fonts-and-colors const getFontsAndColors = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); }","title":"11. Store Settings API"},{"location":"api-management/usage/#12-content-generator-api","text":"// POST /content-generator const generateContent = async (message) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/content-generator', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ message }) }); return await response.json(); }","title":"12. Content Generator API"},{"location":"api-management/usage/#bonnes-pratiques","text":"Toujours utiliser HTTPS en production Stocker les tokens de mani\u00e8re s\u00e9curis\u00e9e Impl\u00e9menter un refresh automatique des tokens Mettre en cache les donn\u00e9es statiques (cat\u00e9gories, templates\u2026) G\u00e9rer les erreurs (401 \u2192 reconnecter l\u2019utilisateur, 404 \u2192 message clair)","title":"Bonnes Pratiques"},{"location":"api-management/usage/#debogage","text":"Utilisez Postman/Insomnia pour tester les endpoints Activez les DevTools r\u00e9seau du navigateur Logger toutes les requ\u00eates/r\u00e9ponses c\u00f4t\u00e9 client const originalFetch = window.fetch; window.fetch = async (...args) => { console.log('API Call:', args[0], args[1]); const response = await originalFetch(...args); console.log('API Response:', response.status, response.statusText); return response; }","title":"D\u00e9bogage"},{"location":"app-management/collaborators/","text":"Gestion des Collaborateurs sur une Application Introduction Cette section explique comment g\u00e9rer les collaborateurs sur vos applications dans Devaito, facilitant le travail d\u2019\u00e9quipe. Ajouter des Collaborateurs Acc\u00e9der aux Param\u00e8tres : Ouvrez la carte de l\u2019application et cliquez sur \"G\u00e9rer les collaborateurs\". Inviter : Entrez l\u2019adresse e-mail d\u2019un collaborateur et s\u00e9lectionnez un r\u00f4le (lecture, \u00e9criture, administration). Confirmation : L\u2019invit\u00e9 recevra une notification pour accepter l\u2019invitation. G\u00e9rer les Droits et R\u00f4les R\u00f4les Disponibles : Lecture : Acc\u00e8s en consultation uniquement. \u00c9criture : Permet de modifier le code et les styles. Administration : Inclut tous les droits, y compris la gestion des autres collaborateurs. Modification : Ajustez les r\u00f4les via les param\u00e8tres de l\u2019application \u00e0 tout moment. Supprimer des Collaborateurs S\u00e9lection : Allez dans \"G\u00e9rer les collaborateurs\" et trouvez le collaborateur. Action : Cliquez sur \"Supprimer\" et confirmez la suppression. Notification : Le collaborateur sera inform\u00e9 de la fin de son acc\u00e8s. Conseils Attribuez des r\u00f4les adapt\u00e9s aux responsabilit\u00e9s de chaque collaborateur. Surveillez la liste des collaborateurs pour maintenir une \u00e9quipe efficace. Consultez la section \"Collaboration\" pour des bonnes pratiques d\u2019\u00e9quipe. Pour plus d\u2019informations, explorez les autres sections de ce guide.","title":"Collaborator Management"},{"location":"app-management/collaborators/#gestion-des-collaborateurs-sur-une-application","text":"","title":"Gestion des Collaborateurs sur une Application"},{"location":"app-management/collaborators/#introduction","text":"Cette section explique comment g\u00e9rer les collaborateurs sur vos applications dans Devaito, facilitant le travail d\u2019\u00e9quipe.","title":"Introduction"},{"location":"app-management/collaborators/#ajouter-des-collaborateurs","text":"Acc\u00e9der aux Param\u00e8tres : Ouvrez la carte de l\u2019application et cliquez sur \"G\u00e9rer les collaborateurs\". Inviter : Entrez l\u2019adresse e-mail d\u2019un collaborateur et s\u00e9lectionnez un r\u00f4le (lecture, \u00e9criture, administration). Confirmation : L\u2019invit\u00e9 recevra une notification pour accepter l\u2019invitation.","title":"Ajouter des Collaborateurs"},{"location":"app-management/collaborators/#gerer-les-droits-et-roles","text":"R\u00f4les Disponibles : Lecture : Acc\u00e8s en consultation uniquement. \u00c9criture : Permet de modifier le code et les styles. Administration : Inclut tous les droits, y compris la gestion des autres collaborateurs. Modification : Ajustez les r\u00f4les via les param\u00e8tres de l\u2019application \u00e0 tout moment.","title":"G\u00e9rer les Droits et R\u00f4les"},{"location":"app-management/collaborators/#supprimer-des-collaborateurs","text":"S\u00e9lection : Allez dans \"G\u00e9rer les collaborateurs\" et trouvez le collaborateur. Action : Cliquez sur \"Supprimer\" et confirmez la suppression. Notification : Le collaborateur sera inform\u00e9 de la fin de son acc\u00e8s.","title":"Supprimer des Collaborateurs"},{"location":"app-management/collaborators/#conseils","text":"Attribuez des r\u00f4les adapt\u00e9s aux responsabilit\u00e9s de chaque collaborateur. Surveillez la liste des collaborateurs pour maintenir une \u00e9quipe efficace. Consultez la section \"Collaboration\" pour des bonnes pratiques d\u2019\u00e9quipe. Pour plus d\u2019informations, explorez les autres sections de ce guide.","title":"Conseils"},{"location":"app-management/creation/","text":"Cr\u00e9ation d'une Application (\u00c9tapes D\u00e9taill\u00e9es) Introduction Cette section d\u00e9taille les \u00e9tapes pour cr\u00e9er une application sur Devaito, en offrant une approche compl\u00e8te pour les nouveaux utilisateurs comme pour les experts. \u00c9tapes de Cr\u00e9ation Acc\u00e9der \u00e0 l\u2019Interface : Connectez-vous et cliquez sur \"Cr\u00e9er une App\" dans l\u2019en-t\u00eate. S\u00e9lectionner un Template : Choisissez un template parmi ceux disponibles (ex. \"E-commerce Dashboard\" ou \"Mobile Todo App\"). Cliquez sur \"Suivant\" pour confirmer. Configurer les Param\u00e8tres : Nom : Attribuez un nom unique \u00e0 votre application. Technologie : S\u00e9lectionnez la technologie (ex. Next.js, Flutter). APIs : Ajoutez les APIs n\u00e9cessaires (ex. Payment API, Analytics API) via la liste d\u00e9roulante. Personnalisation Initiale : Ouvrez l\u2019\u00e9diteur en cliquant sur \"Ouvrir l\u2019\u00e9diteur\". Modifiez le code source, le design ou les styles selon vos besoins. Sauvegarde : Cliquez sur \"Sauvegarder\" dans l\u2019\u00e9diteur pour enregistrer vos progr\u00e8s. Aper\u00e7u : Utilisez l\u2019option d\u2019aper\u00e7u pour tester l\u2019application avant d\u00e9ploiement. Validation Assurez-vous que toutes les APIs s\u00e9lectionn\u00e9es sont correctement int\u00e9gr\u00e9es. V\u00e9rifiez l\u2019absence d\u2019erreurs dans l\u2019\u00e9diteur avant de passer \u00e0 l\u2019\u00e9tape suivante. Conseils Prenez le temps de tester chaque modification dans l\u2019\u00e9diteur. R\u00e9f\u00e9rez-vous \u00e0 la section \"Validation et Tests Automatiques\" pour des bonnes pratiques. Pour plus de d\u00e9tails, consultez \"Gestion des Applications\". Pour des informations suppl\u00e9mentaires, explorez les autres sections de ce guide.","title":"Creating an Application"},{"location":"app-management/creation/#creation-dune-application-etapes-detaillees","text":"","title":"Cr\u00e9ation d'une Application (\u00c9tapes D\u00e9taill\u00e9es)"},{"location":"app-management/creation/#introduction","text":"Cette section d\u00e9taille les \u00e9tapes pour cr\u00e9er une application sur Devaito, en offrant une approche compl\u00e8te pour les nouveaux utilisateurs comme pour les experts.","title":"Introduction"},{"location":"app-management/creation/#etapes-de-creation","text":"Acc\u00e9der \u00e0 l\u2019Interface : Connectez-vous et cliquez sur \"Cr\u00e9er une App\" dans l\u2019en-t\u00eate. S\u00e9lectionner un Template : Choisissez un template parmi ceux disponibles (ex. \"E-commerce Dashboard\" ou \"Mobile Todo App\"). Cliquez sur \"Suivant\" pour confirmer. Configurer les Param\u00e8tres : Nom : Attribuez un nom unique \u00e0 votre application. Technologie : S\u00e9lectionnez la technologie (ex. Next.js, Flutter). APIs : Ajoutez les APIs n\u00e9cessaires (ex. Payment API, Analytics API) via la liste d\u00e9roulante. Personnalisation Initiale : Ouvrez l\u2019\u00e9diteur en cliquant sur \"Ouvrir l\u2019\u00e9diteur\". Modifiez le code source, le design ou les styles selon vos besoins. Sauvegarde : Cliquez sur \"Sauvegarder\" dans l\u2019\u00e9diteur pour enregistrer vos progr\u00e8s. Aper\u00e7u : Utilisez l\u2019option d\u2019aper\u00e7u pour tester l\u2019application avant d\u00e9ploiement.","title":"\u00c9tapes de Cr\u00e9ation"},{"location":"app-management/creation/#validation","text":"Assurez-vous que toutes les APIs s\u00e9lectionn\u00e9es sont correctement int\u00e9gr\u00e9es. V\u00e9rifiez l\u2019absence d\u2019erreurs dans l\u2019\u00e9diteur avant de passer \u00e0 l\u2019\u00e9tape suivante.","title":"Validation"},{"location":"app-management/creation/#conseils","text":"Prenez le temps de tester chaque modification dans l\u2019\u00e9diteur. R\u00e9f\u00e9rez-vous \u00e0 la section \"Validation et Tests Automatiques\" pour des bonnes pratiques. Pour plus de d\u00e9tails, consultez \"Gestion des Applications\". Pour des informations suppl\u00e9mentaires, explorez les autres sections de ce guide.","title":"Conseils"},{"location":"app-management/deletion/","text":"Suppression / Archivage d'une Application Introduction Cette section vous guide sur la mani\u00e8re de supprimer ou d\u2019archiver une application sur Devaito, en veillant \u00e0 ce que ces actions soient effectu\u00e9es de fa\u00e7on s\u00e9curis\u00e9e et r\u00e9versible lorsque possible. \u00c9tapes pour Archiver Acc\u00e9der aux Param\u00e8tres : Ouvrez la carte de l\u2019application et cliquez sur les options de gestion (ex. menu d\u00e9roulant \"...\"). S\u00e9lectionner Archivage : Choisissez \"Archiver\" pour mettre l\u2019application en pause sans perte de donn\u00e9es. Confirmation : Confirmez l\u2019action ; l\u2019application passera au statut \"Archiv\u00e9e\". Restauration : Pour restaurer, recherchez l\u2019application archiv\u00e9e et s\u00e9lectionnez \"Restaurer\". \u00c9tapes pour Supprimer Acc\u00e9der aux Param\u00e8tres : M\u00eame proc\u00e9dure que pour l\u2019archivage. S\u00e9lectionner Suppression : Choisissez \"Supprimer\" pour une suppression d\u00e9finitive. Confirmation : Entrez une confirmation (ex. nom de l\u2019application) pour \u00e9viter les erreurs. Effet Imm\u00e9diat : L\u2019application sera retir\u00e9e de votre tableau de bord et les donn\u00e9es associ\u00e9es seront effac\u00e9es. Points Importants Archivage vs Suppression : L\u2019archivage est r\u00e9versible, id\u00e9al pour des projets temporaires ; la suppression est permanente. Impact sur les Collaborateurs : Les collaborateurs perdront l\u2019acc\u00e8s lors d\u2019une suppression ou archivage. Donn\u00e9es : Assurez-vous de sauvegarder les donn\u00e9es critiques avant toute action. Conseils Utilisez l\u2019archivage pour conserver des projets inactifs sans encombrer votre tableau de bord. V\u00e9rifiez deux fois avant de supprimer pour \u00e9viter les pertes accidentelles. Consultez la section \"Gestion des Versions et Historique\" pour des options de backup. Pour plus d\u2019informations, explorez les autres sections de ce guide.","title":"Deletion / Archiving"},{"location":"app-management/deletion/#suppression-archivage-dune-application","text":"","title":"Suppression / Archivage d'une Application"},{"location":"app-management/deletion/#introduction","text":"Cette section vous guide sur la mani\u00e8re de supprimer ou d\u2019archiver une application sur Devaito, en veillant \u00e0 ce que ces actions soient effectu\u00e9es de fa\u00e7on s\u00e9curis\u00e9e et r\u00e9versible lorsque possible.","title":"Introduction"},{"location":"app-management/deletion/#etapes-pour-archiver","text":"Acc\u00e9der aux Param\u00e8tres : Ouvrez la carte de l\u2019application et cliquez sur les options de gestion (ex. menu d\u00e9roulant \"...\"). S\u00e9lectionner Archivage : Choisissez \"Archiver\" pour mettre l\u2019application en pause sans perte de donn\u00e9es. Confirmation : Confirmez l\u2019action ; l\u2019application passera au statut \"Archiv\u00e9e\". Restauration : Pour restaurer, recherchez l\u2019application archiv\u00e9e et s\u00e9lectionnez \"Restaurer\".","title":"\u00c9tapes pour Archiver"},{"location":"app-management/deletion/#etapes-pour-supprimer","text":"Acc\u00e9der aux Param\u00e8tres : M\u00eame proc\u00e9dure que pour l\u2019archivage. S\u00e9lectionner Suppression : Choisissez \"Supprimer\" pour une suppression d\u00e9finitive. Confirmation : Entrez une confirmation (ex. nom de l\u2019application) pour \u00e9viter les erreurs. Effet Imm\u00e9diat : L\u2019application sera retir\u00e9e de votre tableau de bord et les donn\u00e9es associ\u00e9es seront effac\u00e9es.","title":"\u00c9tapes pour Supprimer"},{"location":"app-management/deletion/#points-importants","text":"Archivage vs Suppression : L\u2019archivage est r\u00e9versible, id\u00e9al pour des projets temporaires ; la suppression est permanente. Impact sur les Collaborateurs : Les collaborateurs perdront l\u2019acc\u00e8s lors d\u2019une suppression ou archivage. Donn\u00e9es : Assurez-vous de sauvegarder les donn\u00e9es critiques avant toute action.","title":"Points Importants"},{"location":"app-management/deletion/#conseils","text":"Utilisez l\u2019archivage pour conserver des projets inactifs sans encombrer votre tableau de bord. V\u00e9rifiez deux fois avant de supprimer pour \u00e9viter les pertes accidentelles. Consultez la section \"Gestion des Versions et Historique\" pour des options de backup. Pour plus d\u2019informations, explorez les autres sections de ce guide.","title":"Conseils"},{"location":"app-management/deployment/","text":"D\u00e9ploiement d'une Application Introduction Cette section explique comment d\u00e9ployer une application sur Devaito pour la rendre accessible et fonctionnelle. \u00c9tapes de D\u00e9ploiement V\u00e9rification Pr\u00e9alable : Assurez-vous que votre application est compl\u00e8te et test\u00e9e dans l\u2019\u00e9diteur. Confirmez que toutes les APIs et int\u00e9grations sont op\u00e9rationnelles. Acc\u00e9der au D\u00e9ploiement : Depuis la carte de l\u2019application, cliquez sur l\u2019option \"D\u00e9ployer\" (disponible une fois l\u2019application pr\u00eate). Configuration : S\u00e9lectionnez l\u2019environnement de d\u00e9ploiement (production ou test, si applicable). V\u00e9rifiez les param\u00e8tres (ex. domaine, cl\u00e9s API). Lancer le D\u00e9ploiement : Cliquez sur \"Confirmer le d\u00e9ploiement\". Attendez la fin du processus (un statut \"En cours\" sera affich\u00e9). V\u00e9rification Post-D\u00e9ploiement : Une fois termin\u00e9, le statut passera \u00e0 \"D\u00e9ploy\u00e9e\". Testez l\u2019application via l\u2019URL fournie pour s\u2019assurer de son bon fonctionnement. Points Importants Un d\u00e9ploiement peut prendre quelques minutes selon la complexit\u00e9 de l\u2019application. En cas d\u2019\u00e9chec, consultez les logs dans l\u2019\u00e9diteur pour identifier les erreurs. Conseils Sauvegardez votre travail avant de d\u00e9ployer. Explorez la section \"D\u00e9ploiement Continu (CI/CD)\" pour automatiser ce processus. Pour plus d\u2019aide, reportez-vous \u00e0 la FAQ. Pour des informations suppl\u00e9mentaires, consultez les autres sections de ce guide.","title":"Deployment"},{"location":"app-management/deployment/#deploiement-dune-application","text":"","title":"D\u00e9ploiement d'une Application"},{"location":"app-management/deployment/#introduction","text":"Cette section explique comment d\u00e9ployer une application sur Devaito pour la rendre accessible et fonctionnelle.","title":"Introduction"},{"location":"app-management/deployment/#etapes-de-deploiement","text":"V\u00e9rification Pr\u00e9alable : Assurez-vous que votre application est compl\u00e8te et test\u00e9e dans l\u2019\u00e9diteur. Confirmez que toutes les APIs et int\u00e9grations sont op\u00e9rationnelles. Acc\u00e9der au D\u00e9ploiement : Depuis la carte de l\u2019application, cliquez sur l\u2019option \"D\u00e9ployer\" (disponible une fois l\u2019application pr\u00eate). Configuration : S\u00e9lectionnez l\u2019environnement de d\u00e9ploiement (production ou test, si applicable). V\u00e9rifiez les param\u00e8tres (ex. domaine, cl\u00e9s API). Lancer le D\u00e9ploiement : Cliquez sur \"Confirmer le d\u00e9ploiement\". Attendez la fin du processus (un statut \"En cours\" sera affich\u00e9). V\u00e9rification Post-D\u00e9ploiement : Une fois termin\u00e9, le statut passera \u00e0 \"D\u00e9ploy\u00e9e\". Testez l\u2019application via l\u2019URL fournie pour s\u2019assurer de son bon fonctionnement.","title":"\u00c9tapes de D\u00e9ploiement"},{"location":"app-management/deployment/#points-importants","text":"Un d\u00e9ploiement peut prendre quelques minutes selon la complexit\u00e9 de l\u2019application. En cas d\u2019\u00e9chec, consultez les logs dans l\u2019\u00e9diteur pour identifier les erreurs.","title":"Points Importants"},{"location":"app-management/deployment/#conseils","text":"Sauvegardez votre travail avant de d\u00e9ployer. Explorez la section \"D\u00e9ploiement Continu (CI/CD)\" pour automatiser ce processus. Pour plus d\u2019aide, reportez-vous \u00e0 la FAQ. Pour des informations suppl\u00e9mentaires, consultez les autres sections de ce guide.","title":"Conseils"},{"location":"app-management/status/","text":"Statuts des Applications (En D\u00e9veloppement, D\u00e9ploy\u00e9e, etc.) Introduction Cette section d\u00e9crit les diff\u00e9rents statuts des applications sur Devaito, vous permettant de suivre leur progression et leur \u00e9tat actuel. Types de Statuts En D\u00e9veloppement : Indique qu\u2019une application est en cours de cr\u00e9ation ou de modification. Exemple : \"Mobile Todo App\" avec le badge orange. Actions possibles : \u00c9dition, test, ajout de collaborateurs. D\u00e9ploy\u00e9e : Signifie que l\u2019application est active et accessible aux utilisateurs. Exemple : \"E-commerce Dashboard\" avec le badge vert. Actions possibles : Maintenance, mises \u00e0 jour, suivi des performances. Archiv\u00e9e (si applicable) : Indique une application mise en pause ou supprim\u00e9e temporairement. Actions possibles : Restauration ou suppression d\u00e9finitive. Gestion des Statuts Suivi : Les statuts sont affich\u00e9s sur les cartes des applications dans le tableau de bord. Changement de Statut : Passez d\u2019\"En D\u00e9veloppement\" \u00e0 \"D\u00e9ploy\u00e9e\" via l\u2019option de d\u00e9ploiement. Archivez une application via les param\u00e8tres de gestion. Indicateurs : Les badges color\u00e9s (orange, vert) facilitent l\u2019identification rapide. Conseils Priorisez les applications \"En D\u00e9veloppement\" pour les finaliser. Surveillez les applications \"D\u00e9ploy\u00e9es\" pour des mises \u00e0 jour r\u00e9guli\u00e8res. Consultez la section \"Gestion des Applications\" pour plus de d\u00e9tails sur les transitions de statut. Pour des informations suppl\u00e9mentaires, explorez les autres sections de ce guide.","title":"Application Status"},{"location":"app-management/status/#statuts-des-applications-en-developpement-deployee-etc","text":"","title":"Statuts des Applications (En D\u00e9veloppement, D\u00e9ploy\u00e9e, etc.)"},{"location":"app-management/status/#introduction","text":"Cette section d\u00e9crit les diff\u00e9rents statuts des applications sur Devaito, vous permettant de suivre leur progression et leur \u00e9tat actuel.","title":"Introduction"},{"location":"app-management/status/#types-de-statuts","text":"En D\u00e9veloppement : Indique qu\u2019une application est en cours de cr\u00e9ation ou de modification. Exemple : \"Mobile Todo App\" avec le badge orange. Actions possibles : \u00c9dition, test, ajout de collaborateurs. D\u00e9ploy\u00e9e : Signifie que l\u2019application est active et accessible aux utilisateurs. Exemple : \"E-commerce Dashboard\" avec le badge vert. Actions possibles : Maintenance, mises \u00e0 jour, suivi des performances. Archiv\u00e9e (si applicable) : Indique une application mise en pause ou supprim\u00e9e temporairement. Actions possibles : Restauration ou suppression d\u00e9finitive.","title":"Types de Statuts"},{"location":"app-management/status/#gestion-des-statuts","text":"Suivi : Les statuts sont affich\u00e9s sur les cartes des applications dans le tableau de bord. Changement de Statut : Passez d\u2019\"En D\u00e9veloppement\" \u00e0 \"D\u00e9ploy\u00e9e\" via l\u2019option de d\u00e9ploiement. Archivez une application via les param\u00e8tres de gestion. Indicateurs : Les badges color\u00e9s (orange, vert) facilitent l\u2019identification rapide.","title":"Gestion des Statuts"},{"location":"app-management/status/#conseils","text":"Priorisez les applications \"En D\u00e9veloppement\" pour les finaliser. Surveillez les applications \"D\u00e9ploy\u00e9es\" pour des mises \u00e0 jour r\u00e9guli\u00e8res. Consultez la section \"Gestion des Applications\" pour plus de d\u00e9tails sur les transitions de statut. Pour des informations suppl\u00e9mentaires, explorez les autres sections de ce guide.","title":"Conseils"},{"location":"appendices/api-references/","text":"API References Overview This section provides detailed references for Devaito v2.0 APIs, including endpoints, parameters, and usage examples. For a list of available APIs, see API List & Descriptions. API Structure Devaito APIs follow RESTful conventions: Base URL: https://api.devaito.com/v2 Authentication: Use API keys in the Authorization header (see API Keys & Permissions). Formats: JSON for requests and responses. Common Endpoints GET /applications: List all applications for the authenticated user. Parameters: limit, offset Example: curl -H \"Authorization: Bearer \" https://api.devaito.com/v2/applications POST /applications: Create a new application. Body: { \"name\": \"MyApp\", \"description\": \"Test app\" } Example: curl -X POST -H \"Authorization: Bearer \" -d '{\"name\":\"MyApp\"}' https://api.devaito.com/v2/applications GET /applications/{id}/status: Check application status. Example: curl -H \"Authorization: Bearer \" https://api.devaito.com/v2/applications/123/status POST /webhooks: Create a webhook. Body: { \"url\": \"https://example.com/webhook\", \"event\": \"deployment\" } Example: See Automations & Webhooks. Best Practices Rate Limits: Adhere to limits outlined in API Usage. Error Handling: Handle HTTP status codes (e.g., 429 for rate limits, 401 for auth errors). Security: Store API keys securely and rotate regularly. Troubleshooting Authentication Errors: Verify API key validity (see API Keys & Permissions). Invalid Requests: Check parameter formats and required fields. Rate Limit Issues: Optimize request frequency or contact support for higher quotas. For full API documentation, visit https://api.devaito.com/docs or contact support@devaito.com.","title":"API References"},{"location":"appendices/glossary/","text":"Glossary Overview This glossary defines key terms used in the Devaito v2.0 Developer Guide to help you understand the platform\u2019s concepts and terminology. Terms API Key: A unique identifier used to authenticate API requests (see API Keys & Permissions). Application: A project or service managed within Devaito, including code, configurations, and APIs. Collaborator: A user invited to work on an application, with roles like Admin or Developer (see Roles & Permissions ). Deployment: The process of publishing an application to a live environment (see Deployment). Webhook: An HTTP callback triggered by events in Devaito, used for integrations (see Automations & Webhooks). Versioning: Tracking and managing different versions of an application\u2019s code or configurations (see Version Management). CI/CD: Continuous Integration and Continuous Deployment, automating code integration and deployment (see CI/CD). Validation: Automated checks to ensure code quality before deployment (see Validation & Testing). Role: A set of permissions defining what a collaborator can do (e.g., Admin, Viewer) (see Roles & Permissions). Integration: Connecting Devaito with external services like GitHub or Slack (see Specific Integrations). Additional Notes Terms are cross-referenced with relevant guide sections for deeper understanding. For platform-specific terms, check API References or contact support@devaito.com.","title":"Glossary"},{"location":"appendices/release-notes/","text":"Release Notes Overview This section lists updates, features, and bug fixes for Devaito v2.0 and its subsequent releases. Check here for the latest platform improvements. Version 2.0.0 (August 2025) New Features: Enhanced collaboration tools (see Collaboration). Advanced integrations with GitHub, Slack, and AWS (see Specific Integrations). CI/CD pipeline support (see CI/CD). Improved API key management (see API Keys & Permissions). Improvements: Faster deployment times (see Deployment). Updated validation scripts (see Validation & Testing). Bug Fixes: Fixed webhook delivery issues. Resolved role permission conflicts for collaborators. Version 2.0.1 (TBD) Planned Features: Support for additional cloud providers. Enhanced debugging tools (see Debugging). Known Issues: Minor UI glitches in the collaborator management panel. Staying Updated Monitor this page for new releases. Subscribe to Devaito\u2019s newsletter for real-time updates. Contact support@devaito.com for release-specific questions.","title":"Release Notes"},{"location":"appendices/resources/","text":"External Resources Overview This section provides links to external tools, documentation, and communities to support your development on Devaito v2.0. Official Resources Devaito Website: https://www.devaito.com \u2013 Main site for account management and support. API Documentation: https://api.devaito.com/docs \u2013 Full API reference (see API References). Support Portal: support@devaito.com \u2013 Contact for technical assistance. Third-Party Tools GitHub: https://docs.github.com \u2013 For version control integration (see Specific Integrations). Jenkins: https://www.jenkins.io/doc \u2013 For CI/CD pipelines (see CI/CD). Slack: https://api.slack.com \u2013 For notification integrations. New Relic: https://docs.newrelic.com \u2013 For monitoring application performance. Communities Devaito Forum: https://forum.devaito.com \u2013 Discuss issues and share tips. Stack Overflow: Use tag devaito for community-driven Q&A. Reddit: Join r/devaito for user discussions and updates. Learning Resources REST API Guide: https://restfulapi.net \u2013 Learn REST principles for Devaito APIs. Git Basics: https://git-scm.com/doc \u2013 Understand version control for Version Management. CI/CD Best Practices: https://www.cloudbees.com/ci-cd-best-practices \u2013 Optimize pipelines. Troubleshooting Use these resources alongside Common Solutions for issue resolution. Contact support@devaito.com for platform-specific guidance.","title":"External Resources"},{"location":"code-management/best-practices/","text":"","title":"Best practices"},{"location":"code-management/debugging/","text":"","title":"Debugging"},{"location":"code-management/formats/","text":"Code Formats & Conventions Overview This guide establishes the coding standards, file organization patterns, and naming conventions for Devaito v2.0 applications. Following these conventions ensures consistency, maintainability, and seamless integration with the Devaito platform APIs. Benefits of Following Conventions: - Improved code readability and maintainability - Better team collaboration - Easier debugging and troubleshooting - Consistent deployment behavior - Enhanced platform compatibility Project Structure Standards Web Application Structure Standard Frontend Structure: project-root/ \u251c\u2500\u2500 index.html # Main entry point (required) \u251c\u2500\u2500 assets/ # Static assets directory \u2502 \u251c\u2500\u2500 css/ # Stylesheets \u2502 \u2502 \u251c\u2500\u2500 main.css # Primary styles \u2502 \u2502 \u251c\u2500\u2500 components.css # Component styles \u2502 \u2502 \u2514\u2500\u2500 responsive.css # Media queries \u2502 \u251c\u2500\u2500 js/ # JavaScript files \u2502 \u2502 \u251c\u2500\u2500 app.js # Main application logic \u2502 \u2502 \u251c\u2500\u2500 api.js # API integration \u2502 \u2502 \u251c\u2500\u2500 utils.js # Utility functions \u2502 \u2502 \u2514\u2500\u2500 components/ # Reusable components \u2502 \u251c\u2500\u2500 images/ # Image assets \u2502 \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2502 \u251c\u2500\u2500 icons/ \u2502 \u2502 \u2514\u2500\u2500 products/ \u2502 \u2514\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 api/ # Backend API files \u2502 \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 controllers/ # Request handlers \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u2514\u2500\u2500 middleware/ # Custom middleware \u251c\u2500\u2500 config/ # Application configuration \u2502 \u251c\u2500\u2500 database.php # Database settings \u2502 \u251c\u2500\u2500 app.js # App configuration \u2502 \u2514\u2500\u2500 environment.env # Environment variables \u251c\u2500\u2500 vendor/ # Third-party libraries \u251c\u2500\u2500 node_modules/ # NPM packages (excluded from upload) \u251c\u2500\u2500 package.json # Node.js dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 README.md # Project documentation Framework-Specific Structures React Application Structure: react-app/ \u251c\u2500\u2500 public/ \u2502 \u251c\u2500\u2500 index.html # HTML template \u2502 \u251c\u2500\u2500 favicon.ico # Site icon \u2502 \u2514\u2500\u2500 manifest.json # PWA manifest \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Reusable components \u2502 \u2502 \u251c\u2500\u2500 common/ # Shared components \u2502 \u2502 \u251c\u2500\u2500 layout/ # Layout components \u2502 \u2502 \u2514\u2500\u2500 ui/ # UI elements \u2502 \u251c\u2500\u2500 pages/ # Page components \u2502 \u2502 \u251c\u2500\u2500 Home.jsx \u2502 \u2502 \u251c\u2500\u2500 Products.jsx \u2502 \u2502 \u2514\u2500\u2500 Cart.jsx \u2502 \u251c\u2500\u2500 hooks/ # Custom React hooks \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u2502 \u251c\u2500\u2500 api.js # Base API client \u2502 \u2502 \u251c\u2500\u2500 products.js # Product API calls \u2502 \u2502 \u2514\u2500\u2500 auth.js # Authentication \u2502 \u251c\u2500\u2500 utils/ # Utility functions \u2502 \u251c\u2500\u2500 styles/ # Style files \u2502 \u251c\u2500\u2500 App.js # Main App component \u2502 \u2514\u2500\u2500 index.js # Entry point \u251c\u2500\u2500 build/ # Production build output \u251c\u2500\u2500 package.json \u2514\u2500\u2500 .env # Environment variables Vue.js Application Structure: vue-app/ \u251c\u2500\u2500 public/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Vue components \u2502 \u251c\u2500\u2500 views/ # Page views \u2502 \u251c\u2500\u2500 router/ # Vue Router config \u2502 \u251c\u2500\u2500 store/ # Vuex store \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u251c\u2500\u2500 App.vue # Root component \u2502 \u2514\u2500\u2500 main.js # Entry point \u251c\u2500\u2500 dist/ # Build output \u2514\u2500\u2500 package.json PHP Application Structure: php-app/ \u251c\u2500\u2500 public/ # Web-accessible directory \u2502 \u251c\u2500\u2500 index.php # Entry point \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u2514\u2500\u2500 .htaccess # Apache configuration \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 Controllers/ # Request controllers \u2502 \u251c\u2500\u2500 Models/ # Data models \u2502 \u251c\u2500\u2500 Services/ # Business logic \u2502 \u2514\u2500\u2500 Utils/ # Utility classes \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 database.php \u2502 \u2514\u2500\u2500 app.php \u251c\u2500\u2500 vendor/ # Composer dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 .env # Environment configuration File Naming Conventions General Rules File Naming Standards: - Use lowercase with hyphens: user-profile.js \u2705 - Avoid spaces and underscores: user_profile.js \u274c, user profile.js \u274c - Use descriptive names: product-card.component.js \u2705 - Include file purpose in name: auth.service.js , product.model.js - Keep names concise but meaningful: cart.js \u2705 vs shopping-cart-functionality.js \u274c Language-Specific Naming JavaScript/TypeScript Files: // Components (PascalCase for classes/components) UserProfile.js ProductCard.jsx ShoppingCart.tsx // Services and utilities (camelCase) apiService.js dataUtils.js authHelper.ts // Configuration files (lowercase with hyphens) webpack-config.js babel-config.js eslint-config.js // Page/route files (lowercase with hyphens) home-page.js product-detail.js checkout-flow.js PHP Files: // Classes (PascalCase) UserController.php ProductModel.php DatabaseService.php // Functions and utilities (camelCase) helpers.php utilities.php functions.php // Configuration (lowercase) config.php database.php settings.php CSS/SCSS Files: // Main stylesheets main.css styles.scss variables.scss // Component styles (match component names) user-profile.css product-card.scss navigation.css // Layout styles layout.css grid-system.scss responsive.css Directory Naming Directory Structure Rules: - Use lowercase with hyphens: user-management/ \u2705 - Be descriptive and specific: product-components/ \u2705 vs components/ \u274c - Group related functionality: auth-services/ , payment-utils/ - Use plural nouns for collections: components/ , services/ , models/ Examples: src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 ui-elements/ \u2502 \u251c\u2500\u2500 form-controls/ \u2502 \u2514\u2500\u2500 navigation/ \u251c\u2500\u2500 services/ \u2502 \u251c\u2500\u2500 api-clients/ \u2502 \u251c\u2500\u2500 data-processing/ \u2502 \u2514\u2500\u2500 third-party/ \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 string-helpers/ \u2502 \u251c\u2500\u2500 date-functions/ \u2502 \u2514\u2500\u2500 validation/ \u2514\u2500\u2500 assets/ \u251c\u2500\u2500 image-files/ \u251c\u2500\u2500 font-files/ \u2514\u2500\u2500 icon-sets/ Configuration Files Environment Configuration Environment Variables (.env): # Application Settings APP_NAME=MyDevaitoApp APP_ENV=production APP_DEBUG=false APP_URL=https://myapp.devaito.com # Database Configuration DB_CONNECTION=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=myapp_db DB_USERNAME=db_user DB_PASSWORD=secure_password # Devaito API Configuration DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=11|your_bearer_token_here DEVAITO_APP_ID=your_app_id # Third-party Services STRIPE_PUBLIC_KEY=pk_live_your_stripe_key STRIPE_SECRET_KEY=sk_live_your_stripe_secret PAYPAL_CLIENT_ID=your_paypal_client_id # Email Configuration MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=587 MAIL_USERNAME=your-email@gmail.com MAIL_PASSWORD=your_app_password # Cache Settings CACHE_DRIVER=redis REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 # File Storage FILESYSTEM_DISK=local AWS_ACCESS_KEY_ID=your_aws_key AWS_SECRET_ACCESS_KEY=your_aws_secret AWS_DEFAULT_REGION=us-east-1 AWS_BUCKET=your_s3_bucket Package Configuration package.json Structure: { \"name\": \"my-devaito-app\", \"version\": \"1.0.0\", \"description\": \"E-commerce application built with Devaito APIs\", \"main\": \"index.js\", \"keywords\": [\"ecommerce\", \"devaito\", \"api\"], \"author\": { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" }, \"license\": \"MIT\", \"engines\": { \"node\": \">=16.0.0\", \"npm\": \">=8.0.0\" }, \"scripts\": { \"start\": \"node server.js\", \"dev\": \"nodemon server.js\", \"build\": \"webpack --mode=production\", \"test\": \"jest\", \"lint\": \"eslint src/\", \"format\": \"prettier --write src/\" }, \"dependencies\": { \"axios\": \"^1.6.0\", \"express\": \"^4.18.0\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.0.0\" }, \"devDependencies\": { \"eslint\": \"^8.50.0\", \"prettier\": \"^3.0.0\", \"jest\": \"^29.0.0\", \"nodemon\": \"^3.0.0\" }, \"devaito\": { \"app_id\": \"your_app_id\", \"api_version\": \"v1\", \"build_command\": \"npm run build\", \"start_command\": \"npm start\" } } composer.json Structure (PHP): { \"name\": \"yourname/devaito-app\", \"description\": \"PHP application using Devaito APIs\", \"type\": \"project\", \"keywords\": [\"php\", \"ecommerce\", \"devaito\"], \"license\": \"MIT\", \"authors\": [ { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" } ], \"minimum-stability\": \"stable\", \"require\": { \"php\": \"^8.0\", \"guzzlehttp/guzzle\": \"^7.0\", \"vlucas/phpdotenv\": \"^5.0\", \"monolog/monolog\": \"^3.0\" }, \"require-dev\": { \"phpunit/phpunit\": \"^10.0\", \"phpstan/phpstan\": \"^1.0\", \"squizlabs/php_codesniffer\": \"^3.0\" }, \"autoload\": { \"psr-4\": { \"App\\\\\": \"src/\" } }, \"autoload-dev\": { \"psr-4\": { \"Tests\\\\\": \"tests/\" } }, \"scripts\": { \"test\": \"phpunit\", \"lint\": \"phpcs src/\", \"analyze\": \"phpstan analyse src/\" } } Code Quality Standards JavaScript/TypeScript Standards Modern JavaScript Practices: // Use const/let instead of var const API_BASE_URL = 'https://svelte.devaito.com'; let currentUser = null; // Arrow functions for callbacks const fetchProducts = async (category) => { try { const response = await fetch(`${API_BASE_URL}/products?category=${category}`); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.json(); } catch (error) { console.error('Failed to fetch products:', error); throw error; } }; // Destructuring for cleaner code const { products, categories, total } = await fetchCatalogData(); // Template literals for strings const productUrl = `${API_BASE_URL}/products/${productSlug}`; // Async/await instead of promises const loadUserData = async (userId) => { const user = await fetchUser(userId); const orders = await fetchUserOrders(userId); return { user, orders }; }; // Object shorthand const createProductData = (name, price, category) => ({ name, price, category, createdAt: new Date().toISOString() }); // Default parameters const formatPrice = (price, currency = 'USD', locale = 'en-US') => { return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(price); }; TypeScript Best Practices: // Interface definitions interface Product { id: string; name: string; price: number; category: string; slug: string; images: string[]; inStock: boolean; createdAt: Date; } interface ApiResponse<T> { success: boolean; data: T; message?: string; errors?: string[]; } // Generic functions async function apiCall<T>(endpoint: string): Promise<ApiResponse<T>> { const response = await fetch(`${API_BASE_URL}${endpoint}`, { headers: { 'Authorization': `Bearer ${process.env.DEVAITO_API_TOKEN}`, 'Content-Type': 'application/json' } }); return response.json(); } // Type guards function isProduct(obj: any): obj is Product { return obj && typeof obj.id === 'string' && typeof obj.name === 'string' && typeof obj.price === 'number'; } // Enum usage enum OrderStatus { PENDING = 'pending', PROCESSING = 'processing', SHIPPED = 'shipped', DELIVERED = 'delivered', CANCELLED = 'cancelled' } PHP Standards (PSR Compliance) PSR-4 Autoloading Structure: <?php // src/Controllers/ProductController.php namespace App\\Controllers; use App\\Services\\ProductService; use App\\Models\\Product; use Exception; class ProductController { private ProductService $productService; public function __construct(ProductService $productService) { $this->productService = $productService; } public function getProducts(array $filters = []): array { try { $products = $this->productService->getFilteredProducts($filters); return [ 'success' => true, 'data' => $products, 'count' => count($products) ]; } catch (Exception $e) { error_log(\"Product fetch error: \" . $e->getMessage()); return [ 'success' => false, 'error' => 'Failed to fetch products', 'message' => $e->getMessage() ]; } } public function getProduct(string $slug): array { if (empty($slug)) { return [ 'success' => false, 'error' => 'Product slug is required' ]; } $product = $this->productService->getBySlug($slug); if (!$product) { return [ 'success' => false, 'error' => 'Product not found' ]; } return [ 'success' => true, 'data' => $product ]; } } Model Structure: <?php // src/Models/Product.php namespace App\\Models; use DateTime; class Product { private string $id; private string $name; private float $price; private string $category; private string $slug; private array $images; private bool $inStock; private DateTime $createdAt; public function __construct(array $data) { $this->id = $data['id'] ?? ''; $this->name = $data['name'] ?? ''; $this->price = (float)($data['price'] ?? 0); $this->category = $data['category'] ?? ''; $this->slug = $data['slug'] ?? ''; $this->images = $data['images'] ?? []; $this->inStock = (bool)($data['in_stock'] ?? false); $this->createdAt = new DateTime($data['created_at'] ?? 'now'); } // Getters public function getId(): string { return $this->id; } public function getName(): string { return $this->name; } public function getPrice(): float { return $this->price; } public function getFormattedPrice(string $currency = 'USD'): string { return number_format($this->price, 2) . ' ' . $currency; } // Validation public function isValid(): bool { return !empty($this->id) && !empty($this->name) && $this->price > 0 && !empty($this->slug); } // Serialization public function toArray(): array { return [ 'id' => $this->id, 'name' => $this->name, 'price' => $this->price, 'category' => $this->category, 'slug' => $this->slug, 'images' => $this->images, 'in_stock' => $this->inStock, 'created_at' => $this->createdAt->format('c') ]; } } CSS/SCSS Standards CSS Architecture: /* Base styles - variables and resets */ :root { --primary-color: #3498db; --secondary-color: #2ecc71; --danger-color: #e74c3c; --warning-color: #f39c12; --text-color: #2c3e50; --background-color: #ffffff; --border-color: #ecf0f1; --font-family-primary: 'Inter', sans-serif; --font-family-secondary: 'Georgia', serif; --spacing-xs: 0.25rem; --spacing-sm: 0.5rem; --spacing-md: 1rem; --spacing-lg: 1.5rem; --spacing-xl: 2rem; --border-radius: 0.375rem; --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); } /* Component-based structure */ .product-card { display: flex; flex-direction: column; background: var(--background-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: var(--box-shadow); padding: var(--spacing-md); transition: transform 0.2s ease, box-shadow 0.2s ease; } .product-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); } .product-card__image { width: 100%; height: 200px; object-fit: cover; border-radius: var(--border-radius); margin-bottom: var(--spacing-sm); } .product-card__title { font-family: var(--font-family-primary); font-size: 1.125rem; font-weight: 600; color: var(--text-color); margin-bottom: var(--spacing-xs); line-height: 1.4; } .product-card__price { font-size: 1.25rem; font-weight: 700; color: var(--primary-color); margin-bottom: var(--spacing-md); } /* Responsive design */ @media (max-width: 768px) { .product-card { padding: var(--spacing-sm); } .product-card__image { height: 150px; } } SCSS Structure: // _variables.scss $primary-color: #3498db; $secondary-color: #2ecc71; $text-color: #2c3e50; $breakpoints: ( 'mobile': 480px, 'tablet': 768px, 'desktop': 1024px, 'wide': 1200px ); // _mixins.scss @mixin respond-to($breakpoint) { @if map-has-key($breakpoints, $breakpoint) { @media (min-width: map-get($breakpoints, $breakpoint)) { @content; } } } @mixin button-style($bg-color: $primary-color, $text-color: white) { background-color: $bg-color; color: $text-color; border: none; padding: 0.75rem 1.5rem; border-radius: 0.375rem; cursor: pointer; transition: all 0.2s ease; &:hover { background-color: darken($bg-color, 10%); transform: translateY(-1px); } } // main.scss @import 'variables'; @import 'mixins'; .btn-primary { @include button-style($primary-color, white); } .product-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; @include respond-to('tablet') { grid-template-columns: repeat(2, 1fr); } @include respond-to('desktop') { grid-template-columns: repeat(3, 1fr); } } API Integration Standards Devaito API Client Structure Base API Client: // services/api.js class DevaitoAPI { constructor() { this.baseURL = process.env.DEVAITO_API_URL || 'https://svelte.devaito.com'; this.token = process.env.DEVAITO_API_TOKEN; this.timeout = 30000; // 30 seconds } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const config = { timeout: this.timeout, headers: { 'Content-Type': 'application/json', ...options.headers }, ...options }; // Add authentication header if token is available if (this.token && !options.skipAuth) { config.headers.Authorization = `Bearer ${this.token}`; } try { const response = await fetch(url, config); if (!response.ok) { throw new APIError(response.status, response.statusText); } const contentType = response.headers.get('content-type'); if (contentType && contentType.includes('application/json')) { return await response.json(); } return await response.text(); } catch (error) { if (error instanceof APIError) { throw error; } throw new APIError(0, 'Network error', error.message); } } // GET request async get(endpoint, params = {}) { const queryString = new URLSearchParams(params).toString(); const url = queryString ? `${endpoint}?${queryString}` : endpoint; return this.request(url, { method: 'GET' }); } // POST request async post(endpoint, data = {}) { return this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); } // PUT request async put(endpoint, data = {}) { return this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); } // DELETE request async delete(endpoint) { return this.request(endpoint, { method: 'DELETE' }); } } // Custom error class class APIError extends Error { constructor(status, statusText, details = null) { super(`API Error ${status}: ${statusText}`); this.status = status; this.statusText = statusText; this.details = details; this.name = 'APIError'; } } export default new DevaitoAPI(); Service-Specific Clients: // services/products.js import api from './api.js'; export const productService = { // Get all products with optional filters async getProducts(filters = {}) { const params = { category: filters.category, min_price: filters.minPrice, max_price: filters.maxPrice, search: filters.search, page: filters.page || 1, limit: filters.limit || 20 }; // Remove undefined values Object.keys(params).forEach(key => { if (params[key] === undefined) delete params[key]; }); return api.get('/products', params); }, // Get single product by slug async getProduct(slug) { if (!slug) { throw new Error('Product slug is required'); } return api.get(`/products/${slug}`); }, // Get product reviews async getProductReviews(slug, page = 1) { return api.get(`/products/${slug}/reviews`, { page }); }, // Add product review (requires authentication) async addReview(slug, reviewData) { const { rating, comment, title } = reviewData; if (!rating || rating < 1 || rating > 5) { throw new Error('Rating must be between 1 and 5'); } return api.post(`/products/${slug}/reviews`, { rating, comment, title }); } }; // services/cart.js export const cartService = { // Get cart contents async getCart() { return api.get('/cart'); }, // Add item to cart async addToCart(productId, quantity = 1, variant = null) { return api.post('/cart', { product_id: productId, quantity, variant }); }, // Update cart item quantity async updateCartItem(itemId, quantity) { return api.put(`/cart/${itemId}`, { quantity }); }, // Remove item from cart async removeFromCart(itemId) { return api.delete(`/cart/${itemId}`); }, // Clear entire cart async clearCart() { return api.delete('/cart'); } }; Error Handling Standards Centralized Error Handler: // utils/error-handler.js export class ErrorHandler { static handle(error, context = '') { console.group(`\ud83d\udea8 Error in ${context || 'Application'}`); console.error('Error:', error.message); if (error instanceof APIError) { console.error('Status:', error.status); console.error('Details:', error.details); // Handle specific API errors switch (error.status) { case 401: this.handleUnauthorized(); break; case 429: this.handleRateLimit(); break; case 500: this.handleServerError(); break; } } console.error('Stack:', error.stack); console.groupEnd(); // Report to monitoring service this.reportError(error, context); } static handleUnauthorized() { // Clear stored tokens localStorage.removeItem('auth_token'); // Redirect to login window.location.href = '/login'; } static handleRateLimit() { // Show rate limit message this.showUserMessage('Too many requests. Please try again later.', 'warning'); } static handleServerError() { // Show generic error message this.showUserMessage('Server error. Please try again.', 'error'); } static showUserMessage(message, type = 'info') { // Implementation depends on your UI framework console.log(`${type.toUpperCase()}: ${message}`); } static reportError(error, context) { // Send error to monitoring service if (typeof window !== 'undefined' && window.analytics) { window.analytics.track('Error Occurred', { error: error.message, context, stack: error.stack, timestamp: new Date().toISOString() }); } } } // Usage in components try { const products = await productService.getProducts(); setProducts(products.data); } catch (error) { ErrorHandler.handle(error, 'ProductList Component'); } Documentation Standards Code Documentation JSDoc Comments: /** * Fetches products from the Devaito API with optional filtering * @param {Object} filters - Filter options for products * @param {string} [filters.category] - Product category slug * @param {number} [filters.minPrice] - Minimum price filter * @param {number} [filters.maxPrice] - Maximum price filter * @param {string} [filters.search] - Search query * @param {number} [filters.page=1] - Page number for pagination * @param {number} [filters.limit=20] - Number of items per page * @returns {Promise<Object>} API response with products array * @throws {APIError} When API request fails * @example * // Get all products * const products = await getProducts(); * * // Get products with filters * const filteredProducts = await getProducts({ * category: 'electronics', * minPrice: 100, * maxPrice: 500 * }); */ async function getProducts(filters = {}) { // Implementation here } README.md Template: # Project Name Brief description of your Devaito-powered application. ## Features - \ud83d\udecd\ufe0f Product catalog integration - \ud83d\uded2 Shopping cart functionality - \ud83d\udc64 User authentication - \ud83d\udcb3 Payment processing - \ud83d\udcf1 Responsive design ## Prerequisites - Node.js 16+ or PHP 8+ - Devaito API token - Modern web browser ## Installation ```bash # Clone repository git clone https://github.com/yourusername/your-app.git cd your-app # Install dependencies npm install # or composer install # Configure environment cp .env.example .env # Edit .env with your API keys Configuration Add your Devaito API credentials to .env : DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=your_bearer_token_here DEVAITO_APP_ID=your_app_id Usage # Development npm run dev # Production build npm run build npm start API Integration This application uses the following Devaito APIs: Products API : Product catalog and details Cart API : Shopping cart management Authentication API : User login/signup Payment Methods API : Available payment options Contributing Fork the repository Create feature branch ( git checkout -b feature/amazing-feature ) Commit changes ( git commit -m 'Add amazing feature' ) Push to branch ( git push origin feature/amazing-feature ) Open a Pull Request License This project is licensed under the MIT License - see LICENSE file. ``` Following these code formats and conventions ensures your Devaito applications are maintainable, scalable, and integrate seamlessly with the platform's APIs and deployment system.","title":"Code Formats & Conventions"},{"location":"code-management/formats/#code-formats-conventions","text":"","title":"Code Formats &amp; Conventions"},{"location":"code-management/formats/#overview","text":"This guide establishes the coding standards, file organization patterns, and naming conventions for Devaito v2.0 applications. Following these conventions ensures consistency, maintainability, and seamless integration with the Devaito platform APIs. Benefits of Following Conventions: - Improved code readability and maintainability - Better team collaboration - Easier debugging and troubleshooting - Consistent deployment behavior - Enhanced platform compatibility","title":"Overview"},{"location":"code-management/formats/#project-structure-standards","text":"","title":"Project Structure Standards"},{"location":"code-management/formats/#web-application-structure","text":"Standard Frontend Structure: project-root/ \u251c\u2500\u2500 index.html # Main entry point (required) \u251c\u2500\u2500 assets/ # Static assets directory \u2502 \u251c\u2500\u2500 css/ # Stylesheets \u2502 \u2502 \u251c\u2500\u2500 main.css # Primary styles \u2502 \u2502 \u251c\u2500\u2500 components.css # Component styles \u2502 \u2502 \u2514\u2500\u2500 responsive.css # Media queries \u2502 \u251c\u2500\u2500 js/ # JavaScript files \u2502 \u2502 \u251c\u2500\u2500 app.js # Main application logic \u2502 \u2502 \u251c\u2500\u2500 api.js # API integration \u2502 \u2502 \u251c\u2500\u2500 utils.js # Utility functions \u2502 \u2502 \u2514\u2500\u2500 components/ # Reusable components \u2502 \u251c\u2500\u2500 images/ # Image assets \u2502 \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2502 \u251c\u2500\u2500 icons/ \u2502 \u2502 \u2514\u2500\u2500 products/ \u2502 \u2514\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 api/ # Backend API files \u2502 \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 controllers/ # Request handlers \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u2514\u2500\u2500 middleware/ # Custom middleware \u251c\u2500\u2500 config/ # Application configuration \u2502 \u251c\u2500\u2500 database.php # Database settings \u2502 \u251c\u2500\u2500 app.js # App configuration \u2502 \u2514\u2500\u2500 environment.env # Environment variables \u251c\u2500\u2500 vendor/ # Third-party libraries \u251c\u2500\u2500 node_modules/ # NPM packages (excluded from upload) \u251c\u2500\u2500 package.json # Node.js dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 README.md # Project documentation","title":"Web Application Structure"},{"location":"code-management/formats/#framework-specific-structures","text":"React Application Structure: react-app/ \u251c\u2500\u2500 public/ \u2502 \u251c\u2500\u2500 index.html # HTML template \u2502 \u251c\u2500\u2500 favicon.ico # Site icon \u2502 \u2514\u2500\u2500 manifest.json # PWA manifest \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Reusable components \u2502 \u2502 \u251c\u2500\u2500 common/ # Shared components \u2502 \u2502 \u251c\u2500\u2500 layout/ # Layout components \u2502 \u2502 \u2514\u2500\u2500 ui/ # UI elements \u2502 \u251c\u2500\u2500 pages/ # Page components \u2502 \u2502 \u251c\u2500\u2500 Home.jsx \u2502 \u2502 \u251c\u2500\u2500 Products.jsx \u2502 \u2502 \u2514\u2500\u2500 Cart.jsx \u2502 \u251c\u2500\u2500 hooks/ # Custom React hooks \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u2502 \u251c\u2500\u2500 api.js # Base API client \u2502 \u2502 \u251c\u2500\u2500 products.js # Product API calls \u2502 \u2502 \u2514\u2500\u2500 auth.js # Authentication \u2502 \u251c\u2500\u2500 utils/ # Utility functions \u2502 \u251c\u2500\u2500 styles/ # Style files \u2502 \u251c\u2500\u2500 App.js # Main App component \u2502 \u2514\u2500\u2500 index.js # Entry point \u251c\u2500\u2500 build/ # Production build output \u251c\u2500\u2500 package.json \u2514\u2500\u2500 .env # Environment variables Vue.js Application Structure: vue-app/ \u251c\u2500\u2500 public/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Vue components \u2502 \u251c\u2500\u2500 views/ # Page views \u2502 \u251c\u2500\u2500 router/ # Vue Router config \u2502 \u251c\u2500\u2500 store/ # Vuex store \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u251c\u2500\u2500 App.vue # Root component \u2502 \u2514\u2500\u2500 main.js # Entry point \u251c\u2500\u2500 dist/ # Build output \u2514\u2500\u2500 package.json PHP Application Structure: php-app/ \u251c\u2500\u2500 public/ # Web-accessible directory \u2502 \u251c\u2500\u2500 index.php # Entry point \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u2514\u2500\u2500 .htaccess # Apache configuration \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 Controllers/ # Request controllers \u2502 \u251c\u2500\u2500 Models/ # Data models \u2502 \u251c\u2500\u2500 Services/ # Business logic \u2502 \u2514\u2500\u2500 Utils/ # Utility classes \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 database.php \u2502 \u2514\u2500\u2500 app.php \u251c\u2500\u2500 vendor/ # Composer dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 .env # Environment configuration","title":"Framework-Specific Structures"},{"location":"code-management/formats/#file-naming-conventions","text":"","title":"File Naming Conventions"},{"location":"code-management/formats/#general-rules","text":"File Naming Standards: - Use lowercase with hyphens: user-profile.js \u2705 - Avoid spaces and underscores: user_profile.js \u274c, user profile.js \u274c - Use descriptive names: product-card.component.js \u2705 - Include file purpose in name: auth.service.js , product.model.js - Keep names concise but meaningful: cart.js \u2705 vs shopping-cart-functionality.js \u274c","title":"General Rules"},{"location":"code-management/formats/#language-specific-naming","text":"JavaScript/TypeScript Files: // Components (PascalCase for classes/components) UserProfile.js ProductCard.jsx ShoppingCart.tsx // Services and utilities (camelCase) apiService.js dataUtils.js authHelper.ts // Configuration files (lowercase with hyphens) webpack-config.js babel-config.js eslint-config.js // Page/route files (lowercase with hyphens) home-page.js product-detail.js checkout-flow.js PHP Files: // Classes (PascalCase) UserController.php ProductModel.php DatabaseService.php // Functions and utilities (camelCase) helpers.php utilities.php functions.php // Configuration (lowercase) config.php database.php settings.php CSS/SCSS Files: // Main stylesheets main.css styles.scss variables.scss // Component styles (match component names) user-profile.css product-card.scss navigation.css // Layout styles layout.css grid-system.scss responsive.css","title":"Language-Specific Naming"},{"location":"code-management/formats/#directory-naming","text":"Directory Structure Rules: - Use lowercase with hyphens: user-management/ \u2705 - Be descriptive and specific: product-components/ \u2705 vs components/ \u274c - Group related functionality: auth-services/ , payment-utils/ - Use plural nouns for collections: components/ , services/ , models/ Examples: src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 ui-elements/ \u2502 \u251c\u2500\u2500 form-controls/ \u2502 \u2514\u2500\u2500 navigation/ \u251c\u2500\u2500 services/ \u2502 \u251c\u2500\u2500 api-clients/ \u2502 \u251c\u2500\u2500 data-processing/ \u2502 \u2514\u2500\u2500 third-party/ \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 string-helpers/ \u2502 \u251c\u2500\u2500 date-functions/ \u2502 \u2514\u2500\u2500 validation/ \u2514\u2500\u2500 assets/ \u251c\u2500\u2500 image-files/ \u251c\u2500\u2500 font-files/ \u2514\u2500\u2500 icon-sets/","title":"Directory Naming"},{"location":"code-management/formats/#configuration-files","text":"","title":"Configuration Files"},{"location":"code-management/formats/#environment-configuration","text":"Environment Variables (.env): # Application Settings APP_NAME=MyDevaitoApp APP_ENV=production APP_DEBUG=false APP_URL=https://myapp.devaito.com # Database Configuration DB_CONNECTION=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=myapp_db DB_USERNAME=db_user DB_PASSWORD=secure_password # Devaito API Configuration DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=11|your_bearer_token_here DEVAITO_APP_ID=your_app_id # Third-party Services STRIPE_PUBLIC_KEY=pk_live_your_stripe_key STRIPE_SECRET_KEY=sk_live_your_stripe_secret PAYPAL_CLIENT_ID=your_paypal_client_id # Email Configuration MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=587 MAIL_USERNAME=your-email@gmail.com MAIL_PASSWORD=your_app_password # Cache Settings CACHE_DRIVER=redis REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 # File Storage FILESYSTEM_DISK=local AWS_ACCESS_KEY_ID=your_aws_key AWS_SECRET_ACCESS_KEY=your_aws_secret AWS_DEFAULT_REGION=us-east-1 AWS_BUCKET=your_s3_bucket","title":"Environment Configuration"},{"location":"code-management/formats/#package-configuration","text":"package.json Structure: { \"name\": \"my-devaito-app\", \"version\": \"1.0.0\", \"description\": \"E-commerce application built with Devaito APIs\", \"main\": \"index.js\", \"keywords\": [\"ecommerce\", \"devaito\", \"api\"], \"author\": { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" }, \"license\": \"MIT\", \"engines\": { \"node\": \">=16.0.0\", \"npm\": \">=8.0.0\" }, \"scripts\": { \"start\": \"node server.js\", \"dev\": \"nodemon server.js\", \"build\": \"webpack --mode=production\", \"test\": \"jest\", \"lint\": \"eslint src/\", \"format\": \"prettier --write src/\" }, \"dependencies\": { \"axios\": \"^1.6.0\", \"express\": \"^4.18.0\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.0.0\" }, \"devDependencies\": { \"eslint\": \"^8.50.0\", \"prettier\": \"^3.0.0\", \"jest\": \"^29.0.0\", \"nodemon\": \"^3.0.0\" }, \"devaito\": { \"app_id\": \"your_app_id\", \"api_version\": \"v1\", \"build_command\": \"npm run build\", \"start_command\": \"npm start\" } } composer.json Structure (PHP): { \"name\": \"yourname/devaito-app\", \"description\": \"PHP application using Devaito APIs\", \"type\": \"project\", \"keywords\": [\"php\", \"ecommerce\", \"devaito\"], \"license\": \"MIT\", \"authors\": [ { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" } ], \"minimum-stability\": \"stable\", \"require\": { \"php\": \"^8.0\", \"guzzlehttp/guzzle\": \"^7.0\", \"vlucas/phpdotenv\": \"^5.0\", \"monolog/monolog\": \"^3.0\" }, \"require-dev\": { \"phpunit/phpunit\": \"^10.0\", \"phpstan/phpstan\": \"^1.0\", \"squizlabs/php_codesniffer\": \"^3.0\" }, \"autoload\": { \"psr-4\": { \"App\\\\\": \"src/\" } }, \"autoload-dev\": { \"psr-4\": { \"Tests\\\\\": \"tests/\" } }, \"scripts\": { \"test\": \"phpunit\", \"lint\": \"phpcs src/\", \"analyze\": \"phpstan analyse src/\" } }","title":"Package Configuration"},{"location":"code-management/formats/#code-quality-standards","text":"","title":"Code Quality Standards"},{"location":"code-management/formats/#javascripttypescript-standards","text":"Modern JavaScript Practices: // Use const/let instead of var const API_BASE_URL = 'https://svelte.devaito.com'; let currentUser = null; // Arrow functions for callbacks const fetchProducts = async (category) => { try { const response = await fetch(`${API_BASE_URL}/products?category=${category}`); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.json(); } catch (error) { console.error('Failed to fetch products:', error); throw error; } }; // Destructuring for cleaner code const { products, categories, total } = await fetchCatalogData(); // Template literals for strings const productUrl = `${API_BASE_URL}/products/${productSlug}`; // Async/await instead of promises const loadUserData = async (userId) => { const user = await fetchUser(userId); const orders = await fetchUserOrders(userId); return { user, orders }; }; // Object shorthand const createProductData = (name, price, category) => ({ name, price, category, createdAt: new Date().toISOString() }); // Default parameters const formatPrice = (price, currency = 'USD', locale = 'en-US') => { return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(price); }; TypeScript Best Practices: // Interface definitions interface Product { id: string; name: string; price: number; category: string; slug: string; images: string[]; inStock: boolean; createdAt: Date; } interface ApiResponse<T> { success: boolean; data: T; message?: string; errors?: string[]; } // Generic functions async function apiCall<T>(endpoint: string): Promise<ApiResponse<T>> { const response = await fetch(`${API_BASE_URL}${endpoint}`, { headers: { 'Authorization': `Bearer ${process.env.DEVAITO_API_TOKEN}`, 'Content-Type': 'application/json' } }); return response.json(); } // Type guards function isProduct(obj: any): obj is Product { return obj && typeof obj.id === 'string' && typeof obj.name === 'string' && typeof obj.price === 'number'; } // Enum usage enum OrderStatus { PENDING = 'pending', PROCESSING = 'processing', SHIPPED = 'shipped', DELIVERED = 'delivered', CANCELLED = 'cancelled' }","title":"JavaScript/TypeScript Standards"},{"location":"code-management/formats/#php-standards-psr-compliance","text":"PSR-4 Autoloading Structure: <?php // src/Controllers/ProductController.php namespace App\\Controllers; use App\\Services\\ProductService; use App\\Models\\Product; use Exception; class ProductController { private ProductService $productService; public function __construct(ProductService $productService) { $this->productService = $productService; } public function getProducts(array $filters = []): array { try { $products = $this->productService->getFilteredProducts($filters); return [ 'success' => true, 'data' => $products, 'count' => count($products) ]; } catch (Exception $e) { error_log(\"Product fetch error: \" . $e->getMessage()); return [ 'success' => false, 'error' => 'Failed to fetch products', 'message' => $e->getMessage() ]; } } public function getProduct(string $slug): array { if (empty($slug)) { return [ 'success' => false, 'error' => 'Product slug is required' ]; } $product = $this->productService->getBySlug($slug); if (!$product) { return [ 'success' => false, 'error' => 'Product not found' ]; } return [ 'success' => true, 'data' => $product ]; } } Model Structure: <?php // src/Models/Product.php namespace App\\Models; use DateTime; class Product { private string $id; private string $name; private float $price; private string $category; private string $slug; private array $images; private bool $inStock; private DateTime $createdAt; public function __construct(array $data) { $this->id = $data['id'] ?? ''; $this->name = $data['name'] ?? ''; $this->price = (float)($data['price'] ?? 0); $this->category = $data['category'] ?? ''; $this->slug = $data['slug'] ?? ''; $this->images = $data['images'] ?? []; $this->inStock = (bool)($data['in_stock'] ?? false); $this->createdAt = new DateTime($data['created_at'] ?? 'now'); } // Getters public function getId(): string { return $this->id; } public function getName(): string { return $this->name; } public function getPrice(): float { return $this->price; } public function getFormattedPrice(string $currency = 'USD'): string { return number_format($this->price, 2) . ' ' . $currency; } // Validation public function isValid(): bool { return !empty($this->id) && !empty($this->name) && $this->price > 0 && !empty($this->slug); } // Serialization public function toArray(): array { return [ 'id' => $this->id, 'name' => $this->name, 'price' => $this->price, 'category' => $this->category, 'slug' => $this->slug, 'images' => $this->images, 'in_stock' => $this->inStock, 'created_at' => $this->createdAt->format('c') ]; } }","title":"PHP Standards (PSR Compliance)"},{"location":"code-management/formats/#cssscss-standards","text":"CSS Architecture: /* Base styles - variables and resets */ :root { --primary-color: #3498db; --secondary-color: #2ecc71; --danger-color: #e74c3c; --warning-color: #f39c12; --text-color: #2c3e50; --background-color: #ffffff; --border-color: #ecf0f1; --font-family-primary: 'Inter', sans-serif; --font-family-secondary: 'Georgia', serif; --spacing-xs: 0.25rem; --spacing-sm: 0.5rem; --spacing-md: 1rem; --spacing-lg: 1.5rem; --spacing-xl: 2rem; --border-radius: 0.375rem; --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); } /* Component-based structure */ .product-card { display: flex; flex-direction: column; background: var(--background-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: var(--box-shadow); padding: var(--spacing-md); transition: transform 0.2s ease, box-shadow 0.2s ease; } .product-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); } .product-card__image { width: 100%; height: 200px; object-fit: cover; border-radius: var(--border-radius); margin-bottom: var(--spacing-sm); } .product-card__title { font-family: var(--font-family-primary); font-size: 1.125rem; font-weight: 600; color: var(--text-color); margin-bottom: var(--spacing-xs); line-height: 1.4; } .product-card__price { font-size: 1.25rem; font-weight: 700; color: var(--primary-color); margin-bottom: var(--spacing-md); } /* Responsive design */ @media (max-width: 768px) { .product-card { padding: var(--spacing-sm); } .product-card__image { height: 150px; } } SCSS Structure: // _variables.scss $primary-color: #3498db; $secondary-color: #2ecc71; $text-color: #2c3e50; $breakpoints: ( 'mobile': 480px, 'tablet': 768px, 'desktop': 1024px, 'wide': 1200px ); // _mixins.scss @mixin respond-to($breakpoint) { @if map-has-key($breakpoints, $breakpoint) { @media (min-width: map-get($breakpoints, $breakpoint)) { @content; } } } @mixin button-style($bg-color: $primary-color, $text-color: white) { background-color: $bg-color; color: $text-color; border: none; padding: 0.75rem 1.5rem; border-radius: 0.375rem; cursor: pointer; transition: all 0.2s ease; &:hover { background-color: darken($bg-color, 10%); transform: translateY(-1px); } } // main.scss @import 'variables'; @import 'mixins'; .btn-primary { @include button-style($primary-color, white); } .product-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; @include respond-to('tablet') { grid-template-columns: repeat(2, 1fr); } @include respond-to('desktop') { grid-template-columns: repeat(3, 1fr); } }","title":"CSS/SCSS Standards"},{"location":"code-management/formats/#api-integration-standards","text":"","title":"API Integration Standards"},{"location":"code-management/formats/#devaito-api-client-structure","text":"Base API Client: // services/api.js class DevaitoAPI { constructor() { this.baseURL = process.env.DEVAITO_API_URL || 'https://svelte.devaito.com'; this.token = process.env.DEVAITO_API_TOKEN; this.timeout = 30000; // 30 seconds } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const config = { timeout: this.timeout, headers: { 'Content-Type': 'application/json', ...options.headers }, ...options }; // Add authentication header if token is available if (this.token && !options.skipAuth) { config.headers.Authorization = `Bearer ${this.token}`; } try { const response = await fetch(url, config); if (!response.ok) { throw new APIError(response.status, response.statusText); } const contentType = response.headers.get('content-type'); if (contentType && contentType.includes('application/json')) { return await response.json(); } return await response.text(); } catch (error) { if (error instanceof APIError) { throw error; } throw new APIError(0, 'Network error', error.message); } } // GET request async get(endpoint, params = {}) { const queryString = new URLSearchParams(params).toString(); const url = queryString ? `${endpoint}?${queryString}` : endpoint; return this.request(url, { method: 'GET' }); } // POST request async post(endpoint, data = {}) { return this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); } // PUT request async put(endpoint, data = {}) { return this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); } // DELETE request async delete(endpoint) { return this.request(endpoint, { method: 'DELETE' }); } } // Custom error class class APIError extends Error { constructor(status, statusText, details = null) { super(`API Error ${status}: ${statusText}`); this.status = status; this.statusText = statusText; this.details = details; this.name = 'APIError'; } } export default new DevaitoAPI(); Service-Specific Clients: // services/products.js import api from './api.js'; export const productService = { // Get all products with optional filters async getProducts(filters = {}) { const params = { category: filters.category, min_price: filters.minPrice, max_price: filters.maxPrice, search: filters.search, page: filters.page || 1, limit: filters.limit || 20 }; // Remove undefined values Object.keys(params).forEach(key => { if (params[key] === undefined) delete params[key]; }); return api.get('/products', params); }, // Get single product by slug async getProduct(slug) { if (!slug) { throw new Error('Product slug is required'); } return api.get(`/products/${slug}`); }, // Get product reviews async getProductReviews(slug, page = 1) { return api.get(`/products/${slug}/reviews`, { page }); }, // Add product review (requires authentication) async addReview(slug, reviewData) { const { rating, comment, title } = reviewData; if (!rating || rating < 1 || rating > 5) { throw new Error('Rating must be between 1 and 5'); } return api.post(`/products/${slug}/reviews`, { rating, comment, title }); } }; // services/cart.js export const cartService = { // Get cart contents async getCart() { return api.get('/cart'); }, // Add item to cart async addToCart(productId, quantity = 1, variant = null) { return api.post('/cart', { product_id: productId, quantity, variant }); }, // Update cart item quantity async updateCartItem(itemId, quantity) { return api.put(`/cart/${itemId}`, { quantity }); }, // Remove item from cart async removeFromCart(itemId) { return api.delete(`/cart/${itemId}`); }, // Clear entire cart async clearCart() { return api.delete('/cart'); } };","title":"Devaito API Client Structure"},{"location":"code-management/formats/#error-handling-standards","text":"Centralized Error Handler: // utils/error-handler.js export class ErrorHandler { static handle(error, context = '') { console.group(`\ud83d\udea8 Error in ${context || 'Application'}`); console.error('Error:', error.message); if (error instanceof APIError) { console.error('Status:', error.status); console.error('Details:', error.details); // Handle specific API errors switch (error.status) { case 401: this.handleUnauthorized(); break; case 429: this.handleRateLimit(); break; case 500: this.handleServerError(); break; } } console.error('Stack:', error.stack); console.groupEnd(); // Report to monitoring service this.reportError(error, context); } static handleUnauthorized() { // Clear stored tokens localStorage.removeItem('auth_token'); // Redirect to login window.location.href = '/login'; } static handleRateLimit() { // Show rate limit message this.showUserMessage('Too many requests. Please try again later.', 'warning'); } static handleServerError() { // Show generic error message this.showUserMessage('Server error. Please try again.', 'error'); } static showUserMessage(message, type = 'info') { // Implementation depends on your UI framework console.log(`${type.toUpperCase()}: ${message}`); } static reportError(error, context) { // Send error to monitoring service if (typeof window !== 'undefined' && window.analytics) { window.analytics.track('Error Occurred', { error: error.message, context, stack: error.stack, timestamp: new Date().toISOString() }); } } } // Usage in components try { const products = await productService.getProducts(); setProducts(products.data); } catch (error) { ErrorHandler.handle(error, 'ProductList Component'); }","title":"Error Handling Standards"},{"location":"code-management/formats/#documentation-standards","text":"","title":"Documentation Standards"},{"location":"code-management/formats/#code-documentation","text":"JSDoc Comments: /** * Fetches products from the Devaito API with optional filtering * @param {Object} filters - Filter options for products * @param {string} [filters.category] - Product category slug * @param {number} [filters.minPrice] - Minimum price filter * @param {number} [filters.maxPrice] - Maximum price filter * @param {string} [filters.search] - Search query * @param {number} [filters.page=1] - Page number for pagination * @param {number} [filters.limit=20] - Number of items per page * @returns {Promise<Object>} API response with products array * @throws {APIError} When API request fails * @example * // Get all products * const products = await getProducts(); * * // Get products with filters * const filteredProducts = await getProducts({ * category: 'electronics', * minPrice: 100, * maxPrice: 500 * }); */ async function getProducts(filters = {}) { // Implementation here } README.md Template: # Project Name Brief description of your Devaito-powered application. ## Features - \ud83d\udecd\ufe0f Product catalog integration - \ud83d\uded2 Shopping cart functionality - \ud83d\udc64 User authentication - \ud83d\udcb3 Payment processing - \ud83d\udcf1 Responsive design ## Prerequisites - Node.js 16+ or PHP 8+ - Devaito API token - Modern web browser ## Installation ```bash # Clone repository git clone https://github.com/yourusername/your-app.git cd your-app # Install dependencies npm install # or composer install # Configure environment cp .env.example .env # Edit .env with your API keys","title":"Code Documentation"},{"location":"code-management/formats/#configuration","text":"Add your Devaito API credentials to .env : DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=your_bearer_token_here DEVAITO_APP_ID=your_app_id","title":"Configuration"},{"location":"code-management/formats/#usage","text":"# Development npm run dev # Production build npm run build npm start","title":"Usage"},{"location":"code-management/formats/#api-integration","text":"This application uses the following Devaito APIs: Products API : Product catalog and details Cart API : Shopping cart management Authentication API : User login/signup Payment Methods API : Available payment options","title":"API Integration"},{"location":"code-management/formats/#contributing","text":"Fork the repository Create feature branch ( git checkout -b feature/amazing-feature ) Commit changes ( git commit -m 'Add amazing feature' ) Push to branch ( git push origin feature/amazing-feature ) Open a Pull Request","title":"Contributing"},{"location":"code-management/formats/#license","text":"This project is licensed under the MIT License - see LICENSE file. ``` Following these code formats and conventions ensures your Devaito applications are maintainable, scalable, and integrate seamlessly with the platform's APIs and deployment system.","title":"License"},{"location":"code-management/upload/","text":"Upload Methods Overview Devaito v2.0 provides multiple flexible methods for uploading and managing your application code. Whether you're working on a simple website, a complex e-commerce application, or integrating with existing development workflows, we have upload options that fit your needs. Key Features: - Multiple upload methods to suit different workflows - Automatic validation and preprocessing - Version control integration - Real-time deployment capabilities - Secure file transfer protocols Method Comparison Method Best For Skill Level Features Web Interface Quick uploads, small projects Beginner Drag & drop, visual feedback Git Integration Team projects, CI/CD Intermediate Auto-deployment, version control API Upload Automated workflows, scripts Advanced Programmable, batch uploads FTP/SFTP Large files, legacy workflows Intermediate Direct file access, bulk transfer CLI Tool Developer workflows, automation Advanced Command-line integration, scripting 1. Web Interface Upload The web interface provides the most user-friendly way to upload your code with visual feedback and progress tracking. Getting Started Navigate to Upload Section Dashboard \u2192 Your Application \u2192 Code Management \u2192 Upload Choose Upload Method Single file upload Multiple file selection Folder upload (Chrome/Edge) Archive upload (.zip, .tar.gz, .rar) Single File Upload Step-by-step Process: 1. Click \"Choose File\" or drag file to upload area 2. Select your file from the file browser 3. File validation occurs automatically 4. Click \"Upload\" to begin transfer 5. Monitor progress bar for completion status Example Usage: <!-- Simple HTML file upload --> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My Devaito App</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <h1>Welcome to My App</h1> <script src=\"app.js\"></script> </body> </html> Folder Upload Browser Support: - Chrome 21+ \u2705 - Firefox 50+ \u2705 - Safari 14+ \u2705 - Edge 79+ \u2705 How to Upload Folders: 1. Drag entire project folder to upload area 2. Or click \"Upload Folder\" and select project directory 3. Review file structure preview 4. Confirm upload to proceed Project Structure Example: my-ecommerce-app/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 css/ \u2502 \u2502 \u251c\u2500\u2500 main.css \u2502 \u2502 \u2514\u2500\u2500 responsive.css \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u251c\u2500\u2500 app.js \u2502 \u2502 \u251c\u2500\u2500 cart.js \u2502 \u2502 \u2514\u2500\u2500 products.js \u2502 \u2514\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2514\u2500\u2500 products/ \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 auth.php \u2502 \u251c\u2500\u2500 products.php \u2502 \u2514\u2500\u2500 cart.php \u2514\u2500\u2500 config/ \u251c\u2500\u2500 database.php \u2514\u2500\u2500 settings.php Archive Upload Supported Formats: - .zip (recommended) - .tar.gz - .tar.bz2 - .rar - .7z Best Practices: - Compress your project at the root level - Exclude unnecessary files (.git, node_modules, .DS_Store) - Keep archive size under 500MB - Use descriptive archive names Creating a Clean Archive: # Create a clean zip file zip -r my-app.zip . -x \"*.git*\" \"node_modules/*\" \".DS_Store\" \"*.log\" # Or use tar tar -czf my-app.tar.gz --exclude='.git' --exclude='node_modules' . Upload Limitations File Size Limits: - Single file: 100MB maximum - Archive file: 500MB maximum - Total project size: 2GB maximum - Individual image: 50MB maximum File Type Restrictions: // Allowed file extensions const allowedExtensions = [ // Web files '.html', '.htm', '.css', '.js', '.jsx', '.ts', '.tsx', '.vue', '.svelte', '.scss', '.sass', '.less', // Backend files '.php', '.py', '.rb', '.go', '.java', '.cs', '.cpp', '.c', '.h', '.hpp', // Configuration '.json', '.xml', '.yml', '.yaml', '.env', '.ini', '.conf', '.config', // Assets '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2', '.ttf', '.eot', '.mp4', '.mp3', // Documentation '.md', '.txt', '.pdf' ]; 2. Git Integration Git integration provides seamless deployment from your version control repositories with automatic updates and collaboration features. GitHub Integration Initial Setup: 1. Go to Application Settings \u2192 Git Integration 2. Click \"Connect GitHub Account\" 3. Authorize Devaito application access 4. Select repository and branch 5. Configure deployment settings Repository Configuration: # .devaito.yml configuration file version: \"1.0\" build: commands: - npm install - npm run build output_directory: \"dist\" deploy: branch: \"main\" auto_deploy: true exclude: - \"node_modules\" - \".git\" - \"tests\" - \"*.log\" Webhook Setup: // GitHub webhook payload example { \"ref\": \"refs/heads/main\", \"repository\": { \"name\": \"my-ecommerce-app\", \"full_name\": \"username/my-ecommerce-app\" }, \"commits\": [ { \"id\": \"abc123\", \"message\": \"Add new product features\", \"author\": { \"name\": \"Developer Name\", \"email\": \"developer@example.com\" } } ] } GitLab Integration Setup Process: # 1. Generate GitLab access token # Go to GitLab \u2192 User Settings \u2192 Access Tokens # Create token with 'api' and 'read_repository' scopes # 2. Configure in Devaito # Settings \u2192 Git Integration \u2192 GitLab # Enter repository URL: https://gitlab.com/username/project.git # Add access token GitLab CI Integration: # .gitlab-ci.yml stages: - build - deploy build: stage: build script: - npm install - npm run build artifacts: paths: - dist/ deploy_to_devaito: stage: deploy script: - curl -X POST \"https://svelte.devaito.com/api/deploy\" -H \"Authorization: Bearer $DEVAITO_TOKEN\" -F \"project_id=$PROJECT_ID\" -F \"archive=@dist.zip\" only: - main Bitbucket Integration Configuration Steps: 1. Create App Password in Bitbucket settings 2. Add repository credentials in Devaito 3. Configure branch and deployment rules 4. Set up automatic deployment triggers Private Repository Access SSH Key Setup: # Generate SSH key pair ssh-keygen -t rsa -b 4096 -C \"devaito-deploy\" # Add public key to your Git provider # Add private key to Devaito dashboard HTTPS with Personal Access Token: # Clone with token git clone https://username:token@github.com/username/repository.git # Configure in Devaito Repository URL: https://github.com/username/repository.git Username: your-username Password/Token: your-personal-access-token Branch Management Multi-branch Deployment: // Branch configuration const branchConfig = { \"main\": { \"environment\": \"production\", \"auto_deploy\": true, \"domain\": \"myapp.devaito.com\" }, \"staging\": { \"environment\": \"staging\", \"auto_deploy\": true, \"domain\": \"myapp-staging.devaito.com\" }, \"development\": { \"environment\": \"dev\", \"auto_deploy\": false, \"domain\": \"myapp-dev.devaito.com\" } }; 3. API Upload The API upload method enables programmatic file uploads and automated deployment workflows. Authentication API Token Generation: # Generate API token in dashboard Dashboard \u2192 Settings \u2192 API Keys \u2192 Generate New Token # Token format Bearer 11|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Basic API Upload cURL Example: # Upload single file curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -H \"Content-Type: multipart/form-data\" \\ -F \"file=@index.html\" \\ -F \"application_id=your-app-id\" \\ -F \"path=/public/index.html\" # Upload archive curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"file=@project.zip\" \\ -F \"application_id=your-app-id\" \\ -F \"extract=true\" Response Format: { \"success\": true, \"message\": \"File uploaded successfully\", \"data\": { \"file_id\": \"file_abc123\", \"filename\": \"index.html\", \"size\": 2048, \"path\": \"/public/index.html\", \"uploaded_at\": \"2025-01-15T10:30:00Z\" } } Programming Language Examples Python Upload Script: import requests import os from pathlib import Path class DevaitoUploader: def __init__(self, api_token, app_id): self.api_token = api_token self.app_id = app_id self.base_url = \"https://svelte.devaito.com/api/v1\" self.headers = { \"Authorization\": f\"Bearer {api_token}\" } def upload_file(self, file_path, remote_path=None): \"\"\"Upload a single file\"\"\" if not os.path.exists(file_path): raise FileNotFoundError(f\"File not found: {file_path}\") with open(file_path, 'rb') as file: files = {'file': file} data = { 'application_id': self.app_id, 'path': remote_path or f\"/{os.path.basename(file_path)}\" } response = requests.post( f\"{self.base_url}/upload\", headers=self.headers, files=files, data=data ) return response.json() def upload_directory(self, directory_path, exclude_patterns=None): \"\"\"Upload entire directory\"\"\" exclude_patterns = exclude_patterns or ['.git', 'node_modules', '.DS_Store'] results = [] for root, dirs, files in os.walk(directory_path): # Filter out excluded directories dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)] for file in files: if any(pattern in file for pattern in exclude_patterns): continue file_path = os.path.join(root, file) relative_path = os.path.relpath(file_path, directory_path) try: result = self.upload_file(file_path, f\"/{relative_path}\") results.append(result) print(f\"Uploaded: {relative_path}\") except Exception as e: print(f\"Failed to upload {relative_path}: {e}\") return results # Usage example uploader = DevaitoUploader(\"your-api-token\", \"your-app-id\") uploader.upload_directory(\"./my-project\") Node.js Upload Script: const axios = require('axios'); const FormData = require('form-data'); const fs = require('fs'); const path = require('path'); class DevaitoUploader { constructor(apiToken, appId) { this.apiToken = apiToken; this.appId = appId; this.baseURL = 'https://svelte.devaito.com/api/v1'; this.headers = { 'Authorization': `Bearer ${apiToken}` }; } async uploadFile(filePath, remotePath = null) { const form = new FormData(); form.append('file', fs.createReadStream(filePath)); form.append('application_id', this.appId); form.append('path', remotePath || `/${path.basename(filePath)}`); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Upload failed: ${error.response?.data?.message || error.message}`); } } async uploadArchive(archivePath) { const form = new FormData(); form.append('file', fs.createReadStream(archivePath)); form.append('application_id', this.appId); form.append('extract', 'true'); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Archive upload failed: ${error.response?.data?.message || error.message}`); } } } // Usage const uploader = new DevaitoUploader('your-api-token', 'your-app-id'); // Upload single file uploader.uploadFile('./index.html') .then(result => console.log('Upload successful:', result)) .catch(error => console.error('Upload failed:', error)); Batch Upload API Multiple File Upload: curl -X POST \"https://svelte.devaito.com/api/v1/upload/batch\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"files[]=@file1.html\" \\ -F \"files[]=@file2.css\" \\ -F \"files[]=@file3.js\" \\ -F \"application_id=your-app-id\" Response: { \"success\": true, \"message\": \"Batch upload completed\", \"data\": { \"uploaded\": 2, \"failed\": 1, \"results\": [ { \"file\": \"file1.html\", \"success\": true, \"file_id\": \"file_123\" }, { \"file\": \"file2.css\", \"success\": true, \"file_id\": \"file_124\" }, { \"file\": \"file3.js\", \"success\": false, \"error\": \"File type not supported\" } ] } } 4. FTP/SFTP Upload FTP/SFTP provides direct file system access for bulk transfers and integration with existing workflows. SFTP Configuration Connection Details: Host: sftp.devaito.com Port: 2022 Protocol: SFTP (SSH File Transfer Protocol) Username: [Generated per application] Password: [Generated per application] Root Directory: /home/[app-id]/ Obtaining Credentials: 1. Navigate to Application Settings \u2192 FTP Access 2. Click \"Generate SFTP Credentials\" 3. Save credentials securely 4. Test connection using provided details Command Line SFTP Basic Connection: # Connect to SFTP server sftp -P 2022 your-app-username@sftp.devaito.com # Navigate and upload cd /public put index.html put -r assets/ ls -la quit Batch Upload Script: #!/bin/bash # upload_to_devaito.sh SFTP_HOST=\"sftp.devaito.com\" SFTP_PORT=\"2022\" SFTP_USER=\"your-app-username\" SFTP_PASS=\"your-app-password\" LOCAL_DIR=\"./build\" REMOTE_DIR=\"/public\" # Create batch command file cat > sftp_commands.txt << EOF cd $REMOTE_DIR lcd $LOCAL_DIR put -r * quit EOF # Execute SFTP commands sshpass -p \"$SFTP_PASS\" sftp -P $SFTP_PORT -b sftp_commands.txt $SFTP_USER@$SFTP_HOST # Cleanup rm sftp_commands.txt echo \"Upload completed successfully!\" GUI FTP Clients FileZilla Configuration: Protocol: SFTP - SSH File Transfer Protocol Host: sftp.devaito.com Port: 2022 Logon Type: Normal User: your-app-username Password: your-generated-password WinSCP Configuration (Windows): File protocol: SFTP Host name: sftp.devaito.com Port number: 2022 User name: your-app-username Password: your-generated-password Cyberduck Configuration (Mac): Connection: SFTP (SSH File Transfer Protocol) Server: sftp.devaito.com Port: 2022 Username: your-app-username Password: your-generated-password Directory Structure SFTP Directory Layout: /home/your-app-id/ \u251c\u2500\u2500 public/ # Web-accessible files \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 assets/ \u2502 \u2514\u2500\u2500 api/ \u251c\u2500\u2500 private/ # Private files (configs, logs) \u251c\u2500\u2500 logs/ # Application logs \u251c\u2500\u2500 backups/ # Automatic backups \u2514\u2500\u2500 temp/ # Temporary files File Permissions: - Public files: 644 (readable by web server) - Directories: 755 (executable/searchable) - Scripts: 755 (if executable) - Private files: 600 (owner only) 5. CLI Tool Upload The Devaito CLI provides powerful command-line tools for developers who prefer terminal-based workflows. Installation NPM Installation: # Install globally npm install -g @devaito/cli # Or install locally in project npm install --save-dev @devaito/cli Python Installation: # Using pip pip install devaito-cli # Using pipx (recommended) pipx install devaito-cli Manual Installation: # Download binary (Linux/Mac) curl -L https://releases.devaito.com/cli/latest/devaito-linux -o /usr/local/bin/devaito chmod +x /usr/local/bin/devaito # Windows PowerShell Invoke-WebRequest -Uri \"https://releases.devaito.com/cli/latest/devaito-windows.exe\" -OutFile \"devaito.exe\" Initial Setup Authentication: # Login with credentials devaito login # Or use API token devaito auth --token \"your-api-token\" # Verify authentication devaito whoami Project Initialization: # Initialize in existing project cd your-project devaito init # Create new project devaito create my-new-app cd my-new-app Basic Commands Upload Commands: # Upload current directory devaito upload # Upload specific files devaito upload index.html styles.css # Upload with environment specification devaito upload --env production # Upload and deploy immediately devaito upload --deploy # Upload with exclusions devaito upload --exclude \"node_modules,*.log,.git\" Advanced Upload Options: # Upload with progress bar devaito upload --progress # Upload with verification devaito upload --verify # Dry run (show what would be uploaded) devaito upload --dry-run # Upload compressed devaito upload --compress # Upload with custom remote path devaito upload --path \"/custom/path\" file.html Configuration File devaito.config.js: module.exports = { // Application configuration app: { id: 'your-app-id', name: 'My Devaito App', environment: 'production' }, // Upload configuration upload: { exclude: [ 'node_modules/**', '.git/**', '*.log', '.DS_Store', 'tests/**' ], include: [ 'public/**', 'api/**', 'index.html', 'package.json' ], compress: true, verify: true }, // Build configuration build: { command: 'npm run build', outputDir: 'dist', beforeUpload: [ 'npm install', 'npm run test' ] }, // Deployment configuration deploy: { beforeDeploy: ['npm run build'], afterDeploy: ['npm run cleanup'] } }; Watch Mode Auto-upload on Changes: # Watch current directory devaito watch # Watch specific files/directories devaito watch src/ public/ # Watch with custom ignore patterns devaito watch --ignore \"*.tmp,*.log\" # Watch with debounce (wait 2 seconds after changes) devaito watch --debounce 2000 Scripting and Automation GitHub Actions Integration: name: Deploy to Devaito on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '16' - name: Install dependencies run: npm install - name: Build project run: npm run build - name: Install Devaito CLI run: npm install -g @devaito/cli - name: Deploy to Devaito env: DEVAITO_TOKEN: ${{ secrets.DEVAITO_TOKEN }} run: | devaito auth --token $DEVAITO_TOKEN devaito upload --deploy Jenkins Pipeline: pipeline { agent any environment { DEVAITO_TOKEN = credentials('devaito-token') } stages { stage('Build') { steps { sh 'npm install' sh 'npm run build' } } stage('Deploy') { steps { sh 'npm install -g @devaito/cli' sh 'devaito auth --token $DEVAITO_TOKEN' sh 'devaito upload --deploy' } } } } Upload Monitoring & Logs Real-time Progress Web Interface Monitoring: - Real-time progress bars - File-by-file status updates - Error notifications with details - Upload speed and ETA display CLI Progress Monitoring: # Verbose output devaito upload --verbose # Progress with file details devaito upload --progress --details # JSON output for parsing devaito upload --output json Upload Logs Accessing Upload History: # View recent uploads devaito logs upload --limit 10 # View specific upload details devaito logs upload --id upload_abc123 # Filter by date devaito logs upload --since \"2025-01-01\" # Export logs devaito logs upload --export logs.json Log Format: { \"upload_id\": \"upload_abc123\", \"timestamp\": \"2025-01-15T10:30:00Z\", \"method\": \"web_interface\", \"status\": \"completed\", \"files_uploaded\": 15, \"files_failed\": 0, \"total_size\": \"2.3MB\", \"duration\": \"45s\", \"errors\": [] } Troubleshooting Common Issues Connection Problems Issue: Cannot connect to upload server # Test connectivity curl -I https://svelte.devaito.com # Check DNS resolution nslookup svelte.devaito.com # Test SFTP connection telnet sftp.devaito.com 2022 Authentication Errors Issue: Invalid API token # Verify token format echo \"Bearer 11|your-token-here\" # Test token validity curl -H \"Authorization: Bearer YOUR_TOKEN\" \\ https://svelte.devaito.com/api/v1/user # Regenerate token if needed # Dashboard \u2192 Settings \u2192 API Keys \u2192 Regenerate File Upload Failures Issue: File too large - Solution: Compress files or split large uploads - Use archive format for multiple files - Consider SFTP for very large files Issue: Invalid file type - Check allowed extensions list - Rename files if necessary - Use generic extensions (.txt for text files) Performance Issues Slow Upload Speeds: # Test upload speed devaito upload --test-speed # Use compression devaito upload --compress # Upload during off-peak hours # Use multiple parallel connections (SFTP) For additional support, contact our technical team or check the FAQ section.","title":"Upload Methods"},{"location":"code-management/upload/#upload-methods","text":"","title":"Upload Methods"},{"location":"code-management/upload/#overview","text":"Devaito v2.0 provides multiple flexible methods for uploading and managing your application code. Whether you're working on a simple website, a complex e-commerce application, or integrating with existing development workflows, we have upload options that fit your needs. Key Features: - Multiple upload methods to suit different workflows - Automatic validation and preprocessing - Version control integration - Real-time deployment capabilities - Secure file transfer protocols","title":"Overview"},{"location":"code-management/upload/#method-comparison","text":"Method Best For Skill Level Features Web Interface Quick uploads, small projects Beginner Drag & drop, visual feedback Git Integration Team projects, CI/CD Intermediate Auto-deployment, version control API Upload Automated workflows, scripts Advanced Programmable, batch uploads FTP/SFTP Large files, legacy workflows Intermediate Direct file access, bulk transfer CLI Tool Developer workflows, automation Advanced Command-line integration, scripting","title":"Method Comparison"},{"location":"code-management/upload/#1-web-interface-upload","text":"The web interface provides the most user-friendly way to upload your code with visual feedback and progress tracking.","title":"1. Web Interface Upload"},{"location":"code-management/upload/#getting-started","text":"Navigate to Upload Section Dashboard \u2192 Your Application \u2192 Code Management \u2192 Upload Choose Upload Method Single file upload Multiple file selection Folder upload (Chrome/Edge) Archive upload (.zip, .tar.gz, .rar)","title":"Getting Started"},{"location":"code-management/upload/#single-file-upload","text":"Step-by-step Process: 1. Click \"Choose File\" or drag file to upload area 2. Select your file from the file browser 3. File validation occurs automatically 4. Click \"Upload\" to begin transfer 5. Monitor progress bar for completion status Example Usage: <!-- Simple HTML file upload --> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My Devaito App</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <h1>Welcome to My App</h1> <script src=\"app.js\"></script> </body> </html>","title":"Single File Upload"},{"location":"code-management/upload/#folder-upload","text":"Browser Support: - Chrome 21+ \u2705 - Firefox 50+ \u2705 - Safari 14+ \u2705 - Edge 79+ \u2705 How to Upload Folders: 1. Drag entire project folder to upload area 2. Or click \"Upload Folder\" and select project directory 3. Review file structure preview 4. Confirm upload to proceed Project Structure Example: my-ecommerce-app/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 css/ \u2502 \u2502 \u251c\u2500\u2500 main.css \u2502 \u2502 \u2514\u2500\u2500 responsive.css \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u251c\u2500\u2500 app.js \u2502 \u2502 \u251c\u2500\u2500 cart.js \u2502 \u2502 \u2514\u2500\u2500 products.js \u2502 \u2514\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2514\u2500\u2500 products/ \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 auth.php \u2502 \u251c\u2500\u2500 products.php \u2502 \u2514\u2500\u2500 cart.php \u2514\u2500\u2500 config/ \u251c\u2500\u2500 database.php \u2514\u2500\u2500 settings.php","title":"Folder Upload"},{"location":"code-management/upload/#archive-upload","text":"Supported Formats: - .zip (recommended) - .tar.gz - .tar.bz2 - .rar - .7z Best Practices: - Compress your project at the root level - Exclude unnecessary files (.git, node_modules, .DS_Store) - Keep archive size under 500MB - Use descriptive archive names Creating a Clean Archive: # Create a clean zip file zip -r my-app.zip . -x \"*.git*\" \"node_modules/*\" \".DS_Store\" \"*.log\" # Or use tar tar -czf my-app.tar.gz --exclude='.git' --exclude='node_modules' .","title":"Archive Upload"},{"location":"code-management/upload/#upload-limitations","text":"File Size Limits: - Single file: 100MB maximum - Archive file: 500MB maximum - Total project size: 2GB maximum - Individual image: 50MB maximum File Type Restrictions: // Allowed file extensions const allowedExtensions = [ // Web files '.html', '.htm', '.css', '.js', '.jsx', '.ts', '.tsx', '.vue', '.svelte', '.scss', '.sass', '.less', // Backend files '.php', '.py', '.rb', '.go', '.java', '.cs', '.cpp', '.c', '.h', '.hpp', // Configuration '.json', '.xml', '.yml', '.yaml', '.env', '.ini', '.conf', '.config', // Assets '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2', '.ttf', '.eot', '.mp4', '.mp3', // Documentation '.md', '.txt', '.pdf' ];","title":"Upload Limitations"},{"location":"code-management/upload/#2-git-integration","text":"Git integration provides seamless deployment from your version control repositories with automatic updates and collaboration features.","title":"2. Git Integration"},{"location":"code-management/upload/#github-integration","text":"Initial Setup: 1. Go to Application Settings \u2192 Git Integration 2. Click \"Connect GitHub Account\" 3. Authorize Devaito application access 4. Select repository and branch 5. Configure deployment settings Repository Configuration: # .devaito.yml configuration file version: \"1.0\" build: commands: - npm install - npm run build output_directory: \"dist\" deploy: branch: \"main\" auto_deploy: true exclude: - \"node_modules\" - \".git\" - \"tests\" - \"*.log\" Webhook Setup: // GitHub webhook payload example { \"ref\": \"refs/heads/main\", \"repository\": { \"name\": \"my-ecommerce-app\", \"full_name\": \"username/my-ecommerce-app\" }, \"commits\": [ { \"id\": \"abc123\", \"message\": \"Add new product features\", \"author\": { \"name\": \"Developer Name\", \"email\": \"developer@example.com\" } } ] }","title":"GitHub Integration"},{"location":"code-management/upload/#gitlab-integration","text":"Setup Process: # 1. Generate GitLab access token # Go to GitLab \u2192 User Settings \u2192 Access Tokens # Create token with 'api' and 'read_repository' scopes # 2. Configure in Devaito # Settings \u2192 Git Integration \u2192 GitLab # Enter repository URL: https://gitlab.com/username/project.git # Add access token GitLab CI Integration: # .gitlab-ci.yml stages: - build - deploy build: stage: build script: - npm install - npm run build artifacts: paths: - dist/ deploy_to_devaito: stage: deploy script: - curl -X POST \"https://svelte.devaito.com/api/deploy\" -H \"Authorization: Bearer $DEVAITO_TOKEN\" -F \"project_id=$PROJECT_ID\" -F \"archive=@dist.zip\" only: - main","title":"GitLab Integration"},{"location":"code-management/upload/#bitbucket-integration","text":"Configuration Steps: 1. Create App Password in Bitbucket settings 2. Add repository credentials in Devaito 3. Configure branch and deployment rules 4. Set up automatic deployment triggers","title":"Bitbucket Integration"},{"location":"code-management/upload/#private-repository-access","text":"SSH Key Setup: # Generate SSH key pair ssh-keygen -t rsa -b 4096 -C \"devaito-deploy\" # Add public key to your Git provider # Add private key to Devaito dashboard HTTPS with Personal Access Token: # Clone with token git clone https://username:token@github.com/username/repository.git # Configure in Devaito Repository URL: https://github.com/username/repository.git Username: your-username Password/Token: your-personal-access-token","title":"Private Repository Access"},{"location":"code-management/upload/#branch-management","text":"Multi-branch Deployment: // Branch configuration const branchConfig = { \"main\": { \"environment\": \"production\", \"auto_deploy\": true, \"domain\": \"myapp.devaito.com\" }, \"staging\": { \"environment\": \"staging\", \"auto_deploy\": true, \"domain\": \"myapp-staging.devaito.com\" }, \"development\": { \"environment\": \"dev\", \"auto_deploy\": false, \"domain\": \"myapp-dev.devaito.com\" } };","title":"Branch Management"},{"location":"code-management/upload/#3-api-upload","text":"The API upload method enables programmatic file uploads and automated deployment workflows.","title":"3. API Upload"},{"location":"code-management/upload/#authentication","text":"API Token Generation: # Generate API token in dashboard Dashboard \u2192 Settings \u2192 API Keys \u2192 Generate New Token # Token format Bearer 11|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","title":"Authentication"},{"location":"code-management/upload/#basic-api-upload","text":"cURL Example: # Upload single file curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -H \"Content-Type: multipart/form-data\" \\ -F \"file=@index.html\" \\ -F \"application_id=your-app-id\" \\ -F \"path=/public/index.html\" # Upload archive curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"file=@project.zip\" \\ -F \"application_id=your-app-id\" \\ -F \"extract=true\" Response Format: { \"success\": true, \"message\": \"File uploaded successfully\", \"data\": { \"file_id\": \"file_abc123\", \"filename\": \"index.html\", \"size\": 2048, \"path\": \"/public/index.html\", \"uploaded_at\": \"2025-01-15T10:30:00Z\" } }","title":"Basic API Upload"},{"location":"code-management/upload/#programming-language-examples","text":"Python Upload Script: import requests import os from pathlib import Path class DevaitoUploader: def __init__(self, api_token, app_id): self.api_token = api_token self.app_id = app_id self.base_url = \"https://svelte.devaito.com/api/v1\" self.headers = { \"Authorization\": f\"Bearer {api_token}\" } def upload_file(self, file_path, remote_path=None): \"\"\"Upload a single file\"\"\" if not os.path.exists(file_path): raise FileNotFoundError(f\"File not found: {file_path}\") with open(file_path, 'rb') as file: files = {'file': file} data = { 'application_id': self.app_id, 'path': remote_path or f\"/{os.path.basename(file_path)}\" } response = requests.post( f\"{self.base_url}/upload\", headers=self.headers, files=files, data=data ) return response.json() def upload_directory(self, directory_path, exclude_patterns=None): \"\"\"Upload entire directory\"\"\" exclude_patterns = exclude_patterns or ['.git', 'node_modules', '.DS_Store'] results = [] for root, dirs, files in os.walk(directory_path): # Filter out excluded directories dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)] for file in files: if any(pattern in file for pattern in exclude_patterns): continue file_path = os.path.join(root, file) relative_path = os.path.relpath(file_path, directory_path) try: result = self.upload_file(file_path, f\"/{relative_path}\") results.append(result) print(f\"Uploaded: {relative_path}\") except Exception as e: print(f\"Failed to upload {relative_path}: {e}\") return results # Usage example uploader = DevaitoUploader(\"your-api-token\", \"your-app-id\") uploader.upload_directory(\"./my-project\") Node.js Upload Script: const axios = require('axios'); const FormData = require('form-data'); const fs = require('fs'); const path = require('path'); class DevaitoUploader { constructor(apiToken, appId) { this.apiToken = apiToken; this.appId = appId; this.baseURL = 'https://svelte.devaito.com/api/v1'; this.headers = { 'Authorization': `Bearer ${apiToken}` }; } async uploadFile(filePath, remotePath = null) { const form = new FormData(); form.append('file', fs.createReadStream(filePath)); form.append('application_id', this.appId); form.append('path', remotePath || `/${path.basename(filePath)}`); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Upload failed: ${error.response?.data?.message || error.message}`); } } async uploadArchive(archivePath) { const form = new FormData(); form.append('file', fs.createReadStream(archivePath)); form.append('application_id', this.appId); form.append('extract', 'true'); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Archive upload failed: ${error.response?.data?.message || error.message}`); } } } // Usage const uploader = new DevaitoUploader('your-api-token', 'your-app-id'); // Upload single file uploader.uploadFile('./index.html') .then(result => console.log('Upload successful:', result)) .catch(error => console.error('Upload failed:', error));","title":"Programming Language Examples"},{"location":"code-management/upload/#batch-upload-api","text":"Multiple File Upload: curl -X POST \"https://svelte.devaito.com/api/v1/upload/batch\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"files[]=@file1.html\" \\ -F \"files[]=@file2.css\" \\ -F \"files[]=@file3.js\" \\ -F \"application_id=your-app-id\" Response: { \"success\": true, \"message\": \"Batch upload completed\", \"data\": { \"uploaded\": 2, \"failed\": 1, \"results\": [ { \"file\": \"file1.html\", \"success\": true, \"file_id\": \"file_123\" }, { \"file\": \"file2.css\", \"success\": true, \"file_id\": \"file_124\" }, { \"file\": \"file3.js\", \"success\": false, \"error\": \"File type not supported\" } ] } }","title":"Batch Upload API"},{"location":"code-management/upload/#4-ftpsftp-upload","text":"FTP/SFTP provides direct file system access for bulk transfers and integration with existing workflows.","title":"4. FTP/SFTP Upload"},{"location":"code-management/upload/#sftp-configuration","text":"Connection Details: Host: sftp.devaito.com Port: 2022 Protocol: SFTP (SSH File Transfer Protocol) Username: [Generated per application] Password: [Generated per application] Root Directory: /home/[app-id]/ Obtaining Credentials: 1. Navigate to Application Settings \u2192 FTP Access 2. Click \"Generate SFTP Credentials\" 3. Save credentials securely 4. Test connection using provided details","title":"SFTP Configuration"},{"location":"code-management/upload/#command-line-sftp","text":"Basic Connection: # Connect to SFTP server sftp -P 2022 your-app-username@sftp.devaito.com # Navigate and upload cd /public put index.html put -r assets/ ls -la quit Batch Upload Script: #!/bin/bash # upload_to_devaito.sh SFTP_HOST=\"sftp.devaito.com\" SFTP_PORT=\"2022\" SFTP_USER=\"your-app-username\" SFTP_PASS=\"your-app-password\" LOCAL_DIR=\"./build\" REMOTE_DIR=\"/public\" # Create batch command file cat > sftp_commands.txt << EOF cd $REMOTE_DIR lcd $LOCAL_DIR put -r * quit EOF # Execute SFTP commands sshpass -p \"$SFTP_PASS\" sftp -P $SFTP_PORT -b sftp_commands.txt $SFTP_USER@$SFTP_HOST # Cleanup rm sftp_commands.txt echo \"Upload completed successfully!\"","title":"Command Line SFTP"},{"location":"code-management/upload/#gui-ftp-clients","text":"FileZilla Configuration: Protocol: SFTP - SSH File Transfer Protocol Host: sftp.devaito.com Port: 2022 Logon Type: Normal User: your-app-username Password: your-generated-password WinSCP Configuration (Windows): File protocol: SFTP Host name: sftp.devaito.com Port number: 2022 User name: your-app-username Password: your-generated-password Cyberduck Configuration (Mac): Connection: SFTP (SSH File Transfer Protocol) Server: sftp.devaito.com Port: 2022 Username: your-app-username Password: your-generated-password","title":"GUI FTP Clients"},{"location":"code-management/upload/#directory-structure","text":"SFTP Directory Layout: /home/your-app-id/ \u251c\u2500\u2500 public/ # Web-accessible files \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 assets/ \u2502 \u2514\u2500\u2500 api/ \u251c\u2500\u2500 private/ # Private files (configs, logs) \u251c\u2500\u2500 logs/ # Application logs \u251c\u2500\u2500 backups/ # Automatic backups \u2514\u2500\u2500 temp/ # Temporary files File Permissions: - Public files: 644 (readable by web server) - Directories: 755 (executable/searchable) - Scripts: 755 (if executable) - Private files: 600 (owner only)","title":"Directory Structure"},{"location":"code-management/upload/#5-cli-tool-upload","text":"The Devaito CLI provides powerful command-line tools for developers who prefer terminal-based workflows.","title":"5. CLI Tool Upload"},{"location":"code-management/upload/#installation","text":"NPM Installation: # Install globally npm install -g @devaito/cli # Or install locally in project npm install --save-dev @devaito/cli Python Installation: # Using pip pip install devaito-cli # Using pipx (recommended) pipx install devaito-cli Manual Installation: # Download binary (Linux/Mac) curl -L https://releases.devaito.com/cli/latest/devaito-linux -o /usr/local/bin/devaito chmod +x /usr/local/bin/devaito # Windows PowerShell Invoke-WebRequest -Uri \"https://releases.devaito.com/cli/latest/devaito-windows.exe\" -OutFile \"devaito.exe\"","title":"Installation"},{"location":"code-management/upload/#initial-setup","text":"Authentication: # Login with credentials devaito login # Or use API token devaito auth --token \"your-api-token\" # Verify authentication devaito whoami Project Initialization: # Initialize in existing project cd your-project devaito init # Create new project devaito create my-new-app cd my-new-app","title":"Initial Setup"},{"location":"code-management/upload/#basic-commands","text":"Upload Commands: # Upload current directory devaito upload # Upload specific files devaito upload index.html styles.css # Upload with environment specification devaito upload --env production # Upload and deploy immediately devaito upload --deploy # Upload with exclusions devaito upload --exclude \"node_modules,*.log,.git\" Advanced Upload Options: # Upload with progress bar devaito upload --progress # Upload with verification devaito upload --verify # Dry run (show what would be uploaded) devaito upload --dry-run # Upload compressed devaito upload --compress # Upload with custom remote path devaito upload --path \"/custom/path\" file.html","title":"Basic Commands"},{"location":"code-management/upload/#configuration-file","text":"devaito.config.js: module.exports = { // Application configuration app: { id: 'your-app-id', name: 'My Devaito App', environment: 'production' }, // Upload configuration upload: { exclude: [ 'node_modules/**', '.git/**', '*.log', '.DS_Store', 'tests/**' ], include: [ 'public/**', 'api/**', 'index.html', 'package.json' ], compress: true, verify: true }, // Build configuration build: { command: 'npm run build', outputDir: 'dist', beforeUpload: [ 'npm install', 'npm run test' ] }, // Deployment configuration deploy: { beforeDeploy: ['npm run build'], afterDeploy: ['npm run cleanup'] } };","title":"Configuration File"},{"location":"code-management/upload/#watch-mode","text":"Auto-upload on Changes: # Watch current directory devaito watch # Watch specific files/directories devaito watch src/ public/ # Watch with custom ignore patterns devaito watch --ignore \"*.tmp,*.log\" # Watch with debounce (wait 2 seconds after changes) devaito watch --debounce 2000","title":"Watch Mode"},{"location":"code-management/upload/#scripting-and-automation","text":"GitHub Actions Integration: name: Deploy to Devaito on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '16' - name: Install dependencies run: npm install - name: Build project run: npm run build - name: Install Devaito CLI run: npm install -g @devaito/cli - name: Deploy to Devaito env: DEVAITO_TOKEN: ${{ secrets.DEVAITO_TOKEN }} run: | devaito auth --token $DEVAITO_TOKEN devaito upload --deploy Jenkins Pipeline: pipeline { agent any environment { DEVAITO_TOKEN = credentials('devaito-token') } stages { stage('Build') { steps { sh 'npm install' sh 'npm run build' } } stage('Deploy') { steps { sh 'npm install -g @devaito/cli' sh 'devaito auth --token $DEVAITO_TOKEN' sh 'devaito upload --deploy' } } } }","title":"Scripting and Automation"},{"location":"code-management/upload/#upload-monitoring-logs","text":"","title":"Upload Monitoring &amp; Logs"},{"location":"code-management/upload/#real-time-progress","text":"Web Interface Monitoring: - Real-time progress bars - File-by-file status updates - Error notifications with details - Upload speed and ETA display CLI Progress Monitoring: # Verbose output devaito upload --verbose # Progress with file details devaito upload --progress --details # JSON output for parsing devaito upload --output json","title":"Real-time Progress"},{"location":"code-management/upload/#upload-logs","text":"Accessing Upload History: # View recent uploads devaito logs upload --limit 10 # View specific upload details devaito logs upload --id upload_abc123 # Filter by date devaito logs upload --since \"2025-01-01\" # Export logs devaito logs upload --export logs.json Log Format: { \"upload_id\": \"upload_abc123\", \"timestamp\": \"2025-01-15T10:30:00Z\", \"method\": \"web_interface\", \"status\": \"completed\", \"files_uploaded\": 15, \"files_failed\": 0, \"total_size\": \"2.3MB\", \"duration\": \"45s\", \"errors\": [] }","title":"Upload Logs"},{"location":"code-management/upload/#troubleshooting-common-issues","text":"","title":"Troubleshooting Common Issues"},{"location":"code-management/upload/#connection-problems","text":"Issue: Cannot connect to upload server # Test connectivity curl -I https://svelte.devaito.com # Check DNS resolution nslookup svelte.devaito.com # Test SFTP connection telnet sftp.devaito.com 2022","title":"Connection Problems"},{"location":"code-management/upload/#authentication-errors","text":"Issue: Invalid API token # Verify token format echo \"Bearer 11|your-token-here\" # Test token validity curl -H \"Authorization: Bearer YOUR_TOKEN\" \\ https://svelte.devaito.com/api/v1/user # Regenerate token if needed # Dashboard \u2192 Settings \u2192 API Keys \u2192 Regenerate","title":"Authentication Errors"},{"location":"code-management/upload/#file-upload-failures","text":"Issue: File too large - Solution: Compress files or split large uploads - Use archive format for multiple files - Consider SFTP for very large files Issue: Invalid file type - Check allowed extensions list - Rename files if necessary - Use generic extensions (.txt for text files)","title":"File Upload Failures"},{"location":"code-management/upload/#performance-issues","text":"Slow Upload Speeds: # Test upload speed devaito upload --test-speed # Use compression devaito upload --compress # Upload during off-peak hours # Use multiple parallel connections (SFTP) For additional support, contact our technical team or check the FAQ section.","title":"Performance Issues"},{"location":"code-management/validation/","text":"Validation & Testing Overview Validation and testing are critical components of the development process on Devaito v2.0. This comprehensive guide covers automated validation, testing methodologies, performance benchmarking, and quality assurance practices to ensure your applications are robust, secure, and performant. Testing Philosophy: - Prevention over Detection : Catch issues early in development - Automated Quality Gates : Continuous validation throughout deployment - Performance First : Ensure optimal user experience - Security by Default : Validate security at every level Pre-Upload Validation Automated Code Validation Devaito automatically validates your code before deployment using multiple validation layers: Syntax Validation: // JavaScript/TypeScript validation const validationRules = { syntax: 'ES2020+', strictMode: true, allowedGlobals: ['console', 'fetch', 'document', 'window'], bannedFunctions: ['eval', 'Function', 'setTimeout'], maxComplexity: 10, maxDepth: 4 }; // PHP validation const phpRules = { version: '8.0+', psr: ['PSR-1', 'PSR-4', 'PSR-12'], security: ['no-eval', 'no-exec', 'no-shell-exec'], errorReporting: 'E_ALL' }; Dependency Validation: { \"validation\": { \"dependencies\": { \"checkLockFiles\": true, \"allowedRegistries\": [\"npmjs.org\", \"packagist.org\"], \"vulnerabilityCheck\": true, \"licenseCompliance\": true, \"maxDependencies\": 100 }, \"security\": { \"auditLevel\": \"high\", \"autoFix\": true, \"bannedPackages\": [\"lodash\", \"moment\"], \"preferredAlternatives\": { \"lodash\": \"native-js-methods\", \"moment\": \"date-fns\" } } } } File Structure Validation: // Required files validation const requiredFiles = { web: ['index.html'], react: ['package.json', 'src/index.js', 'public/index.html'], vue: ['package.json', 'src/main.js', 'public/index.html'], php: ['index.php', 'composer.json'] }; // File size limits const sizeLimits = { singleFile: '100MB', totalProject: '2GB', imageFile: '50MB', videoFile: '500MB' }; Manual Validation Checklist Pre-Upload Checklist: ```markdown Code Quality","title":"Validation & Testing"},{"location":"code-management/validation/#validation-testing","text":"","title":"Validation &amp; Testing"},{"location":"code-management/validation/#overview","text":"Validation and testing are critical components of the development process on Devaito v2.0. This comprehensive guide covers automated validation, testing methodologies, performance benchmarking, and quality assurance practices to ensure your applications are robust, secure, and performant. Testing Philosophy: - Prevention over Detection : Catch issues early in development - Automated Quality Gates : Continuous validation throughout deployment - Performance First : Ensure optimal user experience - Security by Default : Validate security at every level","title":"Overview"},{"location":"code-management/validation/#pre-upload-validation","text":"","title":"Pre-Upload Validation"},{"location":"code-management/validation/#automated-code-validation","text":"Devaito automatically validates your code before deployment using multiple validation layers: Syntax Validation: // JavaScript/TypeScript validation const validationRules = { syntax: 'ES2020+', strictMode: true, allowedGlobals: ['console', 'fetch', 'document', 'window'], bannedFunctions: ['eval', 'Function', 'setTimeout'], maxComplexity: 10, maxDepth: 4 }; // PHP validation const phpRules = { version: '8.0+', psr: ['PSR-1', 'PSR-4', 'PSR-12'], security: ['no-eval', 'no-exec', 'no-shell-exec'], errorReporting: 'E_ALL' }; Dependency Validation: { \"validation\": { \"dependencies\": { \"checkLockFiles\": true, \"allowedRegistries\": [\"npmjs.org\", \"packagist.org\"], \"vulnerabilityCheck\": true, \"licenseCompliance\": true, \"maxDependencies\": 100 }, \"security\": { \"auditLevel\": \"high\", \"autoFix\": true, \"bannedPackages\": [\"lodash\", \"moment\"], \"preferredAlternatives\": { \"lodash\": \"native-js-methods\", \"moment\": \"date-fns\" } } } } File Structure Validation: // Required files validation const requiredFiles = { web: ['index.html'], react: ['package.json', 'src/index.js', 'public/index.html'], vue: ['package.json', 'src/main.js', 'public/index.html'], php: ['index.php', 'composer.json'] }; // File size limits const sizeLimits = { singleFile: '100MB', totalProject: '2GB', imageFile: '50MB', videoFile: '500MB' };","title":"Automated Code Validation"},{"location":"code-management/validation/#manual-validation-checklist","text":"Pre-Upload Checklist: ```markdown","title":"Manual Validation Checklist"},{"location":"code-management/validation/#code-quality","text":"","title":"Code Quality"},{"location":"collaboration/add-remove/","text":"Adding and Removing Collaborators Overview In Devaito v2.0, collaboration is a key feature that allows multiple users to work on the same application or project. Collaborators can be added to your application to contribute to development, testing, or management tasks. This section guides you through the process of adding and removing collaborators, including best practices to ensure smooth teamwork. Prerequisites You must have an active Devaito account and be logged in. You need to be the owner or have administrative permissions for the application to manage collaborators. Ensure you have the email addresses or Devaito usernames of the collaborators you wish to add. Adding a Collaborator Follow these steps to add a collaborator to your application: Navigate to Your Application: Log in to your Devaito account and go to the \"My Applications\" section from the dashboard. Select the application to which you want to add a collaborator. Access Collaborator Management: In the application\u2019s settings, locate the \"Collaborators\" tab or section. Click on the \"Add Collaborator\" button. Enter Collaborator Details: Input the collaborator\u2019s Devaito username or email address. Select the appropriate role for the collaborator (e.g., Developer, Tester, or Admin). Refer to Roles & Permissions for details on available roles. Optionally, add a note or message to the invitation (e.g., \"Please join our project for API development\"). Send Invitation: Click \"Send Invitation\" to notify the collaborator. The collaborator will receive an email or in-platform notification with instructions to accept the invitation. Verify Addition: Once the collaborator accepts the invitation, they will appear in the \"Collaborators\" list with their assigned role. You can verify their status in the application\u2019s collaborator management panel. Removing a Collaborator If a collaborator no longer needs access to your application, you can remove them as follows: Navigate to Collaborator Management: Go to the \"My Applications\" section and select the relevant application. Access the \"Collaborators\" tab. Locate the Collaborator: Find the collaborator in the list. You can use the search bar if the list is long. Remove Access: Click the \"Remove\" or \"Revoke Access\" button next to the collaborator\u2019s name. Confirm the action in the dialog box that appears. You may be prompted to provide a reason for removal (optional). Verify Removal: The collaborator will be removed from the application and will no longer have access to its resources. Check the \"Collaborators\" list to ensure the user is no longer listed. Best Practices Role Assignment: Assign roles based on the collaborator\u2019s responsibilities. Avoid granting Admin access unless necessary. See Team Best Practices for more guidance. Communication: Inform collaborators about their roles and expectations before adding them to the project. Regular Audits: Periodically review the collaborator list to ensure only active team members have access. Secure Invitations: Use verified email addresses or usernames to prevent unauthorized access. Troubleshooting Invitation Not Received: Ask the collaborator to check their spam/junk folder or verify the email address used. Permission Errors: Ensure you have administrative rights to add or remove collaborators. Contact Devaito support if issues persist. Role Conflicts: If a collaborator cannot perform expected actions, verify their role in the Roles & Permissions section. For additional help, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.","title":"Adding/Removing Collaborators"},{"location":"collaboration/best-practices/","text":"Team Best Practices Overview Effective collaboration is essential for successful application development on Devaito v2.0. This section provides best practices for managing teams, ensuring clear communication, and optimizing workflows when working with collaborators. General Guidelines Define Clear Roles: Assign roles based on each collaborator\u2019s responsibilities (see Roles & Permissions). Clearly communicate expectations when adding collaborators (see Adding/Removing Collaborators). Use Version Control: Integrate version management tools to track changes and avoid conflicts (see Version Management). Regular Syncs: Schedule team meetings or updates to align on project goals, progress, and blockers. Document Everything: Maintain detailed documentation in your application\u2019s codebase and use Devaito\u2019s built-in tools to share updates with collaborators. Collaboration Workflow Onboarding Collaborators: Provide new team members with access to the Quick Start Guide and relevant documentation. Assign appropriate roles (e.g., Developer for coders, Tester for QA) to streamline onboarding. Share project goals, timelines, and key contacts in the invitation message. Code and Resource Management: Follow coding standards outlined in Code Formats & Conventions. Use Devaito\u2019s validation tools to ensure code quality before deployment (see Validation & Testing). Encourage collaborators to document their changes in commit messages or logs. Communication Best Practices: Use in-platform notifications or external tools (e.g., Slack, email) for updates, as supported by Devaito\u2019s integrations (see Specific Integrations). Create a shared space (e.g., a project wiki) for team notes, FAQs, or troubleshooting steps. Avoid direct modifications to shared resources without team consensus. Conflict Resolution: Address merge conflicts promptly using version control tools. If permission issues arise, verify roles and adjust as needed (see Roles & Permissions). Escalate unresolved issues to the application\u2019s Admin or Devaito support. Security Considerations Limit Access: Only grant Admin or Developer roles to trusted team members. Use Viewer or Tester roles for temporary or external collaborators. Monitor Activity: Regularly review application logs and collaborator actions to detect unauthorized changes (see Application Status). Secure API Keys: Ensure collaborators with API key access follow security protocols (see API Keys & Permissions). Optimizing Team Performance Automate Workflows: Use Devaito\u2019s automation and webhook features to streamline repetitive tasks (see Automations & Webhooks). Leverage CI/CD: Implement continuous integration and deployment pipelines for faster iterations (see CI/CD). Feedback Loops: Encourage team members to provide feedback on processes and tools to improve efficiency. Troubleshooting Collaborator Confusion: If team members are unsure of their roles, review Roles & Permissions and clarify responsibilities. Communication Breakdowns: Ensure all collaborators have access to communication tools and project updates. Workflow Bottlenecks: If delays occur, check for misconfigured permissions or outdated validation scripts (see Validation & Testing). For additional guidance, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.","title":"Team Best Practices"},{"location":"collaboration/roles/","text":"Roles & Permissions Overview In Devaito v2.0, roles and permissions define what actions collaborators can perform within an application. This section explains the available roles, their associated permissions, and how to manage them effectively to ensure secure and efficient collaboration. Available Roles Devaito provides the following predefined roles for collaborators: Role Description Admin Full access to all application features, including management of collaborators, API keys, and deployments. Developer Access to code upload, validation, and debugging, with limited management capabilities. Tester Access to testing and validation features, with read-only access to code and configurations. Viewer Read-only access to application details, status, and logs, with no modification rights. Permissions Breakdown Each role is associated with specific permissions, as outlined below: Admin: Add/remove collaborators (see Adding/Removing Collaborators). Manage API keys and permissions (see API Keys & Permissions). Deploy applications (see Deployment). Edit application settings, code, and configurations. View all logs, statuses, and reports. Developer: Upload and manage code (see Code Upload & Management). Run validation and testing scripts (see Validation & Testing). Debug applications (see Debugging). View application status and logs. Cannot manage collaborators or API keys. Tester: Run validation and testing scripts. View test results and application status. Read-only access to code and configurations. Cannot modify code, deploy applications, or manage collaborators. Viewer: View application status, logs, and configurations. Cannot modify any settings, code, or collaborator roles. Managing Roles To assign or modify a collaborator\u2019s role: Navigate to Collaborator Management: Go to the \"My Applications\" section and select the relevant application. Access the \"Collaborators\" tab (see Adding/Removing Collaborators). Edit Role: Locate the collaborator in the list. Click \"Edit Role\" or a similar option next to their name. Select the new role from the dropdown menu (e.g., Admin, Developer). Save changes to update the collaborator\u2019s permissions. Verify Changes: Confirm the role update in the collaborator list. Notify the collaborator if their permissions have changed significantly. Best Practices Least Privilege Principle: Assign the lowest level of access necessary for a collaborator\u2019s tasks. For example, use Viewer for team members who only need to monitor progress. Regular Role Reviews: Periodically audit collaborator roles to ensure they align with current responsibilities. Clear Communication: Inform collaborators about their role\u2019s capabilities and limitations when adding them (see Team Best Practices). Role Transitions: When changing roles (e.g., Developer to Admin), ensure the collaborator is aware of new responsibilities. Troubleshooting Permission Denied Errors: Verify the collaborator\u2019s role matches their intended actions. For example, only Admins can manage API keys. Role Not Updating: Ensure you have Admin rights to modify roles. If issues persist, contact Devaito support. Unexpected Access: If a collaborator has incorrect permissions, check for overlapping roles or misconfigurations in the collaborator settings. For further assistance, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.","title":"Roles & Permissions"},{"location":"faq/questions/","text":"Frequently Asked Questions Overview This section addresses common questions about using Devaito v2.0, covering account setup, application management, API usage, and more. For specific issues, see Common Solutions. Account and Access Q: How do I create a Devaito account?A: Visit the Devaito website and follow the steps in Creation / Login. You\u2019ll need a valid email address and password. Q: I forgot my password. How do I reset it?A: Use the \"Forgot Password\" link on the login page. Follow the email instructions to reset your password. Contact support@devaito.com if issues persist. Q: Can multiple users collaborate on a single application?A: Yes, add collaborators via the \"Collaborators\" tab in your application settings. See Adding/Removing Collaborators. Application Management Q: How do I deploy my application?A: Configure deployment settings as described in Deployment. Ensure your code passes validation (see Validation & Testing). Q: Why is my application status \"Failed\"?A: Check the application logs in Application Status. Common issues include code errors or misconfigured integrations. Q: Can I archive an application instead of deleting it?A: Yes, use the archiving option in Deletion / Archiving to preserve application data. API Usage Q: How do I access Devaito APIs?A: Browse available APIs in API List & Descriptions and generate API keys via API Keys & Permissions. Q: Why am I getting an \"Invalid API Key\" error?A: Verify the key is correct and has the right permissions. Regenerate the key if needed (see API Keys & Permissions). Code and Integrations Q: What code formats are supported?A: Devaito supports multiple languages and formats. See Code Formats & Conventions for details. Q: How do I set up a GitHub integration?A: Follow the steps in Specific Integrations to connect your repository. Q: My webhook isn\u2019t triggering. What\u2019s wrong?A: Check the webhook URL and event settings in Automations & Webhooks. Ensure the receiving service is active. Collaboration Q: How do I change a collaborator\u2019s role?A: Edit their role in the \"Collaborators\" tab. See Roles & Permissions for available roles. Q: Can collaborators access my API keys?A: Only Admins can manage API keys. Restrict roles appropriately (see Roles & Permissions). Advanced Features Q: How do I roll back to a previous version?A: Use the version history in Version Management to select and restore a previous version. Q: Can I automate testing in a CI/CD pipeline?A: Yes, configure pipelines as described in CI/CD. Need More Help? If your question isn\u2019t answered here, check Common Solutions or contact Devaito support at support@devaito.com. Refer to External Resources for additional guides.","title":"Frequently Asked Questions"},{"location":"faq/solutions/","text":"Common Solutions Overview This section provides solutions to common issues encountered while using Devaito v2.0, from login problems to deployment errors. For additional questions, see Frequently Asked Questions. Account and Login Issues Problem: Unable to log in due to incorrect credentials.Solution: Verify your email and password. Use the \"Forgot Password\" link to reset your password (see Creation / Login). Clear browser cache or try incognito mode. Contact support@devaito.com if the issue persists. Problem: Account locked after multiple failed login attempts.Solution: Wait 15 minutes or contact support to unlock your account. Application Management Problem: Deployment fails with a generic error.Solution: Check logs in Application Status. Ensure code passes validation (see Validation & Testing). Verify integration settings (see Specific Integrations). Problem: Application is stuck in \"Pending\" status.Solution: Refresh the dashboard or check server status. Restart the deployment process (see Deployment). Contact support if unresolved after 30 minutes. API Issues Problem: API requests return \"401 Unauthorized.\"Solution: Verify the API key is correct and active (see API Keys & Permissions). Check key permissions align with the API endpoint. Regenerate the key if compromised. Problem: API rate limit exceeded.Solution: Review rate limits in API Usage. Optimize requests or request a higher quota from support. Code and Debugging Problem: Code upload fails validation.Solution: Review validation errors in Validation & Testing. Ensure code follows Code Formats & Conventions. Use debugging tools (see Debugging). Problem: Integration with GitHub not syncing.Solution: Verify OAuth token and repository settings (see Specific Integrations). Check webhook configuration (see Automations & Webhooks). Collaboration Problem: Collaborator cannot access application features.Solution: Confirm their role in Roles & Permissions. Ensure they\u2019ve accepted the invitation (see Adding/Removing Collaborators). Reassign the role if needed. Problem: Too many collaborators added.Solution: Remove unnecessary collaborators (see Adding/Removing Collaborators). Advanced Features Problem: Webhook not delivering to external service.Solution: Verify the webhook URL and payload format (see Automations & Webhooks). Check external service logs for errors. Test with a simple payload to isolate issues. Problem: CI/CD pipeline fails at the testing stage.Solution: Review test scripts in Validation & Testing. Check pipeline configuration in CI/CD. Ensure sufficient resources are allocated. Still Stuck? Refer to Frequently Asked Questions for more insights or contact Devaito support at support@devaito.com. Additional resources are available in External Resources.","title":"Common Solutions"},{"location":"getting-started/available-apis/","text":"APIs Disponibles Introduction Cette section vous pr\u00e9sente les APIs disponibles sur Devaito (version SaaS multi-tenant), essentielles pour enrichir les fonctionnalit\u00e9s de vos applications. Elles couvrent la gestion des produits, commandes, campagnes marketing, r\u00e9seaux sociaux, templates, m\u00e9dias et personnalisation. URL de base : https://admin.devaito.com/api Vue d\u2019Ensemble Les APIs sont accessibles via l\u2019onglet \"APIs Disponibles\" dans le panneau de navigation. Elles sont con\u00e7ues pour r\u00e9pondre \u00e0 divers besoins : e-commerce, gestion de contenu, int\u00e9grations sociales et automatisation marketing. Liste des APIs Authentication API : Connexion et gestion des sessions utilisateurs. User API : R\u00e9cup\u00e9ration des informations de l\u2019utilisateur et du store. Products API : Gestion et affichage des produits. Orders API : Consultation des commandes et historiques d\u2019achats. Categories API : Organisation et filtrage des produits par cat\u00e9gorie. Campaigns API : Cr\u00e9ation et gestion des campagnes marketing. Posts API : Gestion des posts internes et publications planifi\u00e9es. Social Media APIs : Int\u00e9gration avec Facebook et Instagram (publication directe ou planifi\u00e9e). Templates API : Gestion des templates graphiques et de contenu. Platforms API : Gestion des plateformes sociales/publicitaires connect\u00e9es. Resolutions API : D\u00e9finition des formats d\u2019images/vid\u00e9os selon la plateforme. Gallery & Media API : Gestion et stockage d\u2019images/vid\u00e9os du store. Store Settings API : Personnalisation du branding (langues, couleurs, polices, prompts). Content Generator API : G\u00e9n\u00e9ration de contenu via IA (bas\u00e9e sur OpenAI). Comment Utiliser les APIs S\u00e9lection : Choisissez l\u2019API adapt\u00e9e \u00e0 votre besoin (ex. produits, social media, campagnes). Int\u00e9gration : Impl\u00e9mentez les appels avec fetch , axios ou toute biblioth\u00e8que HTTP. Authentification : Utilisez un Bearer Token pour s\u00e9curiser l\u2019acc\u00e8s. Test : V\u00e9rifiez vos requ\u00eates avec Postman/Insomnia avant d\u2019int\u00e9grer dans votre app. D\u00e9tails Chaque API retourne des donn\u00e9es en JSON avec des statuts HTTP standards ( 200 , 201 , 400 , 401 , 404 , 500 ). La majorit\u00e9 des APIs n\u00e9cessitent une authentification ( Authorization: Bearer YOUR_TOKEN ). Certaines APIs supportent la pagination (produits, galeries). Conseils Environnement de test : Toujours valider vos int\u00e9grations avant mise en production. Gestion des erreurs : Impl\u00e9mentez des gestionnaires pour 401 (non autoris\u00e9), 404 (non trouv\u00e9), etc. Performance : Cachez les donn\u00e9es peu changeantes (cat\u00e9gories, templates). S\u00e9curit\u00e9 : Ne partagez jamais vos tokens publics. Pour aller plus loin, consultez : - Guide du D\u00e9veloppeur - Guide d\u2019Utilisation des APIs - Liste d\u00e9taill\u00e9e des APIs","title":"Available APIs"},{"location":"getting-started/available-apis/#apis-disponibles","text":"","title":"APIs Disponibles"},{"location":"getting-started/available-apis/#introduction","text":"Cette section vous pr\u00e9sente les APIs disponibles sur Devaito (version SaaS multi-tenant), essentielles pour enrichir les fonctionnalit\u00e9s de vos applications. Elles couvrent la gestion des produits, commandes, campagnes marketing, r\u00e9seaux sociaux, templates, m\u00e9dias et personnalisation. URL de base : https://admin.devaito.com/api","title":"Introduction"},{"location":"getting-started/available-apis/#vue-densemble","text":"Les APIs sont accessibles via l\u2019onglet \"APIs Disponibles\" dans le panneau de navigation. Elles sont con\u00e7ues pour r\u00e9pondre \u00e0 divers besoins : e-commerce, gestion de contenu, int\u00e9grations sociales et automatisation marketing.","title":"Vue d\u2019Ensemble"},{"location":"getting-started/available-apis/#liste-des-apis","text":"Authentication API : Connexion et gestion des sessions utilisateurs. User API : R\u00e9cup\u00e9ration des informations de l\u2019utilisateur et du store. Products API : Gestion et affichage des produits. Orders API : Consultation des commandes et historiques d\u2019achats. Categories API : Organisation et filtrage des produits par cat\u00e9gorie. Campaigns API : Cr\u00e9ation et gestion des campagnes marketing. Posts API : Gestion des posts internes et publications planifi\u00e9es. Social Media APIs : Int\u00e9gration avec Facebook et Instagram (publication directe ou planifi\u00e9e). Templates API : Gestion des templates graphiques et de contenu. Platforms API : Gestion des plateformes sociales/publicitaires connect\u00e9es. Resolutions API : D\u00e9finition des formats d\u2019images/vid\u00e9os selon la plateforme. Gallery & Media API : Gestion et stockage d\u2019images/vid\u00e9os du store. Store Settings API : Personnalisation du branding (langues, couleurs, polices, prompts). Content Generator API : G\u00e9n\u00e9ration de contenu via IA (bas\u00e9e sur OpenAI).","title":"Liste des APIs"},{"location":"getting-started/available-apis/#comment-utiliser-les-apis","text":"S\u00e9lection : Choisissez l\u2019API adapt\u00e9e \u00e0 votre besoin (ex. produits, social media, campagnes). Int\u00e9gration : Impl\u00e9mentez les appels avec fetch , axios ou toute biblioth\u00e8que HTTP. Authentification : Utilisez un Bearer Token pour s\u00e9curiser l\u2019acc\u00e8s. Test : V\u00e9rifiez vos requ\u00eates avec Postman/Insomnia avant d\u2019int\u00e9grer dans votre app.","title":"Comment Utiliser les APIs"},{"location":"getting-started/available-apis/#details","text":"Chaque API retourne des donn\u00e9es en JSON avec des statuts HTTP standards ( 200 , 201 , 400 , 401 , 404 , 500 ). La majorit\u00e9 des APIs n\u00e9cessitent une authentification ( Authorization: Bearer YOUR_TOKEN ). Certaines APIs supportent la pagination (produits, galeries).","title":"D\u00e9tails"},{"location":"getting-started/available-apis/#conseils","text":"Environnement de test : Toujours valider vos int\u00e9grations avant mise en production. Gestion des erreurs : Impl\u00e9mentez des gestionnaires pour 401 (non autoris\u00e9), 404 (non trouv\u00e9), etc. Performance : Cachez les donn\u00e9es peu changeantes (cat\u00e9gories, templates). S\u00e9curit\u00e9 : Ne partagez jamais vos tokens publics. Pour aller plus loin, consultez : - Guide du D\u00e9veloppeur - Guide d\u2019Utilisation des APIs - Liste d\u00e9taill\u00e9e des APIs","title":"Conseils"},{"location":"getting-started/creation-login/","text":"Cr\u00e9ation / Connexion Introduction Bienvenue dans la section de cr\u00e9ation de compte et de connexion de Devaito. Cette partie vous guide \u00e0 travers les \u00e9tapes n\u00e9cessaires pour acc\u00e9der \u00e0 la plateforme, que vous soyez un nouvel utilisateur ou un utilisateur existant. Cr\u00e9ation d'un Compte Acc\u00e9der \u00e0 la page d'inscription : Rendez-vous sur la page d'accueil de Devaito et cliquez sur le bouton \"Cr\u00e9er un compte\". Remplir le formulaire : Entrez votre adresse e-mail. Choisissez un mot de passe s\u00e9curis\u00e9. Fournissez votre nom complet ou un pseudonyme. V\u00e9rification : Un e-mail de v\u00e9rification vous sera envoy\u00e9. Cliquez sur le lien fourni pour activer votre compte. Compl\u00e9ter le profil : Apr\u00e8s activation, compl\u00e9tez votre profil avec des informations suppl\u00e9mentaires (optionnel) pour personnaliser votre exp\u00e9rience. Connexion Acc\u00e9der \u00e0 la page de connexion : Depuis la page d'accueil, cliquez sur \"Se connecter\". Entrer vos identifiants : Saisissez votre adresse e-mail. Entrez votre mot de passe. Authentification : Cliquez sur \"Connexion\". Si les identifiants sont corrects, vous serez redirig\u00e9 vers votre tableau de bord. Mot de passe oubli\u00e9 ? : Si n\u00e9cessaire, utilisez l'option \"Mot de passe oubli\u00e9\" pour r\u00e9initialiser votre mot de passe via un e-mail de r\u00e9initialisation. Conseils Assurez-vous d'utiliser une adresse e-mail valide pour la v\u00e9rification. Conservez vos identifiants dans un endroit s\u00e9curis\u00e9. En cas de probl\u00e8me, consultez la section FAQ ou contactez le support. Pour plus d'informations, explorez les autres sections de ce guide.","title":"Creation / Login"},{"location":"getting-started/creation-login/#creation-connexion","text":"","title":"Cr\u00e9ation / Connexion"},{"location":"getting-started/creation-login/#introduction","text":"Bienvenue dans la section de cr\u00e9ation de compte et de connexion de Devaito. Cette partie vous guide \u00e0 travers les \u00e9tapes n\u00e9cessaires pour acc\u00e9der \u00e0 la plateforme, que vous soyez un nouvel utilisateur ou un utilisateur existant.","title":"Introduction"},{"location":"getting-started/creation-login/#creation-dun-compte","text":"Acc\u00e9der \u00e0 la page d'inscription : Rendez-vous sur la page d'accueil de Devaito et cliquez sur le bouton \"Cr\u00e9er un compte\". Remplir le formulaire : Entrez votre adresse e-mail. Choisissez un mot de passe s\u00e9curis\u00e9. Fournissez votre nom complet ou un pseudonyme. V\u00e9rification : Un e-mail de v\u00e9rification vous sera envoy\u00e9. Cliquez sur le lien fourni pour activer votre compte. Compl\u00e9ter le profil : Apr\u00e8s activation, compl\u00e9tez votre profil avec des informations suppl\u00e9mentaires (optionnel) pour personnaliser votre exp\u00e9rience.","title":"Cr\u00e9ation d'un Compte"},{"location":"getting-started/creation-login/#connexion","text":"Acc\u00e9der \u00e0 la page de connexion : Depuis la page d'accueil, cliquez sur \"Se connecter\". Entrer vos identifiants : Saisissez votre adresse e-mail. Entrez votre mot de passe. Authentification : Cliquez sur \"Connexion\". Si les identifiants sont corrects, vous serez redirig\u00e9 vers votre tableau de bord. Mot de passe oubli\u00e9 ? : Si n\u00e9cessaire, utilisez l'option \"Mot de passe oubli\u00e9\" pour r\u00e9initialiser votre mot de passe via un e-mail de r\u00e9initialisation.","title":"Connexion"},{"location":"getting-started/creation-login/#conseils","text":"Assurez-vous d'utiliser une adresse e-mail valide pour la v\u00e9rification. Conservez vos identifiants dans un endroit s\u00e9curis\u00e9. En cas de probl\u00e8me, consultez la section FAQ ou contactez le support. Pour plus d'informations, explorez les autres sections de ce guide.","title":"Conseils"},{"location":"getting-started/interface-overview/","text":"Vue d\u2019Ensemble de l\u2019Interface Utilisateur Introduction Cette section fournit une vue d\u2019ensemble de l\u2019interface utilisateur (UI) de Devaito, con\u00e7ue pour offrir une exp\u00e9rience intuitive et efficace aux d\u00e9veloppeurs, administrateurs et collaborateurs. Voici une explication des principaux \u00e9l\u00e9ments que vous trouverez dans l\u2019interface. Structure Principale En-t\u00eate : Affiche le logo Devaito et la version actuelle (v2.0). Inclut un bouton \"Cr\u00e9er une App\" pour d\u00e9marrer un nouveau projet rapidement. Propose un menu d\u00e9roulant pour les param\u00e8tres et la d\u00e9connexion. Panneau de Navigation Lat\u00e9ral : Contient les sections principales : \"Mes Applications\", \"APIs Disponibles\", et \"Templates & Styles\". Permet un acc\u00e8s rapide aux diff\u00e9rentes fonctionnalit\u00e9s en un seul clic. Tableau de Bord Central : R\u00e9sum\u00e9 : Affiche le nombre total d\u2019applications (ex. 2 Apps), applications en d\u00e9veloppement (ex. 1), d\u00e9ploy\u00e9es (ex. 1), et collaborateurs (ex. 5). Cartes d\u2019Applications : Liste vos applications avec des d\u00e9tails comme le nom, le statut (D\u00e9ploy\u00e9e, En d\u00e9veloppement), la technologie utilis\u00e9e (ex. Next.js, Flutter), et les APIs associ\u00e9es. D\u00e9tails des Applications : Chaque carte montre une br\u00e8ve description, les APIs utilis\u00e9es (ex. Payment API, Analytics API), et des options comme \"Ouvrir l\u2019\u00e9diteur\". Les statuts sont indiqu\u00e9s par des badges color\u00e9s (ex. vert pour D\u00e9ploy\u00e9e, orange pour En d\u00e9veloppement). Fonctionnalit\u00e9s Cl\u00e9s Navigation Intuitive : Passez facilement d\u2019une section \u00e0 l\u2019autre via le panneau lat\u00e9ral. Filtrage et Recherche : Utilisez les ic\u00f4nes ou options de recherche pour trouver rapidement une application ou une API. Actions Rapides : Boutons comme \"Cr\u00e9er une App\" ou \"Ouvrir l\u2019\u00e9diteur\" facilitent la gestion des projets. Conseils d\u2019Utilisation Explorez les cartes d\u2019applications pour un aper\u00e7u rapide de vos projets. Utilisez les badges de statut pour prioriser vos t\u00e2ches. Consultez la section \"APIs Disponibles\" pour d\u00e9couvrir les int\u00e9grations possibles. Pour plus de d\u00e9tails, reportez-vous aux sections suivantes de ce guide.","title":"Interface Overview"},{"location":"getting-started/interface-overview/#vue-densemble-de-linterface-utilisateur","text":"","title":"Vue d\u2019Ensemble de l\u2019Interface Utilisateur"},{"location":"getting-started/interface-overview/#introduction","text":"Cette section fournit une vue d\u2019ensemble de l\u2019interface utilisateur (UI) de Devaito, con\u00e7ue pour offrir une exp\u00e9rience intuitive et efficace aux d\u00e9veloppeurs, administrateurs et collaborateurs. Voici une explication des principaux \u00e9l\u00e9ments que vous trouverez dans l\u2019interface.","title":"Introduction"},{"location":"getting-started/interface-overview/#structure-principale","text":"En-t\u00eate : Affiche le logo Devaito et la version actuelle (v2.0). Inclut un bouton \"Cr\u00e9er une App\" pour d\u00e9marrer un nouveau projet rapidement. Propose un menu d\u00e9roulant pour les param\u00e8tres et la d\u00e9connexion. Panneau de Navigation Lat\u00e9ral : Contient les sections principales : \"Mes Applications\", \"APIs Disponibles\", et \"Templates & Styles\". Permet un acc\u00e8s rapide aux diff\u00e9rentes fonctionnalit\u00e9s en un seul clic. Tableau de Bord Central : R\u00e9sum\u00e9 : Affiche le nombre total d\u2019applications (ex. 2 Apps), applications en d\u00e9veloppement (ex. 1), d\u00e9ploy\u00e9es (ex. 1), et collaborateurs (ex. 5). Cartes d\u2019Applications : Liste vos applications avec des d\u00e9tails comme le nom, le statut (D\u00e9ploy\u00e9e, En d\u00e9veloppement), la technologie utilis\u00e9e (ex. Next.js, Flutter), et les APIs associ\u00e9es. D\u00e9tails des Applications : Chaque carte montre une br\u00e8ve description, les APIs utilis\u00e9es (ex. Payment API, Analytics API), et des options comme \"Ouvrir l\u2019\u00e9diteur\". Les statuts sont indiqu\u00e9s par des badges color\u00e9s (ex. vert pour D\u00e9ploy\u00e9e, orange pour En d\u00e9veloppement).","title":"Structure Principale"},{"location":"getting-started/interface-overview/#fonctionnalites-cles","text":"Navigation Intuitive : Passez facilement d\u2019une section \u00e0 l\u2019autre via le panneau lat\u00e9ral. Filtrage et Recherche : Utilisez les ic\u00f4nes ou options de recherche pour trouver rapidement une application ou une API. Actions Rapides : Boutons comme \"Cr\u00e9er une App\" ou \"Ouvrir l\u2019\u00e9diteur\" facilitent la gestion des projets.","title":"Fonctionnalit\u00e9s Cl\u00e9s"},{"location":"getting-started/interface-overview/#conseils-dutilisation","text":"Explorez les cartes d\u2019applications pour un aper\u00e7u rapide de vos projets. Utilisez les badges de statut pour prioriser vos t\u00e2ches. Consultez la section \"APIs Disponibles\" pour d\u00e9couvrir les int\u00e9grations possibles. Pour plus de d\u00e9tails, reportez-vous aux sections suivantes de ce guide.","title":"Conseils d\u2019Utilisation"},{"location":"getting-started/my-applications/","text":"Mes Applications Introduction Cette section vous pr\u00e9sente la gestion de vos applications au sein de Devaito. Elle vous permet de visualiser, organiser et suivre l\u2019\u00e9tat de toutes les applications que vous avez cr\u00e9\u00e9es ou auxquelles vous contribuez. Vue d\u2019Ensemble Total des Applications : Affiche le nombre total d\u2019applications associ\u00e9es \u00e0 votre compte (ex. 2 Apps). Statuts : Les applications sont cat\u00e9goris\u00e9es en : En d\u00e9veloppement : Applications en cours de cr\u00e9ation (ex. 1). D\u00e9ploy\u00e9es : Applications actives et accessibles (ex. 1). Collaborateurs : Indique le nombre de personnes travaillant sur vos projets (ex. 5). D\u00e9tails des Applications Chaque application est repr\u00e9sent\u00e9e par une carte contenant : Nom : Ex. \"E-commerce Dashboard\" ou \"Mobile Todo App\". Technologie : Ex. Next.js ou Flutter. Statut : Badge indiquant \"D\u00e9ploy\u00e9e\" ou \"En d\u00e9veloppement\". Description : Br\u00e8ve explication, comme \"Tableau de bord pour boutique en ligne avec analytics\". APIs Utilis\u00e9es : Liste des APIs int\u00e9gr\u00e9es (ex. Payment API, Analytics API pour E-commerce Dashboard). Date de Cr\u00e9ation/Mise \u00e0 Jour : Ex. 20/01/2024 ou 22/01/2024. Actions : Bouton \"Ouvrir l\u2019\u00e9diteur\" pour modifier ou continuer le d\u00e9veloppement. Gestion Filtrer : Utilisez les onglets \"Mes Applications\", \"APIs Disponibles\", et \"Templates & Styles\" pour organiser votre vue. Suivi : Consultez les statuts pour prioriser vos t\u00e2ches ou identifier les projets pr\u00eats \u00e0 \u00eatre d\u00e9ploy\u00e9s. Conseils Gardez un \u0153il sur les APIs utilis\u00e9es pour optimiser vos int\u00e9grations. Utilisez les dates pour suivre l\u2019\u00e9volution de vos projets. Pour plus d\u2019options de gestion, explorez la section \"Gestion des Applications\". Pour des informations suppl\u00e9mentaires, consultez les autres sections de ce guide.","title":"My Applications"},{"location":"getting-started/my-applications/#mes-applications","text":"","title":"Mes Applications"},{"location":"getting-started/my-applications/#introduction","text":"Cette section vous pr\u00e9sente la gestion de vos applications au sein de Devaito. Elle vous permet de visualiser, organiser et suivre l\u2019\u00e9tat de toutes les applications que vous avez cr\u00e9\u00e9es ou auxquelles vous contribuez.","title":"Introduction"},{"location":"getting-started/my-applications/#vue-densemble","text":"Total des Applications : Affiche le nombre total d\u2019applications associ\u00e9es \u00e0 votre compte (ex. 2 Apps). Statuts : Les applications sont cat\u00e9goris\u00e9es en : En d\u00e9veloppement : Applications en cours de cr\u00e9ation (ex. 1). D\u00e9ploy\u00e9es : Applications actives et accessibles (ex. 1). Collaborateurs : Indique le nombre de personnes travaillant sur vos projets (ex. 5).","title":"Vue d\u2019Ensemble"},{"location":"getting-started/my-applications/#details-des-applications","text":"Chaque application est repr\u00e9sent\u00e9e par une carte contenant : Nom : Ex. \"E-commerce Dashboard\" ou \"Mobile Todo App\". Technologie : Ex. Next.js ou Flutter. Statut : Badge indiquant \"D\u00e9ploy\u00e9e\" ou \"En d\u00e9veloppement\". Description : Br\u00e8ve explication, comme \"Tableau de bord pour boutique en ligne avec analytics\". APIs Utilis\u00e9es : Liste des APIs int\u00e9gr\u00e9es (ex. Payment API, Analytics API pour E-commerce Dashboard). Date de Cr\u00e9ation/Mise \u00e0 Jour : Ex. 20/01/2024 ou 22/01/2024. Actions : Bouton \"Ouvrir l\u2019\u00e9diteur\" pour modifier ou continuer le d\u00e9veloppement.","title":"D\u00e9tails des Applications"},{"location":"getting-started/my-applications/#gestion","text":"Filtrer : Utilisez les onglets \"Mes Applications\", \"APIs Disponibles\", et \"Templates & Styles\" pour organiser votre vue. Suivi : Consultez les statuts pour prioriser vos t\u00e2ches ou identifier les projets pr\u00eats \u00e0 \u00eatre d\u00e9ploy\u00e9s.","title":"Gestion"},{"location":"getting-started/my-applications/#conseils","text":"Gardez un \u0153il sur les APIs utilis\u00e9es pour optimiser vos int\u00e9grations. Utilisez les dates pour suivre l\u2019\u00e9volution de vos projets. Pour plus d\u2019options de gestion, explorez la section \"Gestion des Applications\". Pour des informations suppl\u00e9mentaires, consultez les autres sections de ce guide.","title":"Conseils"},{"location":"getting-started/quick-start/","text":"Guide Rapide pour Cr\u00e9er une Premi\u00e8re Application Introduction Cette section vous guide pas \u00e0 pas pour cr\u00e9er votre premi\u00e8re application sur Devaito de mani\u00e8re rapide et efficace. \u00c9tapes de Cr\u00e9ation Connexion : Connectez-vous \u00e0 votre compte Devaito. Acc\u00e9der \u00e0 la Cr\u00e9ation : Cliquez sur le bouton \"Cr\u00e9er une App\" dans l\u2019en-t\u00eate. Choisir un Template : S\u00e9lectionnez un template (ex. \"Mobile Todo App\" ou \"E-commerce Dashboard\") dans la liste propos\u00e9e. Configurer l\u2019Application : Donnez un nom \u00e0 votre application (ex. \"Ma Premi\u00e8re App\"). Choisissez la technologie (ex. Next.js ou Flutter). Ajoutez les APIs n\u00e9cessaires (ex. User API, Sync API). \u00c9diter : Cliquez sur \"Ouvrir l\u2019\u00e9diteur\" pour personnaliser le code et le design. Sauvegarder : Enregistrez vos modifications dans l\u2019\u00e9diteur. D\u00e9ployer : Une fois pr\u00eat, utilisez l\u2019option de d\u00e9ploiement pour rendre l\u2019application active. V\u00e9rification V\u00e9rifiez le statut de votre application (passera de \"En d\u00e9veloppement\" \u00e0 \"D\u00e9ploy\u00e9e\" apr\u00e8s d\u00e9ploiement). Testez l\u2019application pour vous assurer que tout fonctionne correctement. Conseils Commencez avec un template simple pour vous familiariser avec l\u2019interface. Consultez les sections \"Gestion des Applications\" et \"APIs Disponibles\" pour des d\u00e9tails suppl\u00e9mentaires. En cas de doute, explorez la FAQ pour des solutions rapides. Pour plus d\u2019assistance, consultez les autres sections de ce guide.","title":"Quick Start Guide"},{"location":"getting-started/quick-start/#guide-rapide-pour-creer-une-premiere-application","text":"","title":"Guide Rapide pour Cr\u00e9er une Premi\u00e8re Application"},{"location":"getting-started/quick-start/#introduction","text":"Cette section vous guide pas \u00e0 pas pour cr\u00e9er votre premi\u00e8re application sur Devaito de mani\u00e8re rapide et efficace.","title":"Introduction"},{"location":"getting-started/quick-start/#etapes-de-creation","text":"Connexion : Connectez-vous \u00e0 votre compte Devaito. Acc\u00e9der \u00e0 la Cr\u00e9ation : Cliquez sur le bouton \"Cr\u00e9er une App\" dans l\u2019en-t\u00eate. Choisir un Template : S\u00e9lectionnez un template (ex. \"Mobile Todo App\" ou \"E-commerce Dashboard\") dans la liste propos\u00e9e. Configurer l\u2019Application : Donnez un nom \u00e0 votre application (ex. \"Ma Premi\u00e8re App\"). Choisissez la technologie (ex. Next.js ou Flutter). Ajoutez les APIs n\u00e9cessaires (ex. User API, Sync API). \u00c9diter : Cliquez sur \"Ouvrir l\u2019\u00e9diteur\" pour personnaliser le code et le design. Sauvegarder : Enregistrez vos modifications dans l\u2019\u00e9diteur. D\u00e9ployer : Une fois pr\u00eat, utilisez l\u2019option de d\u00e9ploiement pour rendre l\u2019application active.","title":"\u00c9tapes de Cr\u00e9ation"},{"location":"getting-started/quick-start/#verification","text":"V\u00e9rifiez le statut de votre application (passera de \"En d\u00e9veloppement\" \u00e0 \"D\u00e9ploy\u00e9e\" apr\u00e8s d\u00e9ploiement). Testez l\u2019application pour vous assurer que tout fonctionne correctement.","title":"V\u00e9rification"},{"location":"getting-started/quick-start/#conseils","text":"Commencez avec un template simple pour vous familiariser avec l\u2019interface. Consultez les sections \"Gestion des Applications\" et \"APIs Disponibles\" pour des d\u00e9tails suppl\u00e9mentaires. En cas de doute, explorez la FAQ pour des solutions rapides. Pour plus d\u2019assistance, consultez les autres sections de ce guide.","title":"Conseils"}]}