{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Devaito Developer Guide","text":"<p>Welcome to the Devaito Developer Guide! This guide helps you create, test, and publish applications for the Devaito ecosystem\u2014a SaaS platform dedicated to website creation.</p>"},{"location":"#what-is-devaito","title":"What is Devaito?","text":"<p>Devaito is a SaaS platform for building websites. It allows users to design, customize, and manage their sites easily with accessible tools and powerful integrations.</p> <p>With Devaito, you can: - Create apps to add features (e-commerce, analytics, etc.) to Devaito websites. - Monetize your apps with flexible pricing models (subscriptions, one-time payments). - Reach thousands of website owners through the Devaito App Store.</p>"},{"location":"#why-develop-for-devaito","title":"Why develop for Devaito?","text":"<p>As a developer, Devaito offers:</p> <ul> <li>Powerful APIs: Use REST APIs to access data, automate tasks, and integrate new features into the platform.</li> <li>Easy integration: Connect your apps to Devaito sites and interact with the ecosystem using documented endpoints.</li> <li>Quick start: Follow this guide to start developing and publishing your own apps.</li> </ul>"},{"location":"#how-this-guide-is-organized","title":"How this guide is organized","text":"<p>This guide covers everything you need to build a Devaito app, step by step:</p> <ol> <li>Getting Started: Set up your environment and create a developer account.</li> <li>APIs: Learn to use Devaito APIs to access site data.</li> <li>Testing: Test your apps locally and in a sandbox environment.</li> <li>Publishing: Submit your app to the Devaito App Store.</li> <li>Resources: Find API references, support, and community links.</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin: 1. Create a developer account on the Devaito platform. 2. Check the Getting Started section to set up your environment. 3. Explore the API documentation to integrate your features.</p>"},{"location":"#ready-to-get-started","title":"Ready to get started?","text":"<p>Jump into Getting Started and build your first Devaito app today! \ud83d\ude80</p> <p>Devaito Developer Guide, powered by passion and code.</p>"},{"location":"api-management/list/","title":"List of Available APIs and Their Description","text":""},{"location":"api-management/list/#introduction","title":"Introduction","text":"<p>This section provides a detailed list of the APIs available on Devaito (SaaS multi-tenant version). Each API covers features for content management, e-commerce, social media, and customization.</p> <p>Main server: <code>https://admin.devaito.com/api</code></p>"},{"location":"api-management/list/#1-authentication-api","title":"1. Authentication API","text":"<ul> <li>Description: Manages user authentication and session handling.</li> <li>Endpoints:</li> <li><code>/login</code> \u2192 User login</li> <li><code>/logout</code> \u2192 User logout</li> <li>Usage: Secures access and generates a Bearer token for all authenticated operations.</li> </ul>"},{"location":"api-management/list/#2-user-api","title":"2. User API","text":"<ul> <li>Description: Retrieves user and store information.</li> <li>Endpoint: <code>/user</code></li> <li>Usage : Obtenir le profil, avatar, type de site (ecommerce, vitrine, etc.).</li> </ul>"},{"location":"api-management/list/#3-products-api","title":"3. Products API","text":"<ul> <li>Description: Manages products and product details.</li> <li>Endpoints:</li> <li><code>/fetch-all-products</code> \u2192 Get all products</li> <li><code>/get-product/{slug}</code> \u2192 Get product details by slug</li> <li><code>/popular-products</code> \u2192 Get popular products</li> <li>Utilisation : Afficher produits, images, prix, promotions.</li> </ul>"},{"location":"api-management/list/#4-orders-api","title":"4. Orders API","text":"<ul> <li>Description: Handles order management.</li> <li>Endpoint: <code>/get-all-orders</code></li> <li>Utilisation : Suivi des commandes en livraison.</li> </ul>"},{"location":"api-management/list/#5-categories-api","title":"5. Categories API","text":"<ul> <li>Description: Manages product categories.</li> <li>Endpoints:</li> <li><code>/categories</code> (GET, POST, PUT, DELETE)</li> <li><code>/categories/{id}</code></li> <li><code>/fetch-categories</code></li> <li><code>/fetch-categories-product/{permalink}</code></li> <li>Utilisation : Filtrage et navigation produit.</li> </ul>"},{"location":"api-management/list/#6-campaigns-api","title":"6. Campaigns API","text":"<ul> <li>Description: Manages marketing campaigns.</li> <li>Endpoints:</li> <li><code>/campaigns</code> (GET, POST)</li> <li><code>/campaigns/{id}</code> (GET, PUT, DELETE)</li> <li>Utilisation : Cr\u00e9er, planifier et g\u00e9rer des campagnes.</li> </ul>"},{"location":"api-management/list/#7-posts-api","title":"7. Posts API","text":"<ul> <li>Description: Handles posts and job-related actions.</li> <li>Endpoints:</li> <li><code>/posts</code> (GET, POST)</li> <li><code>/posts/{id}</code> (GET, PUT, DELETE)</li> <li><code>/posts/{id}/{job_id}</code></li> <li>Utilisation : Publier et g\u00e9rer du contenu li\u00e9 au store.</li> </ul>"},{"location":"api-management/list/#8-social-media-apis","title":"8. Social Media APIs","text":""},{"location":"api-management/list/#a-facebook-api","title":"a. Facebook API","text":"<ul> <li>Endpoints:</li> <li><code>/facebook/pages</code></li> <li><code>/facebook/publish-post</code></li> <li><code>/facebook/publish-post-job</code></li> <li>Utilisation : Int\u00e9gration avec les pages Facebook de l\u2019utilisateur.</li> </ul>"},{"location":"api-management/list/#b-instagram-api","title":"b. Instagram API","text":"<ul> <li>Endpoints:</li> <li><code>/instagram/publish-post</code></li> <li><code>/instagram/publish-post-job</code></li> <li>Utilisation : Poster du contenu sur Instagram via pages li\u00e9es \u00e0 Facebook.</li> </ul>"},{"location":"api-management/list/#c-platform-connections-api","title":"c. Platform Connections API","text":"<ul> <li>Endpoint: <code>/platform-connections</code></li> <li>Utilisation : Voir les comptes sociaux connect\u00e9s.</li> </ul>"},{"location":"api-management/list/#9-templates-api","title":"9. Templates API","text":"<ul> <li>Description: Manages templates for apps and sites.</li> <li>Endpoints:</li> <li><code>/templates</code> (GET, POST)</li> <li><code>/templates/{id}</code> (GET, PUT, DELETE)</li> <li>Utilisation : Cr\u00e9er et r\u00e9utiliser des mod\u00e8les pour publications.</li> </ul>"},{"location":"api-management/list/#10-platforms-api","title":"10. Platforms API","text":"<ul> <li>Description: Manages platforms and integrations.</li> <li>Endpoints:</li> <li><code>/platforms</code> (GET, POST)</li> <li><code>/platforms/{id}</code> (GET, PUT, DELETE)</li> <li>Utilisation : D\u00e9finir les plateformes sociales ou de publication.</li> </ul>"},{"location":"api-management/list/#11-resolutions-api","title":"11. Resolutions API","text":"<ul> <li>Description: Handles image/video resolutions.</li> <li>Endpoints:</li> <li><code>/resolutions</code> (GET, POST)</li> <li><code>/resolutions/{id}</code> (GET, PUT, DELETE)</li> <li>Utilisation : D\u00e9finir formats d\u2019images/vid\u00e9os adapt\u00e9s aux plateformes.</li> </ul>"},{"location":"api-management/list/#12-gallery-media-apis","title":"12. Gallery &amp; Media APIs","text":"<ul> <li>Description: Manages media files and galleries.</li> <li>Endpoints:</li> <li><code>/gallery-store</code></li> <li><code>/image-gallery</code></li> <li><code>/video-gallery</code></li> <li><code>/save-image</code></li> <li><code>/save-video</code></li> <li>Utilisation : Centraliser les m\u00e9dias du store.</li> </ul>"},{"location":"api-management/list/#13-store-settings-apis","title":"13. Store Settings APIs","text":"<ul> <li>Description: Manages store configuration and appearance.</li> <li>Endpoints:</li> <li><code>/get-store-prompt</code></li> <li><code>/get-store-language</code></li> <li><code>/fonts-and-colors</code></li> <li>Utilisation : Branding et customisation du site.</li> </ul>"},{"location":"api-management/list/#14-content-generator-api","title":"14. Content Generator API","text":"<ul> <li>Description: Generates content using AI.</li> <li>Endpoint: <code>/content-generator</code></li> </ul>"},{"location":"api-management/usage/","title":"How to Connect/Use Devaito APIs","text":""},{"location":"api-management/usage/#introduction","title":"Introduction","text":"<p>This guide explains step by step how to integrate and use Devaito APIs (SaaS multi-tenant version) for any type of application\u2014whether you are building a login system, a plugin, an e-commerce feature, or any other app for the Devaito platform. You will find code examples, best practices, and essential steps for each API.</p> <p>Base URL: <code>https://admin.devaito.com/api</code></p>"},{"location":"api-management/usage/#about-devaito-apis","title":"About Devaito APIs","text":"<p>Devaito provides a set of RESTful APIs that let you build, extend, and customize any application or plugin for the platform. These APIs cover authentication, user management, products, orders, categories, campaigns, posts, social media, templates, media galleries, store settings, and AI-powered content generation.</p> <p>Below, you'll find grouped code samples for the most popular frameworks. Each section starts with a short description of the API, then shows how to use it in React, Flutter, Vue.js, and more.</p>"},{"location":"api-management/usage/#react","title":"React","text":"<p>React is a popular JavaScript library for building user interfaces. Below are examples of how to interact with Devaito APIs in a React project. Each API section includes a short description to help you understand its purpose.</p>"},{"location":"api-management/usage/#authentication-api","title":"Authentication API","text":"<p>Purpose: Authentication APIs allow you to log users in and out of your app, and securely manage their session tokens. Use these endpoints to enable user access and protect private data.</p> <pre><code>// Login\nconst login = async (email, password) =&gt; {\n  const response = await fetch('https://admin.devaito.com/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password })\n  });\n  const result = await response.json();\n  if (response.ok &amp;&amp; result.token) {\n    localStorage.setItem('authToken', result.token);\n  }\n  return result;\n}\n\n// Logout\nconst logout = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/logout', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.ok) localStorage.removeItem('authToken');\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#user-api","title":"User API","text":"<p>Purpose: The User API lets you fetch information about the current user and their store. Use this to display user profiles, store settings, or personalize the app experience.</p> <pre><code>const getUser = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/user', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#products-api","title":"Products API","text":"<p>Purpose: Products APIs allow you to list, search, and view details about products in the store. Use these endpoints to build product listings, detail pages, or analytics features.</p> <pre><code>const getProducts = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-all-products', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nconst getProduct = async (slug) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.status === 404) {\n    throw new Error('Product not found');\n  }\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api","title":"Orders API","text":"<p>Purpose: Orders APIs let you retrieve and manage orders placed in the store. Use these endpoints to display order history, track fulfillment, or build dashboards.</p> <pre><code>const getOrders = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/get-all-orders', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api","title":"Categories API","text":"<p>Purpose: Categories APIs help you organize products and content by category. Use these endpoints to build category navigation, filters, or category-based analytics.</p> <pre><code>const getCategories = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-categories', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nconst getProductsByCategory = async (permalink) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api","title":"Campaigns API","text":"<p>Purpose: Campaigns APIs allow you to create and manage marketing campaigns. Use these endpoints to automate promotions, notifications, or scheduled events.</p> <pre><code>const createCampaign = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/campaigns', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api","title":"Posts API","text":"<p>Purpose: Posts APIs let you create and manage content posts for blogs, news, or announcements. Use these endpoints to build content management features or automate publishing.</p> <pre><code>const createPost = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/posts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis","title":"Social Media APIs","text":"<p>Purpose: Social Media APIs allow you to publish and schedule posts to platforms like Facebook and Instagram. Use these endpoints to automate social media marketing or connect your store to social accounts.</p> <pre><code>const publishFacebookPost = async (pageIds, caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ page_id: pageIds, caption, imageUrl })\n  });\n  return await response.json();\n}\n\nconst publishInstagramPost = async (caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ caption, imageUrl })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api","title":"Templates API","text":"<p>Purpose: Templates APIs let you fetch and manage design templates for your store or app. Use these endpoints to offer template selection or customization features.</p> <pre><code>const getTemplates = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/templates', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api","title":"Gallery &amp; Media API","text":"<p>Purpose: Gallery &amp; Media APIs help you upload and manage images, videos, and other media files. Use these endpoints to build galleries, portfolios, or media management tools.</p> <pre><code>const uploadImage = async (file) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch('https://admin.devaito.com/api/save-image', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` },\n    body: formData\n  });\n  return await response.json();\n}\n\nconst getImageGallery = async (page = 1) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api","title":"Store Settings API","text":"<p>Purpose: Store Settings APIs allow you to fetch and update store appearance, language, and configuration. Use these endpoints to build customization features for store owners.</p> <pre><code>const getFontsAndColors = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api","title":"Content Generator API","text":"<p>Purpose: The Content Generator API lets you use AI to generate content for your store or app. Use this endpoint to automate product descriptions, blog posts, or marketing copy.</p> <pre><code>const generateContent = async (message) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/content-generator', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ message })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#flutter-dart","title":"Flutter (Dart)","text":"<p>Flutter is a cross-platform framework for building mobile apps. Here are examples for using Devaito APIs in Flutter.</p>"},{"location":"api-management/usage/#authentication-api_1","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your mobile app.</p> <pre><code>Future&lt;String?&gt; login(String email, String password) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/login'),\n    headers: { 'Content-Type': 'application/json' },\n    body: jsonEncode({ 'email': email, 'password': password }),\n  );\n  final result = jsonDecode(response.body);\n  if (response.statusCode == 200 &amp;&amp; result['token'] != null) {\n    return result['token'];\n  }\n  return null;\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; logout(String token) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/logout'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_1","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getUser(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/user'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#products-api_1","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getProducts(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-all-products'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getProduct(String token, String slug) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/get-product/$slug'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  if (response.statusCode == 404) {\n    throw Exception('Product not found');\n  }\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api_1","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getOrders(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/get-all-orders'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api_1","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getCategories(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-categories'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getProductsByCategory(String token, String permalink) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-categories-product/$permalink'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_1","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; createCampaign(String token, Map&lt;String, dynamic&gt; data) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/campaigns'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(data),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api_1","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; createPost(String token, Map&lt;String, dynamic&gt; data) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/posts'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(data),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_1","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; publishFacebookPost(String token, List&lt;String&gt; pageIds, String caption, String imageUrl) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/facebook/publish-post'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'page_id': pageIds, 'caption': caption, 'imageUrl': imageUrl }),\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; publishInstagramPost(String token, String caption, String imageUrl) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/instagram/publish-post'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'caption': caption, 'imageUrl': imageUrl }),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api_1","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getTemplates(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/templates'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_1","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your app.</p> <pre><code>import 'package:http/http.dart' as http;\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; uploadImage(String token, String filePath) async {\n  var request = http.MultipartRequest(\n    'POST',\n    Uri.parse('https://admin.devaito.com/api/save-image'),\n  );\n  request.headers['Authorization'] = 'Bearer $token';\n  request.files.add(await http.MultipartFile.fromPath('file', filePath));\n  final response = await request.send();\n  final respStr = await response.stream.bytesToString();\n  return jsonDecode(respStr);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getImageGallery(String token, int page) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/image-gallery?page=$page'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_1","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getFontsAndColors(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fonts-and-colors'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_1","title":"Content Generator API","text":"<p>Purpose: Generate content using AI in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; generateContent(String token, String message) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/content-generator'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'message': message }),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#vuejs","title":"Vue.js","text":"<p>Vue.js is a progressive JavaScript framework for building user interfaces. Below are examples for using Devaito APIs in Vue.js.</p>"},{"location":"api-management/usage/#authentication-api_2","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your Vue app.</p> <pre><code>async function login(email, password) {\n  const response = await fetch('https://admin.devaito.com/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password })\n  });\n  const result = await response.json();\n  if (response.ok &amp;&amp; result.token) {\n    authToken.value = result.token;\n    localStorage.setItem('authToken', result.token);\n  }\n  return result;\n}\n\nasync function logout() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/logout', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.ok) localStorage.removeItem('authToken');\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_2","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>async function getUser() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/user', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#products-api_2","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code>async function getProducts() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-all-products', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nasync function getProduct(slug) {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.status === 404) {\n    throw new Error('Product not found');\n  }\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api_2","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your app.</p> <pre><code>async function getOrders() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/get-all-orders', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api_2","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your app.</p> <pre><code>async function getCategories() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-categories', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nasync function getProductsByCategory(permalink) {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_2","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your app.</p> <pre><code>const createCampaign = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/campaigns', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api_2","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your app.</p> <pre><code>const createPost = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/posts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_2","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your app.</p> <pre><code>const publishFacebookPost = async (pageIds, caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ page_id: pageIds, caption, imageUrl })\n  });\n  return await response.json();\n}\n\nconst publishInstagramPost = async (caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ caption, imageUrl })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api_2","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your app.</p> <pre><code>const getTemplates = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/templates', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_2","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your app.</p> <pre><code>const uploadImage = async (file) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch('https://admin.devaito.com/api/save-image', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` },\n    body: formData\n  });\n  return await response.json();\n}\n\nconst getImageGallery = async (page = 1) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_2","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your app.</p> <pre><code>const getFontsAndColors = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_2","title":"Content Generator API","text":"<p>Purpose: The Content Generator API lets you use AI to generate content for your store or app. Use this endpoint to automate product descriptions, blog posts, or marketing copy.</p> <pre><code>const generateContent = async (message) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/content-generator', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ message })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#flutter-dart_1","title":"Flutter (Dart)","text":"<p>Flutter is a cross-platform framework for building mobile apps. Here are examples for using Devaito APIs in Flutter.</p>"},{"location":"api-management/usage/#authentication-api_3","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your mobile app.</p> <pre><code>Future&lt;String?&gt; login(String email, String password) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/login'),\n    headers: { 'Content-Type': 'application/json' },\n    body: jsonEncode({ 'email': email, 'password': password }),\n  );\n  final result = jsonDecode(response.body);\n  if (response.statusCode == 200 &amp;&amp; result['token'] != null) {\n    return result['token'];\n  }\n  return null;\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; logout(String token) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/logout'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_3","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getUser(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/user'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#products-api_3","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getProducts(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-all-products'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getProduct(String token, String slug) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/get-product/$slug'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  if (response.statusCode == 404) {\n    throw Exception('Product not found');\n  }\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api_3","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getOrders(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/get-all-orders'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api_3","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getCategories(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-categories'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getProductsByCategory(String token, String permalink) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-categories-product/$permalink'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_3","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; createCampaign(String token, Map&lt;String, dynamic&gt; data) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/campaigns'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(data),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api_3","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; createPost(String token, Map&lt;String, dynamic&gt; data) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/posts'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(data),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_3","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; publishFacebookPost(String token, List&lt;String&gt; pageIds, String caption, String imageUrl) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/facebook/publish-post'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'page_id': pageIds, 'caption': caption, 'imageUrl': imageUrl }),\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; publishInstagramPost(String token, String caption, String imageUrl) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/instagram/publish-post'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'caption': caption, 'imageUrl': imageUrl }),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api_3","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getTemplates(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/templates'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_3","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; uploadImage(String token, String filePath) async {\n  var request = http.MultipartRequest(\n    'POST',\n    Uri.parse('https://admin.devaito.com/api/save-image'),\n  );\n  request.headers['Authorization'] = 'Bearer $token';\n  request.files.add(await http.MultipartFile.fromPath('file', filePath));\n  final response = await request.send();\n  final respStr = await response.stream.bytesToString();\n  return jsonDecode(respStr);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getImageGallery(String token, int page) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/image-gallery?page=$page'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_3","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getFontsAndColors(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fonts-and-colors'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_3","title":"Content Generator API","text":"<p>Purpose: Generate content using AI in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; generateContent(String token, String message) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/content-generator'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'message': message }),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#vuejs_1","title":"Vue.js","text":"<p>Vue.js is a progressive JavaScript framework for building user interfaces. Below are examples for using Devaito APIs in Vue.js.</p>"},{"location":"api-management/usage/#authentication-api_4","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your Vue app.</p> <pre><code>async function login(email, password) {\n  const response = await fetch('https://admin.devaito.com/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password })\n  });\n  const result = await response.json();\n  if (response.ok &amp;&amp; result.token) {\n    authToken.value = result.token;\n    localStorage.setItem('authToken', result.token);\n  }\n  return result;\n}\n\nasync function logout() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/logout', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.ok) localStorage.removeItem('authToken');\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_4","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>async function getUser() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/user', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#products-api_4","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code>async function getProducts() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-all-products', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nasync function getProduct(slug) {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.status === 404) {\n    throw new Error('Product not found');\n  }\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api_4","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your app.</p> <pre><code>async function getOrders() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/get-all-orders', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api_4","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your app.</p> <pre><code>async function getCategories() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-categories', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nasync function getProductsByCategory(permalink) {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_4","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your app.</p> <pre><code>const createCampaign = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/campaigns', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api_4","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your app.</p> <pre><code>const createPost = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/posts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_4","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your app.</p> <pre><code>const publishFacebookPost = async (pageIds, caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ page_id: pageIds, caption, imageUrl })\n  });\n  return await response.json();\n}\n\nconst publishInstagramPost = async (caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ caption, imageUrl })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api_4","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your app.</p> <pre><code>const getTemplates = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/templates', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_4","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your app.</p> <pre><code>const uploadImage = async (file) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch('https://admin.devaito.com/api/save-image', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` },\n    body: formData\n  });\n  return await response.json();\n}\n\nconst getImageGallery = async (page = 1) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_4","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your app.</p> <pre><code>const getFontsAndColors = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_4","title":"Content Generator API","text":"<p>Purpose: The Content Generator API lets you use AI to generate content for your store or app. Use this endpoint to automate product descriptions, blog posts, or marketing copy.</p> <pre><code>const generateContent = async (message) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/content-generator', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ message })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#flutter-dart_2","title":"Flutter (Dart)","text":"<p>Flutter is a cross-platform framework for building mobile apps. Here are examples for using Devaito APIs in Flutter.</p>"},{"location":"api-management/usage/#authentication-api_5","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your mobile app.</p> <pre><code>Future&lt;String?&gt; login(String email, String password) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/login'),\n    headers: { 'Content-Type': 'application/json' },\n    body: jsonEncode({ 'email': email, 'password': password }),\n  );\n  final result = jsonDecode(response.body);\n  if (response.statusCode == 200 &amp;&amp; result['token'] != null) {\n    return result['token'];\n  }\n  return null;\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; logout(String token) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/logout'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_5","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getUser(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/user'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#products-api_5","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getProducts(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-all-products'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getProduct(String token, String slug) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/get-product/$slug'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  if (response.statusCode == 404) {\n    throw Exception('Product not found');\n  }\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api_5","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getOrders(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/get-all-orders'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api_5","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getCategories(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-categories'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getProductsByCategory(String token, String permalink) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fetch-categories-product/$permalink'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_5","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; createCampaign(String token, Map&lt;String, dynamic&gt; data) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/campaigns'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(data),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api_5","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; createPost(String token, Map&lt;String, dynamic&gt; data) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/posts'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(data),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_5","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; publishFacebookPost(String token, List&lt;String&gt; pageIds, String caption, String imageUrl) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/facebook/publish-post'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'page_id': pageIds, 'caption': caption, 'imageUrl': imageUrl }),\n  );\n  return jsonDecode(response.body);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; publishInstagramPost(String token, String caption, String imageUrl) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/instagram/publish-post'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'caption': caption, 'imageUrl': imageUrl }),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api_5","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getTemplates(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/templates'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_5","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; uploadImage(String token, String filePath) async {\n  var request = http.MultipartRequest(\n    'POST',\n    Uri.parse('https://admin.devaito.com/api/save-image'),\n  );\n  request.headers['Authorization'] = 'Bearer $token';\n  request.files.add(await http.MultipartFile.fromPath('file', filePath));\n  final response = await request.send();\n  final respStr = await response.stream.bytesToString();\n  return jsonDecode(respStr);\n}\n\nFuture&lt;Map&lt;String, dynamic&gt;&gt; getImageGallery(String token, int page) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/image-gallery?page=$page'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_5","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; getFontsAndColors(String token) async {\n  final response = await http.get(\n    Uri.parse('https://admin.devaito.com/api/fonts-and-colors'),\n    headers: { 'Authorization': 'Bearer $token' },\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_5","title":"Content Generator API","text":"<p>Purpose: Generate content using AI in your mobile app.</p> <pre><code>Future&lt;Map&lt;String, dynamic&gt;&gt; generateContent(String token, String message) async {\n  final response = await http.post(\n    Uri.parse('https://admin.devaito.com/api/content-generator'),\n    headers: {\n      'Authorization': 'Bearer $token',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode({ 'message': message }),\n  );\n  return jsonDecode(response.body);\n}\n</code></pre>"},{"location":"api-management/usage/#vuejs_2","title":"Vue.js","text":"<p>Vue.js is a progressive JavaScript framework for building user interfaces. Below are examples for using Devaito APIs in Vue.js.</p>"},{"location":"api-management/usage/#authentication-api_6","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your Vue app.</p> <pre><code>async function login(email, password) {\n  const response = await fetch('https://admin.devaito.com/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password })\n  });\n  const result = await response.json();\n  if (response.ok &amp;&amp; result.token) {\n    authToken.value = result.token;\n    localStorage.setItem('authToken', result.token);\n  }\n  return result;\n}\n\nasync function logout() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/logout', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.ok) localStorage.removeItem('authToken');\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_6","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>async function getUser() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/user', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#products-api_6","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code>async function getProducts() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-all-products', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nasync function getProduct(slug) {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  if (response.status === 404) {\n    throw new Error('Product not found');\n  }\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#orders-api_6","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your app.</p> <pre><code>async function getOrders() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/get-all-orders', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#categories-api_6","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your app.</p> <pre><code>async function getCategories() {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fetch-categories', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n\nasync function getProductsByCategory(permalink) {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_6","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your app.</p> <pre><code>const createCampaign = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/campaigns', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#posts-api_6","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your app.</p> <pre><code>const createPost = async (data) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/posts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_6","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your app.</p> <pre><code>const publishFacebookPost = async (pageIds, caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ page_id: pageIds, caption, imageUrl })\n  });\n  return await response.json();\n}\n\nconst publishInstagramPost = async (caption, imageUrl) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ caption, imageUrl })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#templates-api_6","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your app.</p> <pre><code>const getTemplates = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/templates', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_6","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your app.</p> <pre><code>const uploadImage = async (file) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch('https://admin.devaito.com/api/save-image', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token}` },\n    body: formData\n  });\n  return await response.json();\n}\n\nconst getImageGallery = async (page = 1) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`, {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_6","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your app.</p> <pre><code>const getFontsAndColors = async () =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_6","title":"Content Generator API","text":"<p>Purpose: The Content Generator API lets you use AI to generate content for your store or app. Use this endpoint to automate product descriptions, blog posts, or marketing copy.</p> <pre><code>const generateContent = async (message) =&gt; {\n  const token = localStorage.getItem('authToken');\n  const response = await fetch('https://admin.devaito.com/api/content-generator', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ message })\n  });\n  return await response.json();\n}\n</code></pre>"},{"location":"api-management/usage/#php-laravel","title":"PHP (Laravel)","text":"<p>Laravel is a popular PHP framework for building web applications. Below are examples for using Devaito APIs in a Laravel project.</p>"},{"location":"api-management/usage/#authentication-api_7","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your Laravel app.</p> <pre><code>// Login example using Guzzle HTTP client\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client-&gt;post('https://admin.devaito.com/api/login', [\n    'json' =&gt; [\n        'email' =&gt; $email,\n        'password' =&gt; $password\n    ]\n]);\n$result = json_decode($response-&gt;getBody(), true);\nif (isset($result['token'])) {\n    // Store token in session or database\n}\n</code></pre>"},{"location":"api-management/usage/#user-api_7","title":"User API","text":"<pre><code>uri = URI('https://admin.devaito.com/api/user')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nuser = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#products-api_7","title":"Products API","text":"<pre><code>// Get all products\n$response = $client-&gt;get('https://admin.devaito.com/api/fetch-all-products', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$products = json_decode($response-&gt;getBody(), true);\n\n// Get product by slug\n$slug = 'your-product-slug';\n$response = $client-&gt;get(\"https://admin.devaito.com/api/get-product/$slug\", [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$product = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#orders-api_7","title":"Orders API","text":"<pre><code>uri = URI('https://admin.devaito.com/api/get-all-orders')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\norders = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#categories-api_7","title":"Categories API","text":"<pre><code>$response = $client-&gt;get('https://admin.devaito.com/api/fetch-categories', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$categories = json_decode($response-&gt;getBody(), true);\n\n$permalink = 'your-category-permalink';\n$response = $client-&gt;get(\"https://admin.devaito.com/api/fetch-categories-product/$permalink\", [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$categoryProducts = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_7","title":"Campaigns API","text":"<pre><code>$response = $client-&gt;post('https://admin.devaito.com/api/campaigns', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token,\n        'Content-Type' =&gt; 'application/json'\n    ],\n    'json' =&gt; [\n        // your campaign data here\n    ]\n]);\n$campaign = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#posts-api_7","title":"Posts API","text":"<pre><code>$response = $client-&gt;post('https://admin.devaito.com/api/posts', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token,\n        'Content-Type' =&gt; 'application/json'\n    ],\n    'json' =&gt; [\n        // your post data here\n    ]\n]);\n$post = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_7","title":"Social Media APIs","text":"<pre><code>// Publish Facebook post\n$response = $client-&gt;post('https://admin.devaito.com/api/facebook/publish-post', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token,\n        'Content-Type' =&gt; 'application/json'\n    ],\n    'json' =&gt; [\n        'page_id' =&gt; ['your-page-id'],\n        'caption' =&gt; 'Your caption',\n        'imageUrl' =&gt; 'https://example.com/image.jpg'\n    ]\n]);\n$fbResult = json_decode($response-&gt;getBody(), true);\n\n// Publish Instagram post\n$response = $client-&gt;post('https://admin.devaito.com/api/instagram/publish-post', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token,\n        'Content-Type' =&gt; 'application/json'\n    ],\n    'json' =&gt; [\n        'caption' =&gt; 'Your caption',\n        'imageUrl' =&gt; 'https://example.com/image.jpg'\n    ]\n]);\n$igResult = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#templates-api_7","title":"Templates API","text":"<pre><code>$response = $client-&gt;get('https://admin.devaito.com/api/templates', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$templates = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_7","title":"Gallery &amp; Media API","text":"<pre><code>// Upload image (using Guzzle's multipart)\n$response = $client-&gt;post('https://admin.devaito.com/api/save-image', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ],\n    'multipart' =&gt; [\n        [\n            'name'     =&gt; 'file',\n            'contents' =&gt; fopen('/path/to/image.jpg', 'r')\n        ]\n    ]\n]);\n$imageUpload = json_decode($response-&gt;getBody(), true);\n\n// Get image gallery\n$response = $client-&gt;get('https://admin.devaito.com/api/image-gallery?page=1', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$imageGallery = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_7","title":"Store Settings API","text":"<pre><code>$response = $client-&gt;get('https://admin.devaito.com/api/fonts-and-colors', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token\n    ]\n]);\n$fontsColors = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_7","title":"Content Generator API","text":"<pre><code>$response = $client-&gt;post('https://admin.devaito.com/api/content-generator', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer ' . $token,\n        'Content-Type' =&gt; 'application/json'\n    ],\n    'json' =&gt; [\n        'message' =&gt; 'Generate a product description for a new shoe.'\n    ]\n]);\n$content = json_decode($response-&gt;getBody(), true);\n</code></pre>"},{"location":"api-management/usage/#ruby-rails","title":"Ruby (Rails)","text":"<p>Ruby on Rails is a dynamic web framework. Below are examples for using Devaito APIs in a Rails project. Each API section includes a short description to help you understand its purpose.</p>"},{"location":"api-management/usage/#authentication-api_8","title":"Authentication API","text":"<p>Purpose: Authenticate users and manage sessions in your Rails app.</p> <pre><code>require 'net/http'\nrequire 'json'\n\n# Login\nuri = URI('https://admin.devaito.com/api/login')\nres = Net::HTTP.post(uri, { email: email, password: password }.to_json, \"Content-Type\" =&gt; \"application/json\")\nresult = JSON.parse(res.body)\ntoken = result[\"token\"] if result[\"token\"]\n\n# Logout\nuri = URI('https://admin.devaito.com/api/logout')\nreq = Net::HTTP::Post.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nlogout_result = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#user-api_8","title":"User API","text":"<p>Purpose: Fetch user and store information for profile screens or personalization.</p> <pre><code>uri = URI('https://admin.devaito.com/api/user')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nuser = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#products-api_8","title":"Products API","text":"<p>Purpose: List products and show product details in your app.</p> <pre><code># Get all products\nuri = URI('https://admin.devaito.com/api/fetch-all-products')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nproducts = JSON.parse(res.body)\n\n# Get product by slug\nslug = 'your-product-slug'\nuri = URI(\"https://admin.devaito.com/api/get-product/#{slug}\")\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nproduct = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#orders-api_8","title":"Orders API","text":"<p>Purpose: Retrieve and manage orders in your app.</p> <pre><code>uri = URI('https://admin.devaito.com/api/get-all-orders')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\norders = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#categories-api_8","title":"Categories API","text":"<p>Purpose: Organize products and content by category in your app.</p> <pre><code># Get categories\nuri = URI('https://admin.devaito.com/api/fetch-categories')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\ncategories = JSON.parse(res.body)\n\n# Get products by category\npermalink = 'your-category-permalink'\nuri = URI(\"https://admin.devaito.com/api/fetch-categories-product/#{permalink}\")\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\ncategory_products = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#campaigns-api_8","title":"Campaigns API","text":"<p>Purpose: Create and manage marketing campaigns in your app.</p> <pre><code>uri = URI('https://admin.devaito.com/api/campaigns')\nreq = Net::HTTP::Post.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nreq['Content-Type'] = \"application/json\"\nreq.body = { /* your campaign data here */ }.to_json\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\ncampaign = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#posts-api_8","title":"Posts API","text":"<p>Purpose: Create and manage content posts in your app.</p> <pre><code>uri = URI('https://admin.devaito.com/api/posts')\nreq = Net::HTTP::Post.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nreq['Content-Type'] = \"application/json\"\nreq.body = { /* your post data here */ }.to_json\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\npost = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#social-media-apis_8","title":"Social Media APIs","text":"<p>Purpose: Publish and schedule posts to social media platforms from your app.</p> <pre><code># Publish Facebook post\nuri = URI('https://admin.devaito.com/api/facebook/publish-post')\nreq = Net::HTTP::Post.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nreq['Content-Type'] = \"application/json\"\nreq.body = {\n  page_id: ['your-page-id'],\n  caption: 'Your caption',\n  imageUrl: 'https://example.com/image.jpg'\n}.to_json\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nfb_result = JSON.parse(res.body)\n\n# Publish Instagram post\nuri = URI('https://admin.devaito.com/api/instagram/publish-post')\nreq = Net::HTTP::Post.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nreq['Content-Type'] = \"application/json\"\nreq.body = {\n  caption: 'Your caption',\n  imageUrl: 'https://example.com/image.jpg'\n}.to_json\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nig_result = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#templates-api_8","title":"Templates API","text":"<p>Purpose: Fetch and manage design templates in your app.</p> <pre><code>uri = URI('https://admin.devaito.com/api/templates')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\ntemplates = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#gallery-media-api_8","title":"Gallery &amp; Media API","text":"<p>Purpose: Upload and manage media files in your app.</p> <pre><code># Get image gallery\nuri = URI('https://admin.devaito.com/api/image-gallery?page=1')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nimage_gallery = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#store-settings-api_8","title":"Store Settings API","text":"<p>Purpose: Fetch and update store settings in your app.</p> <pre><code>uri = URI('https://admin.devaito.com/api/fonts-and-colors')\nreq = Net::HTTP::Get.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\nfonts_colors = JSON.parse(res.body)\n</code></pre>"},{"location":"api-management/usage/#content-generator-api_8","title":"Content Generator API","text":"<p>Purpose: Generate content using AI in your app.</p> <pre><code>uri = URI('https://admin.devaito.com/api/content-generator')\nreq = Net::HTTP::Post.new(uri)\nreq['Authorization'] = \"Bearer #{token}\"\nreq['Content-Type'] = \"application/json\"\nreq.body = { message: 'Generate a product description for a new shoe.' }.to_json\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\ncontent = JSON.parse(res.body)\n</code></pre>"},{"location":"app-management/collaborators/","title":"Managing Collaborators on an Application","text":""},{"location":"app-management/collaborators/#introduction","title":"Introduction","text":"<p>This section explains how to manage collaborators on your applications in Devaito, making teamwork easier.</p>"},{"location":"app-management/collaborators/#adding-collaborators","title":"Adding Collaborators","text":"<ol> <li>Access Settings: Open the application card and click \"Manage collaborators\".</li> <li>Invite: Enter the collaborator\u2019s email address and select a role (read, write, admin).</li> <li>Confirmation: The invited person will receive a notification to accept the invitation.</li> </ol>"},{"location":"app-management/collaborators/#managing-roles-and-permissions","title":"Managing Roles and Permissions","text":"<ul> <li>Available Roles:</li> <li>Read: View-only access.</li> <li>Write: Can edit code and styles.</li> <li>Admin: Full rights, including managing other collaborators.</li> <li>Modification: Adjust roles anytime via the application settings.</li> </ul>"},{"location":"app-management/collaborators/#removing-collaborators","title":"Removing Collaborators","text":"<ol> <li>Select: Go to \"Manage collaborators\" and find the collaborator.</li> <li>Action: Click \"Remove\" and confirm the deletion.</li> <li>Notification: The collaborator will be notified that their access has ended.</li> </ol>"},{"location":"app-management/collaborators/#tips","title":"Tips","text":"<ul> <li>Assign roles that match each collaborator\u2019s responsibilities.</li> <li>Monitor the list of collaborators to keep your team efficient.</li> <li>Check the \"Collaboration\" section for best team practices.</li> </ul> <p>For more information, explore the other sections of this guide.</p>"},{"location":"app-management/deletion/","title":"Deleting / Archiving an Application","text":""},{"location":"app-management/deletion/#introduction","title":"Introduction","text":"<p>This section guides you on how to delete or archive an application on Devaito, ensuring these actions are performed securely and, when possible, reversibly.</p>"},{"location":"app-management/deletion/#steps-to-archive","title":"Steps to Archive","text":"<ol> <li>Access Settings: Open the application card and click on the management options (e.g., dropdown menu \"...\").</li> <li>Select Archive: Choose \"Archive\" to pause the application without losing any data.</li> <li>Confirmation: Confirm the action; the application will change to \"Archived\" status.</li> <li>Restoration: To restore, find the archived application and select \"Restore\".</li> </ol>"},{"location":"app-management/deletion/#steps-to-delete","title":"Steps to Delete","text":"<ol> <li>Access Settings: Same procedure as for archiving.</li> <li>Select Delete: Choose \"Delete\" for permanent removal.</li> <li>Confirmation: Enter a confirmation (e.g., the application name) to prevent mistakes.</li> <li>Immediate Effect: The application will be removed from your dashboard and all associated data will be erased.</li> </ol>"},{"location":"app-management/deletion/#important-points","title":"Important Points","text":"<ul> <li>Archiving vs Deletion: Archiving is reversible and ideal for temporary projects; deletion is permanent.</li> <li>Impact on Collaborators: Collaborators will lose access when an application is deleted or archived.</li> <li>Data: Make sure to back up critical data before taking any action.</li> </ul>"},{"location":"app-management/deletion/#tips","title":"Tips","text":"<ul> <li>Use archiving to keep inactive projects without cluttering your dashboard.</li> <li>Double-check before deleting to avoid accidental data loss.</li> <li>See the \"Version Management and History\" section for backup options.</li> </ul> <p>For more information, explore the other sections of this guide.</p>"},{"location":"app-management/deployment/","title":"Application Deployment","text":""},{"location":"app-management/deployment/#introduction","title":"Introduction","text":"<p>This section explains how to deploy your application to make it accessible and functional for users.</p>"},{"location":"app-management/deployment/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Pre-Deployment Checklist:</li> <li>Make sure your application is complete and tested in your editor.</li> <li> <p>Confirm all APIs and integrations are working.</p> </li> <li> <p>Prepare for Store Deployment:</p> </li> <li>For mobile apps, you need to build a release version (APK for Android, IPA for iOS).</li> <li> <p>In Flutter, run:      <code>flutter build apk --release</code>      This will generate an APK file in the <code>build/app/outputs/flutter-apk/</code> directory.</p> </li> <li> <p>Create a Developer Account:</p> </li> <li>Register for a Google Play Console account (for Android).</li> <li> <p>For iOS, use Apple Developer.</p> </li> <li> <p>Upload Your App:</p> </li> <li>Go to the Google Play Console.</li> <li>Create a new app and fill in the required information (app name, description, screenshots, etc.).</li> <li>Upload your APK file in the \"Release\" section.</li> <li> <p>Complete the content rating, privacy policy, and other required forms.</p> </li> <li> <p>Review and Publish:</p> </li> <li>Submit your app for review.</li> <li> <p>Once approved by Google, your app will be available on the Play Store.</p> </li> <li> <p>Post-Deployment Checks:</p> </li> <li>Test your app using the Play Store link.</li> <li>Monitor user feedback and crash reports in the console.</li> </ol>"},{"location":"app-management/deployment/#important-notes","title":"Important Notes","text":"<ul> <li>Deployment to app stores may take several days for review.</li> <li>Make sure your app complies with store policies to avoid rejection.</li> </ul>"},{"location":"app-management/deployment/#tips","title":"Tips","text":"<ul> <li>Always back up your project before building the release version.</li> <li>Read the official Google Play launch checklist.</li> <li>For automated deployment, explore CI/CD tools like GitHub Actions or Bitrise.</li> </ul> <p>For more information, check other sections of this guide.</p>"},{"location":"appendices/api-references/","title":"API References","text":""},{"location":"appendices/api-references/#overview","title":"Overview","text":"<p>This section provides detailed references for Devaito v2.0 APIs, including endpoints, parameters, and usage examples. For a list of available APIs, see API List &amp; Descriptions.</p>"},{"location":"appendices/api-references/#api-structure","title":"API Structure","text":"<p>Devaito APIs follow RESTful conventions:</p> <ul> <li>Base URL: <code>https://admin.devaito.com/api</code></li> <li>Authentication: Use Bearer tokens in the Authorization header (see Authentication API).</li> <li>Formats: JSON for requests and responses.</li> </ul>"},{"location":"appendices/api-references/#main-endpoints","title":"Main Endpoints","text":""},{"location":"appendices/api-references/#1-authentication-api","title":"1. Authentication API","text":"<ul> <li><code>POST /login</code> \u2014 User login, returns a token.</li> <li><code>POST /logout</code> \u2014 Logout, invalidates the token.</li> </ul>"},{"location":"appendices/api-references/#2-user-api","title":"2. User API","text":"<ul> <li><code>GET /user</code> \u2014 Get user and store information.</li> </ul>"},{"location":"appendices/api-references/#3-products-api","title":"3. Products API","text":"<ul> <li><code>GET /fetch-all-products</code> \u2014 List all products.</li> <li><code>GET /get-product/{slug}</code> \u2014 Get product details by slug.</li> <li><code>GET /popular-products</code> \u2014 List popular products.</li> </ul>"},{"location":"appendices/api-references/#4-orders-api","title":"4. Orders API","text":"<ul> <li><code>GET /get-all-orders</code> \u2014 List all orders.</li> </ul>"},{"location":"appendices/api-references/#5-categories-api","title":"5. Categories API","text":"<ul> <li><code>GET /categories</code> \u2014 List categories.</li> <li><code>POST /categories</code> \u2014 Create a category.</li> <li><code>PUT /categories/{id}</code> \u2014 Update a category.</li> <li><code>DELETE /categories/{id}</code> \u2014 Delete a category.</li> <li><code>GET /fetch-categories</code> \u2014 List categories with images &amp; slug.</li> <li><code>GET /fetch-categories-product/{permalink}</code> \u2014 Products by category.</li> </ul>"},{"location":"appendices/api-references/#6-campaigns-api","title":"6. Campaigns API","text":"<ul> <li><code>GET /campaigns</code> \u2014 List campaigns.</li> <li><code>POST /campaigns</code> \u2014 Create a campaign.</li> <li><code>GET /campaigns/{id}</code> \u2014 Get campaign details.</li> <li><code>PUT /campaigns/{id}</code> \u2014 Update a campaign.</li> <li><code>DELETE /campaigns/{id}</code> \u2014 Delete a campaign.</li> </ul>"},{"location":"appendices/api-references/#7-posts-api","title":"7. Posts API","text":"<ul> <li><code>GET /posts</code> \u2014 List posts.</li> <li><code>POST /posts</code> \u2014 Create a post.</li> <li><code>GET /posts/{id}</code> \u2014 Get post details.</li> <li><code>PUT /posts/{id}</code> \u2014 Update a post.</li> <li><code>DELETE /posts/{id}</code> \u2014 Delete a post.</li> <li><code>GET /posts/{id}/{job_id}</code> \u2014 Update job linked to a post.</li> </ul>"},{"location":"appendices/api-references/#8-social-media-apis","title":"8. Social Media APIs","text":""},{"location":"appendices/api-references/#a-facebook-api","title":"a. Facebook API","text":"<ul> <li><code>GET /facebook/pages</code> \u2014 Get connected Facebook pages.</li> <li><code>POST /facebook/publish-post</code> \u2014 Publish a post immediately.</li> <li><code>POST /facebook/publish-post-job</code> \u2014 Schedule a post.</li> </ul>"},{"location":"appendices/api-references/#b-instagram-api","title":"b. Instagram API","text":"<ul> <li><code>POST /instagram/publish-post</code> \u2014 Publish a post immediately.</li> <li><code>POST /instagram/publish-post-job</code> \u2014 Schedule a post.</li> </ul>"},{"location":"appendices/api-references/#c-platform-connections-api","title":"c. Platform Connections API","text":"<ul> <li><code>GET /platform-connections</code> \u2014 View connected social accounts.</li> </ul>"},{"location":"appendices/api-references/#9-templates-api","title":"9. Templates API","text":"<ul> <li><code>GET /templates</code> \u2014 List templates.</li> <li><code>POST /templates</code> \u2014 Create a template.</li> <li><code>GET /templates/{id}</code> \u2014 Get template details.</li> <li><code>PUT /templates/{id}</code> \u2014 Update a template.</li> <li><code>DELETE /templates/{id}</code> \u2014 Delete a template.</li> </ul>"},{"location":"appendices/api-references/#10-platforms-api","title":"10. Platforms API","text":"<ul> <li><code>GET /platforms</code> \u2014 List platforms.</li> <li><code>POST /platforms</code> \u2014 Create a platform.</li> <li><code>GET /platforms/{id}</code> \u2014 Get platform details.</li> <li><code>PUT /platforms/{id}</code> \u2014 Update a platform.</li> <li><code>DELETE /platforms/{id}</code> \u2014 Delete a platform.</li> </ul>"},{"location":"appendices/api-references/#11-resolutions-api","title":"11. Resolutions API","text":"<ul> <li><code>GET /resolutions</code> \u2014 List resolutions.</li> <li><code>POST /resolutions</code> \u2014 Create a resolution.</li> <li><code>GET /resolutions/{id}</code> \u2014 Get resolution details.</li> <li><code>PUT /resolutions/{id}</code> \u2014 Update a resolution.</li> <li><code>DELETE /resolutions/{id}</code> \u2014 Delete a resolution.</li> </ul>"},{"location":"appendices/api-references/#12-gallery-media-apis","title":"12. Gallery &amp; Media APIs","text":"<ul> <li><code>GET /gallery-store</code> \u2014 All store media.</li> <li><code>GET /image-gallery</code> \u2014 Image gallery (paginated).</li> <li><code>GET /video-gallery</code> \u2014 Video gallery (paginated).</li> <li><code>POST /save-image</code> \u2014 Upload image.</li> <li><code>POST /save-video</code> \u2014 Upload video.</li> </ul>"},{"location":"appendices/api-references/#13-store-settings-apis","title":"13. Store Settings APIs","text":"<ul> <li><code>GET /get-store-prompt</code> \u2014 Get store description.</li> <li><code>GET /get-store-language</code> \u2014 Get store language.</li> <li><code>GET /fonts-and-colors</code> \u2014 Get configured fonts &amp; colors.</li> </ul>"},{"location":"appendices/api-references/#14-content-generator-api","title":"14. Content Generator API","text":"<ul> <li><code>POST /content-generator</code> \u2014 Generate content via AI.</li> </ul>"},{"location":"appendices/api-references/#best-practices","title":"Best Practices","text":"<ul> <li>Rate Limits: Adhere to limits outlined in API Usage.</li> <li>Error Handling: Handle HTTP status codes (e.g., 429 for rate limits, 401 for auth errors).</li> <li>Security: Store tokens securely and rotate regularly.</li> </ul>"},{"location":"appendices/api-references/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Authentication Errors: Verify token validity (see Authentication API).</li> <li>Invalid Requests: Check parameter formats and required fields.</li> <li>Rate Limit Issues: Optimize request frequency or contact support for higher quotas.</li> </ul> <p>For full API documentation, visit https://admin.devaito.com/api/docs or contact support@devaito.com.</p>"},{"location":"appendices/glossary/","title":"Glossary","text":"<p>Glossary Overview This glossary defines key terms used in the Devaito v2.0 Developer Guide to help you understand the platform\u2019s concepts and terminology. Terms</p> <p>API Key: A unique identifier used to authenticate API requests (see API Keys &amp; Permissions). Application: A project or service managed within Devaito, including code, configurations, and APIs. Collaborator: A user invited to work on an application, with roles like Admin or Developer (see Roles &amp; Permissions). Deployment: The process of publishing an application to a live environment (see Deployment). Webhook: An HTTP callback triggered by events in Devaito, used for integrations (see Automations &amp; Webhooks). Versioning: Tracking and managing different versions of an application\u2019s code or configurations (see Version Management). CI/CD: Continuous Integration and Continuous Deployment, automating code integration and deployment (see CI/CD). Validation: Automated checks to ensure code quality before deployment (see Validation &amp; Testing). Role: A set of permissions defining what a collaborator can do (e.g., Admin, Viewer) (see Roles &amp; Permissions). Integration: Connecting Devaito with external services like GitHub or Slack (see Specific Integrations).</p> <p>Additional Notes</p> <p>Terms are cross-referenced with relevant guide sections for deeper understanding. For platform-specific terms, check API References or contact support@devaito.com.</p>"},{"location":"appendices/release-notes/","title":"Release Notes","text":"<p>Release Notes Overview This section lists updates, features, and bug fixes for Devaito v2.0 and its subsequent releases. Check here for the latest platform improvements. Version 2.0.0 (August 2025)</p> <p>New Features: Enhanced collaboration tools (see Collaboration). Advanced integrations with GitHub, Slack, and AWS (see Specific Integrations). CI/CD pipeline support (see CI/CD). Improved API key management (see API Keys &amp; Permissions).</p> <p>Improvements: Faster deployment times (see Deployment). Updated validation scripts (see Validation &amp; Testing).</p> <p>Bug Fixes: Fixed webhook delivery issues. Resolved role permission conflicts for collaborators.</p> <p>Version 2.0.1 (TBD)</p> <p>Planned Features: Support for additional cloud providers. Enhanced debugging tools (see Debugging).</p> <p>Known Issues: Minor UI glitches in the collaborator management panel.</p> <p>Staying Updated</p> <p>Monitor this page for new releases. Subscribe to Devaito\u2019s newsletter for real-time updates. Contact support@devaito.com for release-specific questions.</p>"},{"location":"appendices/resources/","title":"External Resources","text":"<p>External Resources Overview This section provides links to external tools, documentation, and communities to support your development on Devaito v2.0. Official Resources</p> <p>Devaito Website: https://www.devaito.com \u2013 Main site for account management and support. API Documentation: https://api.devaito.com/docs \u2013 Full API reference (see API References). Support Portal: support@devaito.com \u2013 Contact for technical assistance.</p> <p>Third-Party Tools</p> <p>GitHub: https://docs.github.com \u2013 For version control integration (see Specific Integrations). Jenkins: https://www.jenkins.io/doc \u2013 For CI/CD pipelines (see CI/CD). Slack: https://api.slack.com \u2013 For notification integrations. New Relic: https://docs.newrelic.com \u2013 For monitoring application performance.</p> <p>Communities</p> <p>Devaito Forum: https://forum.devaito.com \u2013 Discuss issues and share tips. Stack Overflow: Use tag devaito for community-driven Q&amp;A. Reddit: Join r/devaito for user discussions and updates.</p> <p>Learning Resources</p> <p>REST API Guide: https://restfulapi.net \u2013 Learn REST principles for Devaito APIs. Git Basics: https://git-scm.com/doc \u2013 Understand version control for Version Management. CI/CD Best Practices: https://www.cloudbees.com/ci-cd-best-practices \u2013 Optimize pipelines.</p> <p>Troubleshooting</p> <p>Use these resources alongside Common Solutions for issue resolution. Contact support@devaito.com for platform-specific guidance.</p>"},{"location":"code-management/best-practices/","title":"Best practices","text":""},{"location":"code-management/best-practices/#uiux-integration-best-practices-for-devaito-plugins-apps","title":"UI/UX Integration Best Practices for Devaito Plugins &amp; Apps","text":"<p>When building a plugin or app for Devaito, it's important to ensure a seamless and intuitive user experience within the Devaito interface (admin panel, widgets, etc.). Here are some best practices:</p>"},{"location":"code-management/best-practices/#1-consistent-design","title":"1. Consistent Design","text":"<ul> <li>Match the look and feel of Devaito\u2019s admin panel (colors, fonts, spacing).</li> <li>Use Devaito\u2019s design tokens or style guide if available.</li> </ul>"},{"location":"code-management/best-practices/#2-navigation","title":"2. Navigation","text":"<ul> <li>Integrate your plugin into the existing navigation (sidebar, top bar, or widget area).</li> <li>Avoid creating confusing or duplicate navigation elements.</li> </ul>"},{"location":"code-management/best-practices/#3-responsive-layout","title":"3. Responsive Layout","text":"<ul> <li>Make sure your plugin works well on all screen sizes (desktop, tablet, mobile).</li> <li>Use flexible grids and avoid fixed widths.</li> </ul>"},{"location":"code-management/best-practices/#4-clear-actions","title":"4. Clear Actions","text":"<ul> <li>Use clear, descriptive labels for buttons and actions.</li> <li>Group related actions together and avoid clutter.</li> </ul>"},{"location":"code-management/best-practices/#5-feedback-loading-states","title":"5. Feedback &amp; Loading States","text":"<ul> <li>Show loading indicators when fetching data.</li> <li>Display success and error messages for user actions.</li> </ul>"},{"location":"code-management/best-practices/#6-accessibility","title":"6. Accessibility","text":"<ul> <li>Use semantic HTML and ARIA attributes.</li> <li>Ensure keyboard navigation and screen reader compatibility.</li> </ul>"},{"location":"code-management/best-practices/#7-minimal-permissions","title":"7. Minimal Permissions","text":"<ul> <li>Request only the permissions your plugin needs.</li> <li>Clearly explain to users why each permission is required.</li> </ul>"},{"location":"code-management/best-practices/#8-integration-points","title":"8. Integration Points","text":"<ul> <li>If Devaito provides extension points (widgets, modals, notifications), use them to embed your plugin natively.</li> <li>Avoid opening external windows unless necessary.</li> </ul>"},{"location":"code-management/best-practices/#9-testing","title":"9. Testing","text":"<ul> <li>Test your plugin in the Devaito admin panel before publishing.</li> <li>Get feedback from real users and iterate on the design.</li> </ul> <p>Tip: A well-integrated plugin feels like a natural part of Devaito, not a separate tool. Follow these best practices to maximize adoption and user satisfaction.</p>"},{"location":"code-management/formats/","title":"Code Formats &amp; Conventions","text":""},{"location":"code-management/formats/#overview","title":"Overview","text":"<p>This guide establishes the coding standards, file organization patterns, and naming conventions for Devaito v2.0 applications. Following these conventions ensures consistency, maintainability, and seamless integration with the Devaito platform APIs.</p> <p>Benefits of Following Conventions: - Improved code readability and maintainability - Better team collaboration - Easier debugging and troubleshooting - Consistent deployment behavior - Enhanced platform compatibility</p>"},{"location":"code-management/formats/#project-structure-standards","title":"Project Structure Standards","text":""},{"location":"code-management/formats/#web-application-structure","title":"Web Application Structure","text":"<p>Standard Frontend Structure:</p> <pre><code>project-root/\n\u251c\u2500\u2500 index.html              # Main entry point (required)\n\u251c\u2500\u2500 assets/                 # Static assets directory\n\u2502   \u251c\u2500\u2500 css/               # Stylesheets\n\u2502   \u2502   \u251c\u2500\u2500 main.css       # Primary styles\n\u2502   \u2502   \u251c\u2500\u2500 components.css # Component styles\n\u2502   \u2502   \u2514\u2500\u2500 responsive.css # Media queries\n\u2502   \u251c\u2500\u2500 js/                # JavaScript files\n\u2502   \u2502   \u251c\u2500\u2500 app.js         # Main application logic\n\u2502   \u2502   \u251c\u2500\u2500 api.js         # API integration\n\u2502   \u2502   \u251c\u2500\u2500 utils.js       # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 components/    # Reusable components\n\u2502   \u251c\u2500\u2500 images/            # Image assets\n\u2502   \u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u2502   \u251c\u2500\u2500 icons/\n\u2502   \u2502   \u2514\u2500\u2500 products/\n\u2502   \u2514\u2500\u2500 fonts/             # Font files\n\u251c\u2500\u2500 api/                   # Backend API files\n\u2502   \u251c\u2500\u2500 config/            # Configuration files\n\u2502   \u251c\u2500\u2500 controllers/       # Request handlers\n\u2502   \u251c\u2500\u2500 models/            # Data models\n\u2502   \u2514\u2500\u2500 middleware/        # Custom middleware\n\u251c\u2500\u2500 config/                # Application configuration\n\u2502   \u251c\u2500\u2500 database.php       # Database settings\n\u2502   \u251c\u2500\u2500 app.js            # App configuration\n\u2502   \u2514\u2500\u2500 environment.env    # Environment variables\n\u251c\u2500\u2500 vendor/                # Third-party libraries\n\u251c\u2500\u2500 node_modules/          # NPM packages (excluded from upload)\n\u251c\u2500\u2500 package.json           # Node.js dependencies\n\u251c\u2500\u2500 composer.json          # PHP dependencies\n\u2514\u2500\u2500 README.md              # Project documentation\n</code></pre>"},{"location":"code-management/formats/#framework-specific-structures","title":"Framework-Specific Structures","text":"<p>React Application Structure:</p> <pre><code>react-app/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 index.html         # HTML template\n\u2502   \u251c\u2500\u2500 favicon.ico        # Site icon\n\u2502   \u2514\u2500\u2500 manifest.json      # PWA manifest\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/        # Reusable components\n\u2502   \u2502   \u251c\u2500\u2500 common/        # Shared components\n\u2502   \u2502   \u251c\u2500\u2500 layout/        # Layout components\n\u2502   \u2502   \u2514\u2500\u2500 ui/            # UI elements\n\u2502   \u251c\u2500\u2500 pages/             # Page components\n\u2502   \u2502   \u251c\u2500\u2500 Home.jsx\n\u2502   \u2502   \u251c\u2500\u2500 Products.jsx\n\u2502   \u2502   \u2514\u2500\u2500 Cart.jsx\n\u2502   \u251c\u2500\u2500 hooks/             # Custom React hooks\n\u2502   \u251c\u2500\u2500 services/          # API services\n\u2502   \u2502   \u251c\u2500\u2500 api.js         # Base API client\n\u2502   \u2502   \u251c\u2500\u2500 products.js    # Product API calls\n\u2502   \u2502   \u2514\u2500\u2500 auth.js        # Authentication\n\u2502   \u251c\u2500\u2500 utils/             # Utility functions\n\u2502   \u251c\u2500\u2500 styles/            # Style files\n\u2502   \u251c\u2500\u2500 App.js             # Main App component\n\u2502   \u2514\u2500\u2500 index.js           # Entry point\n\u251c\u2500\u2500 build/                 # Production build output\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 .env                   # Environment variables\n</code></pre> <p>Vue.js Application Structure:</p> <pre><code>vue-app/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/        # Vue components\n\u2502   \u251c\u2500\u2500 views/             # Page views\n\u2502   \u251c\u2500\u2500 router/            # Vue Router config\n\u2502   \u251c\u2500\u2500 store/             # Vuex store\n\u2502   \u251c\u2500\u2500 services/          # API services\n\u2502   \u251c\u2500\u2500 assets/            # Static assets\n\u2502   \u251c\u2500\u2500 App.vue            # Root component\n\u2502   \u2514\u2500\u2500 main.js            # Entry point\n\u251c\u2500\u2500 dist/                  # Build output\n\u2514\u2500\u2500 package.json\n</code></pre> <p>PHP Application Structure:</p> <pre><code>php-app/\n\u251c\u2500\u2500 public/                # Web-accessible directory\n\u2502   \u251c\u2500\u2500 index.php          # Entry point\n\u2502   \u251c\u2500\u2500 assets/            # Static assets\n\u2502   \u2514\u2500\u2500 .htaccess          # Apache configuration\n\u251c\u2500\u2500 src/                   # Source code\n\u2502   \u251c\u2500\u2500 Controllers/       # Request controllers\n\u2502   \u251c\u2500\u2500 Models/            # Data models\n\u2502   \u251c\u2500\u2500 Services/          # Business logic\n\u2502   \u2514\u2500\u2500 Utils/             # Utility classes\n\u251c\u2500\u2500 config/                # Configuration files\n\u2502   \u251c\u2500\u2500 database.php\n\u2502   \u2514\u2500\u2500 app.php\n\u251c\u2500\u2500 vendor/                # Composer dependencies\n\u251c\u2500\u2500 composer.json          # PHP dependencies\n\u2514\u2500\u2500 .env                   # Environment configuration\n</code></pre>"},{"location":"code-management/formats/#file-naming-conventions","title":"File Naming Conventions","text":""},{"location":"code-management/formats/#general-rules","title":"General Rules","text":"<p>File Naming Standards: - Use lowercase with hyphens: <code>user-profile.js</code> \u2705 - Avoid spaces and underscores: <code>user_profile.js</code> \u274c, <code>user profile.js</code> \u274c - Use descriptive names: <code>product-card.component.js</code> \u2705 - Include file purpose in name: <code>auth.service.js</code>, <code>product.model.js</code> - Keep names concise but meaningful: <code>cart.js</code> \u2705 vs <code>shopping-cart-functionality.js</code> \u274c</p>"},{"location":"code-management/formats/#language-specific-naming","title":"Language-Specific Naming","text":"<p>JavaScript/TypeScript Files:</p> <pre><code>// Components (PascalCase for classes/components)\nUserProfile.js\nProductCard.jsx\nShoppingCart.tsx\n\n// Services and utilities (camelCase)\napiService.js\ndataUtils.js\nauthHelper.ts\n\n// Configuration files (lowercase with hyphens)\nwebpack-config.js\nbabel-config.js\neslint-config.js\n\n// Page/route files (lowercase with hyphens)\nhome-page.js\nproduct-detail.js\ncheckout-flow.js\n</code></pre> <p>PHP Files:</p> <pre><code>// Classes (PascalCase)\nUserController.php\nProductModel.php\nDatabaseService.php\n\n// Functions and utilities (camelCase)\nhelpers.php\nutilities.php\nfunctions.php\n\n// Configuration (lowercase)\nconfig.php\ndatabase.php\nsettings.php\n</code></pre> <p>CSS/SCSS Files:</p> <pre><code>// Main stylesheets\nmain.css\nstyles.scss\nvariables.scss\n\n// Component styles (match component names)\nuser-profile.css\nproduct-card.scss\nnavigation.css\n\n// Layout styles\nlayout.css\ngrid-system.scss\nresponsive.css\n</code></pre>"},{"location":"code-management/formats/#directory-naming","title":"Directory Naming","text":"<p>Directory Structure Rules: - Use lowercase with hyphens: <code>user-management/</code> \u2705 - Be descriptive and specific: <code>product-components/</code> \u2705 vs <code>components/</code> \u274c - Group related functionality: <code>auth-services/</code>, <code>payment-utils/</code> - Use plural nouns for collections: <code>components/</code>, <code>services/</code>, <code>models/</code></p> <p>Examples:</p> <pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ui-elements/\n\u2502   \u251c\u2500\u2500 form-controls/\n\u2502   \u2514\u2500\u2500 navigation/\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 api-clients/\n\u2502   \u251c\u2500\u2500 data-processing/\n\u2502   \u2514\u2500\u2500 third-party/\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 string-helpers/\n\u2502   \u251c\u2500\u2500 date-functions/\n\u2502   \u2514\u2500\u2500 validation/\n\u2514\u2500\u2500 assets/\n    \u251c\u2500\u2500 image-files/\n    \u251c\u2500\u2500 font-files/\n    \u2514\u2500\u2500 icon-sets/\n</code></pre>"},{"location":"code-management/formats/#configuration-files","title":"Configuration Files","text":""},{"location":"code-management/formats/#environment-configuration","title":"Environment Configuration","text":"<p>Environment Variables (.env):</p> <pre><code># Application Settings\nAPP_NAME=MyDevaitoApp\nAPP_ENV=production\nAPP_DEBUG=false\nAPP_URL=https://myapp.devaito.com\n\n# Database Configuration\nDB_CONNECTION=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=myapp_db\nDB_USERNAME=db_user\nDB_PASSWORD=secure_password\n\n# Devaito API Configuration\nDEVAITO_API_URL=https://svelte.devaito.com\nDEVAITO_API_TOKEN=11|your_bearer_token_here\nDEVAITO_APP_ID=your_app_id\n\n# Third-party Services\nSTRIPE_PUBLIC_KEY=pk_live_your_stripe_key\nSTRIPE_SECRET_KEY=sk_live_your_stripe_secret\nPAYPAL_CLIENT_ID=your_paypal_client_id\n\n# Email Configuration\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=your-email@gmail.com\nMAIL_PASSWORD=your_app_password\n\n# Cache Settings\nCACHE_DRIVER=redis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\n# File Storage\nFILESYSTEM_DISK=local\nAWS_ACCESS_KEY_ID=your_aws_key\nAWS_SECRET_ACCESS_KEY=your_aws_secret\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=your_s3_bucket\n</code></pre>"},{"location":"code-management/formats/#package-configuration","title":"Package Configuration","text":"<p>package.json Structure:</p> <pre><code>{\n  \"name\": \"my-devaito-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"E-commerce application built with Devaito APIs\",\n  \"main\": \"index.js\",\n  \"keywords\": [\"ecommerce\", \"devaito\", \"api\"],\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"your.email@example.com\"\n  },\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \"&gt;=16.0.0\",\n    \"npm\": \"&gt;=8.0.0\"\n  },\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"build\": \"webpack --mode=production\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint src/\",\n    \"format\": \"prettier --write src/\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.6.0\",\n    \"express\": \"^4.18.0\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.0.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^8.50.0\",\n    \"prettier\": \"^3.0.0\",\n    \"jest\": \"^29.0.0\",\n    \"nodemon\": \"^3.0.0\"\n  },\n  \"devaito\": {\n    \"app_id\": \"your_app_id\",\n    \"api_version\": \"v1\",\n    \"build_command\": \"npm run build\",\n    \"start_command\": \"npm start\"\n  }\n}\n</code></pre> <p>composer.json Structure (PHP):</p> <pre><code>{\n  \"name\": \"yourname/devaito-app\",\n  \"description\": \"PHP application using Devaito APIs\",\n  \"type\": \"project\",\n  \"keywords\": [\"php\", \"ecommerce\", \"devaito\"],\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Your Name\",\n      \"email\": \"your.email@example.com\"\n    }\n  ],\n  \"minimum-stability\": \"stable\",\n  \"require\": {\n    \"php\": \"^8.0\",\n    \"guzzlehttp/guzzle\": \"^7.0\",\n    \"vlucas/phpdotenv\": \"^5.0\",\n    \"monolog/monolog\": \"^3.0\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"^10.0\",\n    \"phpstan/phpstan\": \"^1.0\",\n    \"squizlabs/php_codesniffer\": \"^3.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"App\\\\\": \"src/\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"Tests\\\\\": \"tests/\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"phpunit\",\n    \"lint\": \"phpcs src/\",\n    \"analyze\": \"phpstan analyse src/\"\n  }\n}\n</code></pre>"},{"location":"code-management/formats/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"code-management/formats/#javascripttypescript-standards","title":"JavaScript/TypeScript Standards","text":"<p>Modern JavaScript Practices:</p> <pre><code>// Use const/let instead of var\nconst API_BASE_URL = 'https://svelte.devaito.com';\nlet currentUser = null;\n\n// Arrow functions for callbacks\nconst fetchProducts = async (category) =&gt; {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products?category=${category}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n    throw error;\n  }\n};\n\n// Destructuring for cleaner code\nconst { products, categories, total } = await fetchCatalogData();\n\n// Template literals for strings\nconst productUrl = `${API_BASE_URL}/products/${productSlug}`;\n\n// Async/await instead of promises\nconst loadUserData = async (userId) =&gt; {\n  const user = await fetchUser(userId);\n  const orders = await fetchUserOrders(userId);\n  return { user, orders };\n};\n\n// Object shorthand\nconst createProductData = (name, price, category) =&gt; ({\n  name,\n  price,\n  category,\n  createdAt: new Date().toISOString()\n});\n\n// Default parameters\nconst formatPrice = (price, currency = 'USD', locale = 'en-US') =&gt; {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency\n  }).format(price);\n};\n</code></pre> <p>TypeScript Best Practices:</p> <pre><code>// Interface definitions\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  category: string;\n  slug: string;\n  images: string[];\n  inStock: boolean;\n  createdAt: Date;\n}\n\ninterface ApiResponse&lt;T&gt; {\n  success: boolean;\n  data: T;\n  message?: string;\n  errors?: string[];\n}\n\n// Generic functions\nasync function apiCall&lt;T&gt;(endpoint: string): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    headers: {\n      'Authorization': `Bearer ${process.env.DEVAITO_API_TOKEN}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  return response.json();\n}\n\n// Type guards\nfunction isProduct(obj: any): obj is Product {\n  return obj &amp;&amp; \n    typeof obj.id === 'string' &amp;&amp;\n    typeof obj.name === 'string' &amp;&amp;\n    typeof obj.price === 'number';\n}\n\n// Enum usage\nenum OrderStatus {\n  PENDING = 'pending',\n  PROCESSING = 'processing',\n  SHIPPED = 'shipped',\n  DELIVERED = 'delivered',\n  CANCELLED = 'cancelled'\n}\n</code></pre>"},{"location":"code-management/formats/#php-standards-psr-compliance","title":"PHP Standards (PSR Compliance)","text":"<p>PSR-4 Autoloading Structure:</p> <pre><code>&lt;?php\n// src/Controllers/ProductController.php\nnamespace App\\Controllers;\n\nuse App\\Services\\ProductService;\nuse App\\Models\\Product;\nuse Exception;\n\nclass ProductController\n{\n    private ProductService $productService;\n\n    public function __construct(ProductService $productService)\n    {\n        $this-&gt;productService = $productService;\n    }\n\n    public function getProducts(array $filters = []): array\n    {\n        try {\n            $products = $this-&gt;productService-&gt;getFilteredProducts($filters);\n\n            return [\n                'success' =&gt; true,\n                'data' =&gt; $products,\n                'count' =&gt; count($products)\n            ];\n        } catch (Exception $e) {\n            error_log(\"Product fetch error: \" . $e-&gt;getMessage());\n\n            return [\n                'success' =&gt; false,\n                'error' =&gt; 'Failed to fetch products',\n                'message' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n\n    public function getProduct(string $slug): array\n    {\n        if (empty($slug)) {\n            return [\n                'success' =&gt; false,\n                'error' =&gt; 'Product slug is required'\n            ];\n        }\n\n        $product = $this-&gt;productService-&gt;getBySlug($slug);\n\n        if (!$product) {\n            return [\n                'success' =&gt; false,\n                'error' =&gt; 'Product not found'\n            ];\n        }\n\n        return [\n            'success' =&gt; true,\n            'data' =&gt; $product\n        ];\n    }\n}\n</code></pre> <p>Model Structure:</p> <pre><code>&lt;?php\n// src/Models/Product.php\nnamespace App\\Models;\n\nuse DateTime;\n\nclass Product\n{\n    private string $id;\n    private string $name;\n    private float $price;\n    private string $category;\n    private string $slug;\n    private array $images;\n    private bool $inStock;\n    private DateTime $createdAt;\n\n    public function __construct(array $data)\n    {\n        $this-&gt;id = $data['id'] ?? '';\n        $this-&gt;name = $data['name'] ?? '';\n        $this-&gt;price = (float)($data['price'] ?? 0);\n        $this-&gt;category = $data['category'] ?? '';\n        $this-&gt;slug = $data['slug'] ?? '';\n        $this-&gt;images = $data['images'] ?? [];\n        $this-&gt;inStock = (bool)($data['in_stock'] ?? false);\n        $this-&gt;createdAt = new DateTime($data['created_at'] ?? 'now');\n    }\n\n    // Getters\n    public function getId(): string\n    {\n        return $this-&gt;id;\n    }\n\n    public function getName(): string\n    {\n        return $this-&gt;name;\n    }\n\n    public function getPrice(): float\n    {\n        return $this-&gt;price;\n    }\n\n    public function getFormattedPrice(string $currency = 'USD'): string\n    {\n        return number_format($this-&gt;price, 2) . ' ' . $currency;\n    }\n\n    // Validation\n    public function isValid(): bool\n    {\n        return !empty($this-&gt;id) &amp;&amp; \n               !empty($this-&gt;name) &amp;&amp; \n               $this-&gt;price &gt; 0 &amp;&amp;\n               !empty($this-&gt;slug);\n    }\n\n    // Serialization\n    public function toArray(): array\n    {\n        return [\n            'id' =&gt; $this-&gt;id,\n            'name' =&gt; $this-&gt;name,\n            'price' =&gt; $this-&gt;price,\n            'category' =&gt; $this-&gt;category,\n            'slug' =&gt; $this-&gt;slug,\n            'images' =&gt; $this-&gt;images,\n            'in_stock' =&gt; $this-&gt;inStock,\n            'created_at' =&gt; $this-&gt;createdAt-&gt;format('c')\n        ];\n    }\n}\n</code></pre>"},{"location":"code-management/formats/#cssscss-standards","title":"CSS/SCSS Standards","text":"<p>CSS Architecture:</p> <pre><code>/* Base styles - variables and resets */\n:root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --danger-color: #e74c3c;\n  --warning-color: #f39c12;\n  --text-color: #2c3e50;\n  --background-color: #ffffff;\n  --border-color: #ecf0f1;\n\n  --font-family-primary: 'Inter', sans-serif;\n  --font-family-secondary: 'Georgia', serif;\n\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n\n  --border-radius: 0.375rem;\n  --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* Component-based structure */\n.product-card {\n  display: flex;\n  flex-direction: column;\n  background: var(--background-color);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  box-shadow: var(--box-shadow);\n  padding: var(--spacing-md);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.product-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.product-card__image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: var(--border-radius);\n  margin-bottom: var(--spacing-sm);\n}\n\n.product-card__title {\n  font-family: var(--font-family-primary);\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: var(--text-color);\n  margin-bottom: var(--spacing-xs);\n  line-height: 1.4;\n}\n\n.product-card__price {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: var(--primary-color);\n  margin-bottom: var(--spacing-md);\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .product-card {\n    padding: var(--spacing-sm);\n  }\n\n  .product-card__image {\n    height: 150px;\n  }\n}\n</code></pre> <p>SCSS Structure:</p> <pre><code>// _variables.scss\n$primary-color: #3498db;\n$secondary-color: #2ecc71;\n$text-color: #2c3e50;\n\n$breakpoints: (\n  'mobile': 480px,\n  'tablet': 768px,\n  'desktop': 1024px,\n  'wide': 1200px\n);\n\n// _mixins.scss\n@mixin respond-to($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  }\n}\n\n@mixin button-style($bg-color: $primary-color, $text-color: white) {\n  background-color: $bg-color;\n  color: $text-color;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.375rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &amp;:hover {\n    background-color: darken($bg-color, 10%);\n    transform: translateY(-1px);\n  }\n}\n\n// main.scss\n@import 'variables';\n@import 'mixins';\n\n.btn-primary {\n  @include button-style($primary-color, white);\n}\n\n.product-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 1.5rem;\n\n  @include respond-to('tablet') {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @include respond-to('desktop') {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n</code></pre>"},{"location":"code-management/formats/#api-integration-standards","title":"API Integration Standards","text":""},{"location":"code-management/formats/#devaito-api-client-structure","title":"Devaito API Client Structure","text":"<p>Base API Client:</p> <pre><code>// services/api.js\nclass DevaitoAPI {\n  constructor() {\n    this.baseURL = process.env.DEVAITO_API_URL || 'https://svelte.devaito.com';\n    this.token = process.env.DEVAITO_API_TOKEN;\n    this.timeout = 30000; // 30 seconds\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      timeout: this.timeout,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add authentication header if token is available\n    if (this.token &amp;&amp; !options.skipAuth) {\n      config.headers.Authorization = `Bearer ${this.token}`;\n    }\n\n    try {\n      const response = await fetch(url, config);\n\n      if (!response.ok) {\n        throw new APIError(response.status, response.statusText);\n      }\n\n      const contentType = response.headers.get('content-type');\n      if (contentType &amp;&amp; contentType.includes('application/json')) {\n        return await response.json();\n      }\n\n      return await response.text();\n    } catch (error) {\n      if (error instanceof APIError) {\n        throw error;\n      }\n      throw new APIError(0, 'Network error', error.message);\n    }\n  }\n\n  // GET request\n  async get(endpoint, params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const url = queryString ? `${endpoint}?${queryString}` : endpoint;\n\n    return this.request(url, { method: 'GET' });\n  }\n\n  // POST request\n  async post(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // PUT request\n  async put(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, { method: 'DELETE' });\n  }\n}\n\n// Custom error class\nclass APIError extends Error {\n  constructor(status, statusText, details = null) {\n    super(`API Error ${status}: ${statusText}`);\n    this.status = status;\n    this.statusText = statusText;\n    this.details = details;\n    this.name = 'APIError';\n  }\n}\n\nexport default new DevaitoAPI();\n</code></pre> <p>Service-Specific Clients:</p> <pre><code>// services/products.js\nimport api from './api.js';\n\nexport const productService = {\n  // Get all products with optional filters\n  async getProducts(filters = {}) {\n    const params = {\n      category: filters.category,\n      min_price: filters.minPrice,\n      max_price: filters.maxPrice,\n      search: filters.search,\n      page: filters.page || 1,\n      limit: filters.limit || 20\n    };\n\n    // Remove undefined values\n    Object.keys(params).forEach(key =&gt; {\n      if (params[key] === undefined) delete params[key];\n    });\n\n    return api.get('/products', params);\n  },\n\n  // Get single product by slug\n  async getProduct(slug) {\n    if (!slug) {\n      throw new Error('Product slug is required');\n    }\n    return api.get(`/products/${slug}`);\n  },\n\n  // Get product reviews\n  async getProductReviews(slug, page = 1) {\n    return api.get(`/products/${slug}/reviews`, { page });\n  },\n\n  // Add product review (requires authentication)\n  async addReview(slug, reviewData) {\n    const { rating, comment, title } = reviewData;\n\n    if (!rating || rating &lt; 1 || rating &gt; 5) {\n      throw new Error('Rating must be between 1 and 5');\n    }\n\n    return api.post(`/products/${slug}/reviews`, {\n      rating,\n      comment,\n      title\n    });\n  }\n};\n\n// services/cart.js\nexport const cartService = {\n  // Get cart contents\n  async getCart() {\n    return api.get('/cart');\n  },\n\n  // Add item to cart\n  async addToCart(productId, quantity = 1, variant = null) {\n    return api.post('/cart', {\n      product_id: productId,\n      quantity,\n      variant\n    });\n  },\n\n  // Update cart item quantity\n  async updateCartItem(itemId, quantity) {\n    return api.put(`/cart/${itemId}`, { quantity });\n  },\n\n  // Remove item from cart\n  async removeFromCart(itemId) {\n    return api.delete(`/cart/${itemId}`);\n  },\n\n  // Clear entire cart\n  async clearCart() {\n    return api.delete('/cart');\n  }\n};\n</code></pre>"},{"location":"code-management/formats/#error-handling-standards","title":"Error Handling Standards","text":"<p>Centralized Error Handler:</p> <pre><code>// utils/error-handler.js\nexport class ErrorHandler {\n  static handle(error, context = '') {\n    console.group(`\ud83d\udea8 Error in ${context || 'Application'}`);\n    console.error('Error:', error.message);\n\n    if (error instanceof APIError) {\n      console.error('Status:', error.status);\n      console.error('Details:', error.details);\n\n      // Handle specific API errors\n      switch (error.status) {\n        case 401:\n          this.handleUnauthorized();\n          break;\n        case 429:\n          this.handleRateLimit();\n          break;\n        case 500:\n          this.handleServerError();\n          break;\n      }\n    }\n\n    console.error('Stack:', error.stack);\n    console.groupEnd();\n\n    // Report to monitoring service\n    this.reportError(error, context);\n  }\n\n  static handleUnauthorized() {\n    // Clear stored tokens\n    localStorage.removeItem('auth_token');\n\n    // Redirect to login\n    window.location.href = '/login';\n  }\n\n  static handleRateLimit() {\n    // Show rate limit message\n    this.showUserMessage('Too many requests. Please try again later.', 'warning');\n  }\n\n  static handleServerError() {\n    // Show generic error message\n    this.showUserMessage('Server error. Please try again.', 'error');\n  }\n\n  static showUserMessage(message, type = 'info') {\n    // Implementation depends on your UI framework\n    console.log(`${type.toUpperCase()}: ${message}`);\n  }\n\n  static reportError(error, context) {\n    // Send error to monitoring service\n    if (typeof window !== 'undefined' &amp;&amp; window.analytics) {\n      window.analytics.track('Error Occurred', {\n        error: error.message,\n        context,\n        stack: error.stack,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n}\n\n// Usage in components\ntry {\n  const products = await productService.getProducts();\n  setProducts(products.data);\n} catch (error) {\n  ErrorHandler.handle(error, 'ProductList Component');\n}\n</code></pre>"},{"location":"code-management/formats/#documentation-standards","title":"Documentation Standards","text":""},{"location":"code-management/formats/#code-documentation","title":"Code Documentation","text":"<p>JSDoc Comments:</p> <pre><code>/**\n * Fetches products from the Devaito API with optional filtering\n * @param {Object} filters - Filter options for products\n * @param {string} [filters.category] - Product category slug\n * @param {number} [filters.minPrice] - Minimum price filter\n * @param {number} [filters.maxPrice] - Maximum price filter\n * @param {string} [filters.search] - Search query\n * @param {number} [filters.page=1] - Page number for pagination\n * @param {number} [filters.limit=20] - Number of items per page\n * @returns {Promise&lt;Object&gt;} API response with products array\n * @throws {APIError} When API request fails\n * @example\n * // Get all products\n * const products = await getProducts();\n * \n * // Get products with filters\n * const filteredProducts = await getProducts({\n *   category: 'electronics',\n *   minPrice: 100,\n *   maxPrice: 500\n * });\n */\nasync function getProducts(filters = {}) {\n  // Implementation here\n}\n</code></pre> <p>README.md Template:</p> <pre><code># Project Name\n\nBrief description of your Devaito-powered application.\n\n## Features\n\n- \ud83d\udecd\ufe0f Product catalog integration\n- \ud83d\uded2 Shopping cart functionality\n- \ud83d\udc64 User authentication\n- \ud83d\udcb3 Payment processing\n- \ud83d\udcf1 Responsive design\n\n## Prerequisites\n\n- Node.js 16+ or PHP 8+\n- Devaito API token\n- Modern web browser\n\n## Installation\n\n```bash\n# Clone repository\ngit clone https://github.com/yourusername/your-app.git\ncd your-app\n\n# Install dependencies\nnpm install  # or composer install\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your API keys\n</code></pre>"},{"location":"code-management/formats/#configuration","title":"Configuration","text":"<p>Add your Devaito API credentials to <code>.env</code>:</p> <pre><code>DEVAITO_API_URL=https://svelte.devaito.com\nDEVAITO_API_TOKEN=your_bearer_token_here\nDEVAITO_APP_ID=your_app_id\n</code></pre>"},{"location":"code-management/formats/#usage","title":"Usage","text":"<pre><code># Development\nnpm run dev\n\n# Production build\nnpm run build\nnpm start\n</code></pre>"},{"location":"code-management/formats/#api-integration","title":"API Integration","text":"<p>This application uses the following Devaito APIs:</p> <ul> <li>Products API: Product catalog and details</li> <li>Cart API: Shopping cart management</li> <li>Authentication API: User login/signup</li> <li>Payment Methods API: Available payment options</li> </ul>"},{"location":"code-management/formats/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Commit changes (<code>git commit -m 'Add amazing feature'</code>)</li> <li>Push to branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"code-management/formats/#license","title":"License","text":"<p>This project is licensed under the MIT License - see LICENSE file. ```</p> <p>Following these code formats and conventions ensures your Devaito applications are maintainable, scalable, and integrate seamlessly with the platform's APIs and deployment system.</p>"},{"location":"code-management/upload/","title":"Upload &amp; Deployment Methods","text":""},{"location":"code-management/upload/#overview","title":"Overview","text":"<p>Currently, Devaito manages the deployment of mobile applications to the official app stores:</p> <ul> <li>Google Play Store (Android)</li> <li>Apple App Store (iOS)</li> </ul>"},{"location":"code-management/upload/#how-deployment-works","title":"How Deployment Works","text":"<ul> <li>As a developer, you build and prepare your application or plugin according to Devaito's requirements.</li> <li>You submit your project to the Devaito team (contact your Devaito administrator or support for the exact process).</li> <li>Devaito handles the publishing and deployment to Google Play and the Apple App Store for you.</li> <li>You do not need to manually upload your app to these stores.</li> </ul>"},{"location":"code-management/upload/#what-you-should-do","title":"What You Should Do","text":"<ol> <li>Prepare your project:    Make sure your code is complete, tested, and meets Devaito\u2019s guidelines.</li> <li>Contact Devaito:    Reach out to the Devaito team or your platform administrator to submit your project for deployment.</li> <li>Follow up:    Wait for confirmation and feedback from Devaito regarding the status of your app on the stores.</li> </ol>"},{"location":"code-management/upload/#note","title":"Note","text":"<p>If Devaito provides API endpoints for uploading or managing your app in the future, this documentation will be updated with the relevant instructions.</p> <p>For more information or to start the deployment process, please contact the Devaito team directly.</p>"},{"location":"code-management/validation/","title":"Validation &amp; Testing","text":""},{"location":"code-management/validation/#overview","title":"Overview","text":"<p>Validation and testing are critical components of the development process on Devaito v2.0. This comprehensive guide covers automated validation, testing methodologies, performance benchmarking, and quality assurance practices to ensure your applications are robust, secure, and performant.</p> <p>Testing Philosophy: - Prevention over Detection: Catch issues early in development - Automated Quality Gates: Continuous validation throughout deployment - Performance First: Ensure optimal user experience - Security by Default: Validate security at every level</p>"},{"location":"code-management/validation/#pre-upload-validation","title":"Pre-Upload Validation","text":""},{"location":"code-management/validation/#automated-code-validation","title":"Automated Code Validation","text":"<p>Devaito automatically validates your code before deployment using multiple validation layers:</p> <p>Syntax Validation:</p> <pre><code>// JavaScript/TypeScript validation\nconst validationRules = {\n  syntax: 'ES2020+',\n  strictMode: true,\n  allowedGlobals: ['console', 'fetch', 'document', 'window'],\n  bannedFunctions: ['eval', 'Function', 'setTimeout'],\n  maxComplexity: 10,\n  maxDepth: 4\n};\n\n// PHP validation\nconst phpRules = {\n  version: '8.0+',\n  psr: ['PSR-1', 'PSR-4', 'PSR-12'],\n  security: ['no-eval', 'no-exec', 'no-shell-exec'],\n  errorReporting: 'E_ALL'\n};\n</code></pre> <p>Dependency Validation:</p> <pre><code>{\n  \"validation\": {\n    \"dependencies\": {\n      \"checkLockFiles\": true,\n      \"allowedRegistries\": [\"npmjs.org\", \"packagist.org\"],\n      \"vulnerabilityCheck\": true,\n      \"licenseCompliance\": true,\n      \"maxDependencies\": 100\n    },\n    \"security\": {\n      \"auditLevel\": \"high\",\n      \"autoFix\": true,\n      \"bannedPackages\": [\"lodash\", \"moment\"],\n      \"preferredAlternatives\": {\n        \"lodash\": \"native-js-methods\",\n        \"moment\": \"date-fns\"\n      }\n    }\n  }\n}\n</code></pre> <p>File Structure Validation:</p> <pre><code>// Required files validation\nconst requiredFiles = {\n  web: ['index.html'],\n  react: ['package.json', 'src/index.js', 'public/index.html'],\n  vue: ['package.json', 'src/main.js', 'public/index.html'],\n  php: ['index.php', 'composer.json']\n};\n\n// File size limits\nconst sizeLimits = {\n  singleFile: '100MB',\n  totalProject: '2GB',\n  imageFile: '50MB',\n  videoFile: '500MB'\n};\n</code></pre>"},{"location":"code-management/validation/#manual-validation-checklist","title":"Manual Validation Checklist","text":"<p>Pre-Upload Checklist: ```markdown</p>"},{"location":"code-management/validation/#code-quality","title":"Code Quality","text":""},{"location":"collaboration/add-remove/","title":"Adding/Removing Collaborators","text":"<p>Adding and Removing Collaborators Overview In Devaito v2.0, collaboration is a key feature that allows multiple users to work on the same application or project. Collaborators can be added to your application to contribute to development, testing, or management tasks. This section guides you through the process of adding and removing collaborators, including best practices to ensure smooth teamwork. Prerequisites</p> <p>You must have an active Devaito account and be logged in. You need to be the owner or have administrative permissions for the application to manage collaborators. Ensure you have the email addresses or Devaito usernames of the collaborators you wish to add.</p> <p>Adding a Collaborator Follow these steps to add a collaborator to your application:</p> <p>Navigate to Your Application:</p> <p>Log in to your Devaito account and go to the \"My Applications\" section from the dashboard. Select the application to which you want to add a collaborator.</p> <p>Access Collaborator Management:</p> <p>In the application\u2019s settings, locate the \"Collaborators\" tab or section. Click on the \"Add Collaborator\" button.</p> <p>Enter Collaborator Details:</p> <p>Input the collaborator\u2019s Devaito username or email address. Select the appropriate role for the collaborator (e.g., Developer, Tester, or Admin). Refer to Roles &amp; Permissions for details on available roles. Optionally, add a note or message to the invitation (e.g., \"Please join our project for API development\").</p> <p>Send Invitation:</p> <p>Click \"Send Invitation\" to notify the collaborator. The collaborator will receive an email or in-platform notification with instructions to accept the invitation.</p> <p>Verify Addition:</p> <p>Once the collaborator accepts the invitation, they will appear in the \"Collaborators\" list with their assigned role. You can verify their status in the application\u2019s collaborator management panel.</p> <p>Removing a Collaborator If a collaborator no longer needs access to your application, you can remove them as follows:</p> <p>Navigate to Collaborator Management:</p> <p>Go to the \"My Applications\" section and select the relevant application. Access the \"Collaborators\" tab.</p> <p>Locate the Collaborator:</p> <p>Find the collaborator in the list. You can use the search bar if the list is long.</p> <p>Remove Access:</p> <p>Click the \"Remove\" or \"Revoke Access\" button next to the collaborator\u2019s name. Confirm the action in the dialog box that appears. You may be prompted to provide a reason for removal (optional).</p> <p>Verify Removal:</p> <p>The collaborator will be removed from the application and will no longer have access to its resources. Check the \"Collaborators\" list to ensure the user is no longer listed.</p> <p>Best Practices</p> <p>Role Assignment: Assign roles based on the collaborator\u2019s responsibilities. Avoid granting Admin access unless necessary. See Team Best Practices for more guidance. Communication: Inform collaborators about their roles and expectations before adding them to the project. Regular Audits: Periodically review the collaborator list to ensure only active team members have access. Secure Invitations: Use verified email addresses or usernames to prevent unauthorized access.</p> <p>Troubleshooting</p> <p>Invitation Not Received: Ask the collaborator to check their spam/junk folder or verify the email address used. Permission Errors: Ensure you have administrative rights to add or remove collaborators. Contact Devaito support if issues persist. Role Conflicts: If a collaborator cannot perform expected actions, verify their role in the Roles &amp; Permissions section.</p> <p>For additional help, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.</p>"},{"location":"collaboration/best-practices/","title":"Team Best Practices","text":"<p>Team Best Practices Overview Effective collaboration is essential for successful application development on Devaito v2.0. This section provides best practices for managing teams, ensuring clear communication, and optimizing workflows when working with collaborators. General Guidelines</p> <p>Define Clear Roles: Assign roles based on each collaborator\u2019s responsibilities (see Roles &amp; Permissions). Clearly communicate expectations when adding collaborators (see Adding/Removing Collaborators). Use Version Control: Integrate version management tools to track changes and avoid conflicts (see Version Management). Regular Syncs: Schedule team meetings or updates to align on project goals, progress, and blockers. Document Everything: Maintain detailed documentation in your application\u2019s codebase and use Devaito\u2019s built-in tools to share updates with collaborators.</p> <p>Collaboration Workflow</p> <p>Onboarding Collaborators:</p> <p>Provide new team members with access to the Quick Start Guide and relevant documentation. Assign appropriate roles (e.g., Developer for coders, Tester for QA) to streamline onboarding. Share project goals, timelines, and key contacts in the invitation message.</p> <p>Code and Resource Management:</p> <p>Follow coding standards outlined in Code Formats &amp; Conventions. Use Devaito\u2019s validation tools to ensure code quality before deployment (see Validation &amp; Testing). Encourage collaborators to document their changes in commit messages or logs.</p> <p>Communication Best Practices:</p> <p>Use in-platform notifications or external tools (e.g., Slack, email) for updates, as supported by Devaito\u2019s integrations (see Specific Integrations). Create a shared space (e.g., a project wiki) for team notes, FAQs, or troubleshooting steps. Avoid direct modifications to shared resources without team consensus.</p> <p>Conflict Resolution:</p> <p>Address merge conflicts promptly using version control tools. If permission issues arise, verify roles and adjust as needed (see Roles &amp; Permissions). Escalate unresolved issues to the application\u2019s Admin or Devaito support.</p> <p>Security Considerations</p> <p>Limit Access: Only grant Admin or Developer roles to trusted team members. Use Viewer or Tester roles for temporary or external collaborators. Monitor Activity: Regularly review application logs and collaborator actions to detect unauthorized changes (see Application Status). Secure API Keys: Ensure collaborators with API key access follow security protocols (see API Keys &amp; Permissions).</p> <p>Optimizing Team Performance</p> <p>Automate Workflows: Use Devaito\u2019s automation and webhook features to streamline repetitive tasks (see Automations &amp; Webhooks). Leverage CI/CD: Implement continuous integration and deployment pipelines for faster iterations (see CI/CD). Feedback Loops: Encourage team members to provide feedback on processes and tools to improve efficiency.</p> <p>Troubleshooting</p> <p>Collaborator Confusion: If team members are unsure of their roles, review Roles &amp; Permissions and clarify responsibilities. Communication Breakdowns: Ensure all collaborators have access to communication tools and project updates. Workflow Bottlenecks: If delays occur, check for misconfigured permissions or outdated validation scripts (see Validation &amp; Testing).</p> <p>For additional guidance, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.</p>"},{"location":"collaboration/roles/","title":"Roles & Permissions","text":"<p>Roles &amp; Permissions Overview In Devaito v2.0, roles and permissions define what actions collaborators can perform within an application. This section explains the available roles, their associated permissions, and how to manage them effectively to ensure secure and efficient collaboration. Available Roles Devaito provides the following predefined roles for collaborators:</p> <p>Role Description</p> <p>Admin Full access to all application features, including management of collaborators, API keys, and deployments.</p> <p>Developer Access to code upload, validation, and debugging, with limited management capabilities.</p> <p>Tester Access to testing and validation features, with read-only access to code and configurations.</p> <p>Viewer Read-only access to application details, status, and logs, with no modification rights.</p> <p>Permissions Breakdown Each role is associated with specific permissions, as outlined below:</p> <p>Admin:</p> <p>Add/remove collaborators (see Adding/Removing Collaborators). Manage API keys and permissions (see API Keys &amp; Permissions). Deploy applications (see Deployment). Edit application settings, code, and configurations. View all logs, statuses, and reports.</p> <p>Developer:</p> <p>Upload and manage code (see Code Upload &amp; Management). Run validation and testing scripts (see Validation &amp; Testing). Debug applications (see Debugging). View application status and logs. Cannot manage collaborators or API keys.</p> <p>Tester:</p> <p>Run validation and testing scripts. View test results and application status. Read-only access to code and configurations. Cannot modify code, deploy applications, or manage collaborators.</p> <p>Viewer:</p> <p>View application status, logs, and configurations. Cannot modify any settings, code, or collaborator roles.</p> <p>Managing Roles To assign or modify a collaborator\u2019s role:</p> <p>Navigate to Collaborator Management:</p> <p>Go to the \"My Applications\" section and select the relevant application. Access the \"Collaborators\" tab (see Adding/Removing Collaborators).</p> <p>Edit Role:</p> <p>Locate the collaborator in the list. Click \"Edit Role\" or a similar option next to their name. Select the new role from the dropdown menu (e.g., Admin, Developer). Save changes to update the collaborator\u2019s permissions.</p> <p>Verify Changes:</p> <p>Confirm the role update in the collaborator list. Notify the collaborator if their permissions have changed significantly.</p> <p>Best Practices</p> <p>Least Privilege Principle: Assign the lowest level of access necessary for a collaborator\u2019s tasks. For example, use Viewer for team members who only need to monitor progress. Regular Role Reviews: Periodically audit collaborator roles to ensure they align with current responsibilities. Clear Communication: Inform collaborators about their role\u2019s capabilities and limitations when adding them (see Team Best Practices). Role Transitions: When changing roles (e.g., Developer to Admin), ensure the collaborator is aware of new responsibilities.</p> <p>Troubleshooting</p> <p>Permission Denied Errors: Verify the collaborator\u2019s role matches their intended actions. For example, only Admins can manage API keys. Role Not Updating: Ensure you have Admin rights to modify roles. If issues persist, contact Devaito support. Unexpected Access: If a collaborator has incorrect permissions, check for overlapping roles or misconfigurations in the collaborator settings.</p> <p>For further assistance, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.</p>"},{"location":"faq/questions/","title":"Frequently Asked Questions","text":"<p>Frequently Asked Questions Overview This section addresses common questions about using Devaito v2.0, covering account setup, application management, API usage, and more. For specific issues, see Common Solutions. Account and Access Q: How do I create a Devaito account?A: Visit the Devaito website and follow the steps in Creation / Login. You\u2019ll need a valid email address and password. Q: I forgot my password. How do I reset it?A: Use the \"Forgot Password\" link on the login page. Follow the email instructions to reset your password. Contact support@devaito.com if issues persist. Q: Can multiple users collaborate on a single application?A: Yes, add collaborators via the \"Collaborators\" tab in your application settings. See Adding/Removing Collaborators. Application Management Q: How do I deploy my application?A: Configure deployment settings as described in Deployment. Ensure your code passes validation (see Validation &amp; Testing). Q: Why is my application status \"Failed\"?A: Check the application logs in Application Status. Common issues include code errors or misconfigured integrations. Q: Can I archive an application instead of deleting it?A: Yes, use the archiving option in Deletion / Archiving to preserve application data. API Usage Q: How do I access Devaito APIs?A: Browse available APIs in API List &amp; Descriptions and generate API keys via API Keys &amp; Permissions. Q: Why am I getting an \"Invalid API Key\" error?A: Verify the key is correct and has the right permissions. Regenerate the key if needed (see API Keys &amp; Permissions). Code and Integrations Q: What code formats are supported?A: Devaito supports multiple languages and formats. See Code Formats &amp; Conventions for details. Q: How do I set up a GitHub integration?A: Follow the steps in Specific Integrations to connect your repository. Q: My webhook isn\u2019t triggering. What\u2019s wrong?A: Check the webhook URL and event settings in Automations &amp; Webhooks. Ensure the receiving service is active. Collaboration Q: How do I change a collaborator\u2019s role?A: Edit their role in the \"Collaborators\" tab. See Roles &amp; Permissions for available roles. Q: Can collaborators access my API keys?A: Only Admins can manage API keys. Restrict roles appropriately (see Roles &amp; Permissions). Advanced Features Q: How do I roll back to a previous version?A: Use the version history in Version Management to select and restore a previous version. Q: Can I automate testing in a CI/CD pipeline?A: Yes, configure pipelines as described in CI/CD. Need More Help? If your question isn\u2019t answered here, check Common Solutions or contact Devaito support at support@devaito.com. Refer to External Resources for additional guides.</p>"},{"location":"faq/solutions/","title":"Common Solutions","text":"<p>Common Solutions Overview This section provides solutions to common issues encountered while using Devaito v2.0, from login problems to deployment errors. For additional questions, see Frequently Asked Questions. Account and Login Issues Problem: Unable to log in due to incorrect credentials.Solution: </p> <p>Verify your email and password. Use the \"Forgot Password\" link to reset your password (see Creation / Login). Clear browser cache or try incognito mode. Contact support@devaito.com if the issue persists.</p> <p>Problem: Account locked after multiple failed login attempts.Solution: Wait 15 minutes or contact support to unlock your account. Application Management Problem: Deployment fails with a generic error.Solution: </p> <p>Check logs in Application Status. Ensure code passes validation (see Validation &amp; Testing). Verify integration settings (see Specific Integrations).</p> <p>Problem: Application is stuck in \"Pending\" status.Solution: </p> <p>Refresh the dashboard or check server status. Restart the deployment process (see Deployment). Contact support if unresolved after 30 minutes.</p> <p>API Issues Problem: API requests return \"401 Unauthorized.\"Solution: </p> <p>Verify the API key is correct and active (see API Keys &amp; Permissions). Check key permissions align with the API endpoint. Regenerate the key if compromised.</p> <p>Problem: API rate limit exceeded.Solution: </p> <p>Review rate limits in API Usage. Optimize requests or request a higher quota from support.</p> <p>Code and Debugging Problem: Code upload fails validation.Solution: </p> <p>Review validation errors in Validation &amp; Testing. Ensure code follows Code Formats &amp; Conventions. Use debugging tools (see Debugging).</p> <p>Problem: Integration with GitHub not syncing.Solution: </p> <p>Verify OAuth token and repository settings (see Specific Integrations). Check webhook configuration (see Automations &amp; Webhooks).</p> <p>Collaboration Problem: Collaborator cannot access application features.Solution: </p> <p>Confirm their role in Roles &amp; Permissions. Ensure they\u2019ve accepted the invitation (see Adding/Removing Collaborators). Reassign the role if needed.</p> <p>Problem: Too many collaborators added.Solution: Remove unnecessary collaborators (see Adding/Removing Collaborators). Advanced Features Problem: Webhook not delivering to external service.Solution: </p> <p>Verify the webhook URL and payload format (see Automations &amp; Webhooks). Check external service logs for errors. Test with a simple payload to isolate issues.</p> <p>Problem: CI/CD pipeline fails at the testing stage.Solution: </p> <p>Review test scripts in Validation &amp; Testing. Check pipeline configuration in CI/CD. Ensure sufficient resources are allocated.</p> <p>Still Stuck? Refer to Frequently Asked Questions for more insights or contact Devaito support at support@devaito.com. Additional resources are available in External Resources.</p>"},{"location":"getting-started/available-apis/","title":"Available APIs","text":"<p>Don\u2019t worry if this list looks long or complicated! You don\u2019t need to use every API right away. Just start with the ones you need for your project, and come back to this list whenever you want to add new features. Each API is explained with its purpose, so you can pick what fits your needs step by step. If you need more details, you\u2019ll find further explanations in the API Management section.</p> <p>Below is the list of all APIs available on Devaito (SaaS multi-tenant version):</p>"},{"location":"getting-started/available-apis/#1-authentication-api","title":"1. Authentication API","text":"<ul> <li><code>/login</code></li> <li><code>/logout</code></li> </ul>"},{"location":"getting-started/available-apis/#2-user-api","title":"2. User API","text":"<ul> <li><code>/user</code></li> </ul>"},{"location":"getting-started/available-apis/#3-products-api","title":"3. Products API","text":"<ul> <li><code>/fetch-all-products</code></li> <li><code>/get-product/{slug}</code></li> <li><code>/popular-products</code></li> </ul>"},{"location":"getting-started/available-apis/#4-orders-api","title":"4. Orders API","text":"<ul> <li><code>/get-all-orders</code></li> </ul>"},{"location":"getting-started/available-apis/#5-categories-api","title":"5. Categories API","text":"<ul> <li><code>/categories</code> (GET, POST, PUT, DELETE)</li> <li><code>/categories/{id}</code></li> <li><code>/fetch-categories</code></li> <li><code>/fetch-categories-product/{permalink}</code></li> </ul>"},{"location":"getting-started/available-apis/#6-campaigns-api","title":"6. Campaigns API","text":"<ul> <li><code>/campaigns</code> (GET, POST)</li> <li><code>/campaigns/{id}</code> (GET, PUT, DELETE)</li> </ul>"},{"location":"getting-started/available-apis/#7-posts-api","title":"7. Posts API","text":"<ul> <li><code>/posts</code> (GET, POST)</li> <li><code>/posts/{id}</code> (GET, PUT, DELETE)</li> <li><code>/posts/{id}/{job_id}</code></li> </ul>"},{"location":"getting-started/available-apis/#8-social-media-apis","title":"8. Social Media APIs","text":""},{"location":"getting-started/available-apis/#a-facebook-api","title":"a. Facebook API","text":"<ul> <li><code>/facebook/pages</code></li> <li><code>/facebook/publish-post</code></li> <li><code>/facebook/publish-post-job</code></li> </ul>"},{"location":"getting-started/available-apis/#b-instagram-api","title":"b. Instagram API","text":"<ul> <li><code>/instagram/publish-post</code></li> <li><code>/instagram/publish-post-job</code></li> </ul>"},{"location":"getting-started/available-apis/#c-platform-connections-api","title":"c. Platform Connections API","text":"<ul> <li><code>/platform-connections</code></li> </ul>"},{"location":"getting-started/available-apis/#9-templates-api","title":"9. Templates API","text":"<ul> <li><code>/templates</code> (GET, POST)</li> <li><code>/templates/{id}</code> (GET, PUT, DELETE)</li> </ul>"},{"location":"getting-started/available-apis/#10-platforms-api","title":"10. Platforms API","text":"<ul> <li><code>/platforms</code> (GET, POST)</li> <li><code>/platforms/{id}</code> (GET, PUT, DELETE)</li> </ul>"},{"location":"getting-started/available-apis/#11-resolutions-api","title":"11. Resolutions API","text":"<ul> <li><code>/resolutions</code> (GET, POST)</li> <li><code>/resolutions/{id}</code> (GET, PUT, DELETE)</li> </ul>"},{"location":"getting-started/available-apis/#12-gallery-media-apis","title":"12. Gallery &amp; Media APIs","text":"<ul> <li><code>/gallery-store</code></li> <li><code>/image-gallery</code></li> <li><code>/video-gallery</code></li> <li><code>/save-image</code></li> <li><code>/save-video</code></li> </ul>"},{"location":"getting-started/available-apis/#13-store-settings-apis","title":"13. Store Settings APIs","text":"<ul> <li><code>/get-store-prompt</code></li> <li><code>/get-store-language</code></li> <li><code>/fonts-and-colors</code></li> </ul>"},{"location":"getting-started/available-apis/#14-content-generator-api","title":"14. Content Generator API","text":"<ul> <li><code>/content-generator</code></li> </ul>"},{"location":"getting-started/creation-login/","title":"Account Creation / Login","text":""},{"location":"getting-started/creation-login/#introduction","title":"Introduction","text":"<p>Welcome to the account creation and login section for Devaito. This part guides you through the steps needed to access the platform, whether you are a new or existing user.</p>"},{"location":"getting-started/creation-login/#creating-an-account","title":"Creating an Account","text":"<ol> <li>Go to the registration page: Visit the Devaito homepage and click the \"Create Account\" button.</li> <li>Fill out the form:</li> <li>Enter your email address.</li> <li>Choose a secure password.</li> <li>Provide your full name or a username.</li> <li>Verification: A verification email will be sent to you. Click the link provided to activate your account.</li> <li>Complete your profile: After activation, you can complete your profile with additional information (optional) to personalize your experience.</li> </ol>"},{"location":"getting-started/creation-login/#tips","title":"Tips","text":"<ul> <li>Make sure to use a valid email address for verification.</li> <li>Keep your login credentials in a secure place.</li> <li>If you encounter any issues, check the FAQ section or contact support.</li> </ul> <p>For more information, explore the other sections of this guide.</p>"},{"location":"getting-started/quick-start/","title":"\ud83d\ude80 Ultra Beginner Guide \u2014 Create an Application (No Experience Needed)","text":"<p>This guide is made for complete beginners. Even if you have never coded before, you can follow every step.</p>"},{"location":"getting-started/quick-start/#before-you-start-install-the-basic-tools","title":"\ud83e\uddf0 Before You Start \u2014 Install the Basic Tools","text":""},{"location":"getting-started/quick-start/#1-install-nodejs","title":"1\ufe0f\u20e3 Install Node.js","text":"<p>Node.js is a tool that lets you run JavaScript applications on your computer.</p> <ol> <li>Go to the official website: nodejs.org</li> <li>Click the green \u201cDownload (LTS)\u201d button (Add a screenshot of the Download button here)</li> <li>Open the downloaded file and install it (just click \u201cNext\u201d until the end)</li> <li>To check the installation:</li> <li>Open the terminal (on Windows, search for \u201cCommand Prompt\u201d or \u201cTerminal\u201d in the Start menu)</li> <li>Type:      <code>node -v</code></li> <li>If you see a version number (e.g., v20.0.0), it\u2019s working!</li> </ol> <p>Tip: If you get an error, try installing again or make sure you downloaded the \u201cLTS\u201d version.</p>"},{"location":"getting-started/quick-start/#2-install-git-optional-but-recommended","title":"2\ufe0f\u20e3 Install Git (optional but recommended)","text":"<p>Git helps you save and share your code easily.</p> <ol> <li>Go to: git-scm.com/downloads</li> <li>Download and install (just click \u201cNext\u201d until \u201cFinish\u201d)</li> <li>To check:</li> <li>Open the terminal and type:      <code>git --version</code></li> <li>If you see a version number, it\u2019s working!</li> </ol>"},{"location":"getting-started/quick-start/#1-create-a-flutter-application-mobile-web","title":"\ud83d\udcf1 1. Create a Flutter Application (mobile &amp; web)","text":""},{"location":"getting-started/quick-start/#a-install-flutter","title":"a) Install Flutter","text":"<p>Flutter lets you build apps for Android, iOS, and the web with the same code.</p> <ol> <li>Go to: docs.flutter.dev/get-started/install</li> <li>Download the Flutter SDK for your system (Windows, Mac, Linux)</li> <li>Follow the official installation tutorial (Add a screenshot of the SDK download here)</li> </ol>"},{"location":"getting-started/quick-start/#b-create-and-run-the-app","title":"b) Create and Run the App","text":"<ol> <li>Open the terminal</li> <li>Type:    <code>flutter create my_flutter_app    cd my_flutter_app    flutter run</code></li> <li>The app will start on an emulator or your phone (depending on your setup)</li> </ol> <p>Tip: If you get an error, check that Flutter is installed and your phone or emulator is connected.</p>"},{"location":"getting-started/quick-start/#2-create-a-react-web-app-with-vite","title":"\ud83c\udf10 2. Create a React Web App (with Vite)","text":"<p>React is a tool for building interactive websites. Vite helps you start a React project quickly.</p> <ol> <li>Open the terminal</li> <li>Type:    <code>npm create vite@latest my-react-app -- --template react    cd my-react-app    npm install    npm run dev</code></li> <li>Open the link shown in the terminal (e.g., http://localhost:5173) in your browser</li> </ol> <p>Tip: If you get an error, make sure Node.js is installed.</p>"},{"location":"getting-started/quick-start/#3-create-a-react-native-mobile-app-with-expo","title":"\ud83d\udcf2 3. Create a React Native Mobile App (with Expo)","text":"<p>React Native lets you build mobile apps with JavaScript. Expo makes creating and testing apps easier.</p> <ol> <li>Open the terminal</li> <li>Type:    <code>npm install --global expo-cli    expo init my-expo-app    cd my-expo-app    expo start</code></li> <li>Scan the QR code with your phone (you need the Expo Go app from the Play Store / App Store)</li> </ol> <p>Tip: If you don\u2019t see the QR code, make sure you\u2019re in the project folder and Expo is installed.</p>"},{"location":"getting-started/quick-start/#4-create-a-vuejs-web-app-with-vite","title":"\ud83c\udf10 4. Create a Vue.js Web App (with Vite)","text":"<p>Vue.js is a progressive JavaScript framework for building user interfaces.</p> <ol> <li>Open your terminal  </li> <li>Run:    <code>npm create vite@latest my-vue-app -- --template vue    cd my-vue-app    npm install    npm run dev</code></li> <li>Open the link shown in the terminal (e.g., http://localhost:5173) in your browser</li> </ol>"},{"location":"getting-started/quick-start/#5-create-an-angular-web-app","title":"\ud83c\udf10 5. Create an Angular Web App","text":"<p>Angular is a popular framework for building web applications.</p> <ol> <li>Open your terminal  </li> <li>Run:    <code>npm install -g @angular/cli    ng new my-angular-app    cd my-angular-app    ng serve</code></li> <li>Open the link shown in the terminal (e.g., http://localhost:4200) in your browser</li> </ol>"},{"location":"getting-started/quick-start/#6-create-a-devaito-plugin-project","title":"\ud83e\udde9 6. Create a Devaito Plugin Project","text":"<p>A plugin is a small app or module that adds new features to Devaito (for example: analytics, chat, payment, or custom integrations). To start building a plugin, you usually create a project in your favorite framework (React, Vue, Angular, etc.) and use the Devaito APIs.</p> <p>General steps:</p> <ol> <li>Choose your framework (React, Vue, Angular, etc.)</li> <li>Follow the quick start instructions above to create your project</li> <li>Use the Devaito API documentation to connect your plugin to Devaito</li> <li>Add your custom logic and UI</li> <li>Test your plugin locally</li> <li>Prepare for publishing on the Devaito App Store</li> </ol> <p>For a full example, see the API usage guide for code samples in each framework.</p>"},{"location":"getting-started/quick-start/#7-create-a-ruby-application","title":"\ud83d\udc8e 7. Create a Ruby Application","text":"<p>Ruby is a dynamic programming language often used for web development (for example, with Ruby on Rails).</p> <ol> <li>Open your terminal  </li> <li>Run:    <code>gem install rails    rails new my-ruby-app    cd my-ruby-app    rails server</code></li> <li>Open the link shown in the terminal (e.g., http://localhost:3000) in your browser</li> </ol> <p>Tip: If you get an error, make sure Ruby and Rails are installed. You can download Ruby from ruby-lang.org and follow the official installation guide.</p>"},{"location":"getting-started/quick-start/#8-create-a-nextjs-web-app","title":"\u26a1 8. Create a Next.js Web App","text":"<p>Next.js is a powerful React framework for building fast, modern web applications.</p> <ol> <li>Open your terminal  </li> <li>Run:    <code>npx create-next-app@latest my-next-app    cd my-next-app    npm run dev</code></li> <li>Open the link shown in the terminal (e.g., http://localhost:3000) in your browser</li> </ol>"},{"location":"getting-started/quick-start/#9-create-a-php-application","title":"\ud83d\udc18 9. Create a PHP Application","text":"<p>PHP is a widely-used scripting language for web development. You can use frameworks like Laravel or start with plain PHP.</p> <p>Laravel example:</p> <ol> <li>Open your terminal  </li> <li>Run:    <code>composer create-project laravel/laravel my-php-app    cd my-php-app    php artisan serve</code></li> <li>Open the link shown in the terminal (e.g., http://localhost:8000) in your browser</li> </ol> <p>Plain PHP example:</p> <ol> <li>Create a folder (e.g., <code>my-php-app</code>)</li> <li>Add a file named <code>index.php</code> with:    ```php    </li> </ol> <p><code>3. Start a local server (if you have PHP installed):</code>    php -S localhost:8000    ``` 4. Open http://localhost:8000 in your browser</p>"},{"location":"getting-started/quick-start/#quick-summary","title":"\ud83c\udf89 Quick Summary","text":"Technology Creation Command Flutter <code>flutter create my_flutter_app</code> React Web (Vite) <code>npm create vite@latest my-react-app -- --template react</code> React Native (Expo) <code>expo init my-expo-app</code> Vue.js Web (Vite) <code>npm create vite@latest my-vue-app -- --template vue</code> Angular Web <code>ng new my-angular-app</code> Ruby on Rails <code>rails new my-ruby-app</code> Next.js Web <code>npx create-next-app@latest my-next-app</code> Laravel (PHP) <code>composer create-project laravel/laravel my-php-app</code>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Once you have finished the installation, you can start integrating the required Devaito APIs by going to the API Management section.</p>"}]}