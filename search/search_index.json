{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Devaito Developer Guide Welcome to the Devaito Developer Guide ! This guide helps you create, test, and publish applications for the Devaito ecosystem\u2014a SaaS platform dedicated to website creation. What is Devaito? Devaito is a SaaS platform for building websites. It allows users to design, customize, and manage their sites easily with accessible tools and powerful integrations. With Devaito, you can: - Create apps to add features (e-commerce, analytics, etc.) to Devaito websites. - Monetize your apps with flexible pricing models (subscriptions, one-time payments). - Reach thousands of website owners through the Devaito App Store . Why develop for Devaito? As a developer, Devaito offers: Powerful APIs : Use REST APIs to access data, automate tasks, and integrate new features into the platform. Easy integration : Connect your apps to Devaito sites and interact with the ecosystem using documented endpoints. Quick start : Follow this guide to start developing and publishing your own apps. How this guide is organized This guide covers everything you need to build a Devaito app, step by step: Getting Started : Set up your environment and create a developer account. APIs : Learn to use Devaito APIs to access site data. Testing : Test your apps locally and in a sandbox environment. Publishing : Submit your app to the Devaito App Store. Resources : Find API references, support, and community links. Getting Started To begin: 1. Create a developer account on the Devaito platform. 2. Check the Getting Started section to set up your environment. 3. Explore the API documentation to integrate your features. Ready to get started? Jump into Getting Started and build your first Devaito app today! \ud83d\ude80 Devaito Developer Guide, powered by passion and code.","title":"Home / Introduction"},{"location":"#devaito-developer-guide","text":"Welcome to the Devaito Developer Guide ! This guide helps you create, test, and publish applications for the Devaito ecosystem\u2014a SaaS platform dedicated to website creation.","title":"Devaito Developer Guide"},{"location":"#what-is-devaito","text":"Devaito is a SaaS platform for building websites. It allows users to design, customize, and manage their sites easily with accessible tools and powerful integrations. With Devaito, you can: - Create apps to add features (e-commerce, analytics, etc.) to Devaito websites. - Monetize your apps with flexible pricing models (subscriptions, one-time payments). - Reach thousands of website owners through the Devaito App Store .","title":"What is Devaito?"},{"location":"#why-develop-for-devaito","text":"As a developer, Devaito offers: Powerful APIs : Use REST APIs to access data, automate tasks, and integrate new features into the platform. Easy integration : Connect your apps to Devaito sites and interact with the ecosystem using documented endpoints. Quick start : Follow this guide to start developing and publishing your own apps.","title":"Why develop for Devaito?"},{"location":"#how-this-guide-is-organized","text":"This guide covers everything you need to build a Devaito app, step by step: Getting Started : Set up your environment and create a developer account. APIs : Learn to use Devaito APIs to access site data. Testing : Test your apps locally and in a sandbox environment. Publishing : Submit your app to the Devaito App Store. Resources : Find API references, support, and community links.","title":"How this guide is organized"},{"location":"#getting-started","text":"To begin: 1. Create a developer account on the Devaito platform. 2. Check the Getting Started section to set up your environment. 3. Explore the API documentation to integrate your features.","title":"Getting Started"},{"location":"#ready-to-get-started","text":"Jump into Getting Started and build your first Devaito app today! \ud83d\ude80 Devaito Developer Guide, powered by passion and code.","title":"Ready to get started?"},{"location":"api-management/list/","text":"List of Available APIs and Their Description Introduction This section provides a detailed list of the APIs available on Devaito (SaaS multi-tenant version). Each API covers features for content management, e-commerce, social media, and customization. Main server : https://admin.devaito.com/api 1. Authentication API Description : Manages user authentication and session handling. Endpoints : /login \u2192 User login /logout \u2192 User logout Usage : Secures access and generates a Bearer token for all authenticated operations. 2. User API Description : Retrieves user and store information. Endpoint : /user Usage : Obtenir le profil, avatar, type de site (ecommerce, vitrine, etc.). 3. Products API Description : Manages products and product details. Endpoints : /fetch-all-products \u2192 Get all products /get-product/{slug} \u2192 Get product details by slug /popular-products \u2192 Get popular products Utilisation : Afficher produits, images, prix, promotions. 4. Orders API Description : Handles order management. Endpoint : /get-all-orders Utilisation : Suivi des commandes en livraison. 5. Categories API Description : Manages product categories. Endpoints : /categories (GET, POST, PUT, DELETE) /categories/{id} /fetch-categories /fetch-categories-product/{permalink} Utilisation : Filtrage et navigation produit. 6. Campaigns API Description : Manages marketing campaigns. Endpoints : /campaigns (GET, POST) /campaigns/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er, planifier et g\u00e9rer des campagnes. 7. Posts API Description : Handles posts and job-related actions. Endpoints : /posts (GET, POST) /posts/{id} (GET, PUT, DELETE) /posts/{id}/{job_id} Utilisation : Publier et g\u00e9rer du contenu li\u00e9 au store. 8. Social Media APIs a. Facebook API Endpoints : /facebook/pages /facebook/publish-post /facebook/publish-post-job Utilisation : Int\u00e9gration avec les pages Facebook de l\u2019utilisateur. b. Instagram API Endpoints : /instagram/publish-post /instagram/publish-post-job Utilisation : Poster du contenu sur Instagram via pages li\u00e9es \u00e0 Facebook. c. Platform Connections API Endpoint : /platform-connections Utilisation : Voir les comptes sociaux connect\u00e9s. 9. Templates API Description : Manages templates for apps and sites. Endpoints : /templates (GET, POST) /templates/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er et r\u00e9utiliser des mod\u00e8les pour publications. 10. Platforms API Description : Manages platforms and integrations. Endpoints : /platforms (GET, POST) /platforms/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir les plateformes sociales ou de publication. 11. Resolutions API Description : Handles image/video resolutions. Endpoints : /resolutions (GET, POST) /resolutions/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir formats d\u2019images/vid\u00e9os adapt\u00e9s aux plateformes. 12. Gallery & Media APIs Description : Manages media files and galleries. Endpoints : /gallery-store /image-gallery /video-gallery /save-image /save-video Utilisation : Centraliser les m\u00e9dias du store. 13. Store Settings APIs Description : Manages store configuration and appearance. Endpoints : /get-store-prompt /get-store-language /fonts-and-colors Utilisation : Branding et customisation du site. 14. Content Generator API Description : Generates content using AI. Endpoint : /content-generator","title":"API List & Descriptions"},{"location":"api-management/list/#list-of-available-apis-and-their-description","text":"","title":"List of Available APIs and Their Description"},{"location":"api-management/list/#introduction","text":"This section provides a detailed list of the APIs available on Devaito (SaaS multi-tenant version). Each API covers features for content management, e-commerce, social media, and customization. Main server : https://admin.devaito.com/api","title":"Introduction"},{"location":"api-management/list/#1-authentication-api","text":"Description : Manages user authentication and session handling. Endpoints : /login \u2192 User login /logout \u2192 User logout Usage : Secures access and generates a Bearer token for all authenticated operations.","title":"1. Authentication API"},{"location":"api-management/list/#2-user-api","text":"Description : Retrieves user and store information. Endpoint : /user Usage : Obtenir le profil, avatar, type de site (ecommerce, vitrine, etc.).","title":"2. User API"},{"location":"api-management/list/#3-products-api","text":"Description : Manages products and product details. Endpoints : /fetch-all-products \u2192 Get all products /get-product/{slug} \u2192 Get product details by slug /popular-products \u2192 Get popular products Utilisation : Afficher produits, images, prix, promotions.","title":"3. Products API"},{"location":"api-management/list/#4-orders-api","text":"Description : Handles order management. Endpoint : /get-all-orders Utilisation : Suivi des commandes en livraison.","title":"4. Orders API"},{"location":"api-management/list/#5-categories-api","text":"Description : Manages product categories. Endpoints : /categories (GET, POST, PUT, DELETE) /categories/{id} /fetch-categories /fetch-categories-product/{permalink} Utilisation : Filtrage et navigation produit.","title":"5. Categories API"},{"location":"api-management/list/#6-campaigns-api","text":"Description : Manages marketing campaigns. Endpoints : /campaigns (GET, POST) /campaigns/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er, planifier et g\u00e9rer des campagnes.","title":"6. Campaigns API"},{"location":"api-management/list/#7-posts-api","text":"Description : Handles posts and job-related actions. Endpoints : /posts (GET, POST) /posts/{id} (GET, PUT, DELETE) /posts/{id}/{job_id} Utilisation : Publier et g\u00e9rer du contenu li\u00e9 au store.","title":"7. Posts API"},{"location":"api-management/list/#8-social-media-apis","text":"","title":"8. Social Media APIs"},{"location":"api-management/list/#a-facebook-api","text":"Endpoints : /facebook/pages /facebook/publish-post /facebook/publish-post-job Utilisation : Int\u00e9gration avec les pages Facebook de l\u2019utilisateur.","title":"a. Facebook API"},{"location":"api-management/list/#b-instagram-api","text":"Endpoints : /instagram/publish-post /instagram/publish-post-job Utilisation : Poster du contenu sur Instagram via pages li\u00e9es \u00e0 Facebook.","title":"b. Instagram API"},{"location":"api-management/list/#c-platform-connections-api","text":"Endpoint : /platform-connections Utilisation : Voir les comptes sociaux connect\u00e9s.","title":"c. Platform Connections API"},{"location":"api-management/list/#9-templates-api","text":"Description : Manages templates for apps and sites. Endpoints : /templates (GET, POST) /templates/{id} (GET, PUT, DELETE) Utilisation : Cr\u00e9er et r\u00e9utiliser des mod\u00e8les pour publications.","title":"9. Templates API"},{"location":"api-management/list/#10-platforms-api","text":"Description : Manages platforms and integrations. Endpoints : /platforms (GET, POST) /platforms/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir les plateformes sociales ou de publication.","title":"10. Platforms API"},{"location":"api-management/list/#11-resolutions-api","text":"Description : Handles image/video resolutions. Endpoints : /resolutions (GET, POST) /resolutions/{id} (GET, PUT, DELETE) Utilisation : D\u00e9finir formats d\u2019images/vid\u00e9os adapt\u00e9s aux plateformes.","title":"11. Resolutions API"},{"location":"api-management/list/#12-gallery-media-apis","text":"Description : Manages media files and galleries. Endpoints : /gallery-store /image-gallery /video-gallery /save-image /save-video Utilisation : Centraliser les m\u00e9dias du store.","title":"12. Gallery &amp; Media APIs"},{"location":"api-management/list/#13-store-settings-apis","text":"Description : Manages store configuration and appearance. Endpoints : /get-store-prompt /get-store-language /fonts-and-colors Utilisation : Branding et customisation du site.","title":"13. Store Settings APIs"},{"location":"api-management/list/#14-content-generator-api","text":"Description : Generates content using AI. Endpoint : /content-generator","title":"14. Content Generator API"},{"location":"api-management/usage/","text":"How to Connect/Use Devaito APIs Introduction This guide explains step by step how to integrate and use Devaito APIs (SaaS multi-tenant version). You will find code examples, best practices, and essential steps for each API. Base URL : https://admin.devaito.com/api Initial Setup 1. Prerequisites You need access to the Devaito server (API URL and a user account). Your development environment should be ready (for example, VS Code for React, or Flutter SDK for Flutter). You need an HTTP library to make requests (like fetch or axios for React, or the http package for Flutter). You must handle authentication tokens: after login, the API returns a token that you must store and use for all protected requests. 2. How to Use the Token After a successful login ( /login ), the API returns a token (usually called token or access_token ). Store this token securely (for example, in localStorage for React or in secure storage for Flutter). For every request to a protected endpoint, add this token in the Authorization header: // React example const token = localStorage.getItem('authToken'); const headers = { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }; // Flutter example final headers = { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }; API Guide 1. Authentication API User Login // React example const login = async (email, password) => { const response = await fetch('https://admin.devaito.com/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) }); const result = await response.json(); if (response.ok && result.token) { localStorage.setItem('authToken', result.token); } return result; } // Flutter example import 'package:http/http.dart' as http; import 'dart:convert'; Future<String?> login(String email, String password) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/login'), headers: { 'Content-Type': 'application/json' }, body: jsonEncode({ 'email': email, 'password': password }), ); final result = jsonDecode(response.body); if (response.statusCode == 200 && result['token'] != null) { return result['token']; } return null; } Logout // React example const logout = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/logout', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` } }); if (response.ok) localStorage.removeItem('authToken'); return await response.json(); } // Flutter example Future<Map<String, dynamic>> logout(String token) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/logout'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 2. User API Get User // React example const getUser = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/user', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getUser(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/user'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 3. Products API Get All Products // React example const getProducts = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fetch-all-products', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getProducts(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fetch-all-products'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } Get Product by Slug // React example const getProduct = async (slug) => { const token = localStorage.getItem('authToken'); const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`, { headers: { 'Authorization': `Bearer ${token}` } }); if (response.status === 404) { throw new Error('Product not found'); } return await response.json(); } // Flutter example Future<Map<String, dynamic>> getProduct(String token, String slug) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/get-product/$slug'), headers: { 'Authorization': 'Bearer $token' }, ); if (response.statusCode == 404) { throw Exception('Product not found'); } return jsonDecode(response.body); } 4. Orders API // React example const getOrders = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/get-all-orders', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getOrders(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/get-all-orders'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 5. Categories API // React example const getCategories = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fetch-categories', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } const getProductsByCategory = async (permalink) => { const token = localStorage.getItem('authToken'); const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`, { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getCategories(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fetch-categories'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } Future<Map<String, dynamic>> getProductsByCategory(String token, String permalink) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fetch-categories-product/$permalink'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 6. Campaigns API // React example const createCampaign = async (data) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/campaigns', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> createCampaign(String token, Map<String, dynamic> data) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/campaigns'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode(data), ); return jsonDecode(response.body); } 7. Posts API // React example const createPost = async (data) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/posts', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> createPost(String token, Map<String, dynamic> data) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/posts'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode(data), ); return jsonDecode(response.body); } 8. Social Media APIs Facebook - Publish a Post // React example const publishFacebookPost = async (pageIds, caption, imageUrl) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ page_id: pageIds, caption, imageUrl }) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> publishFacebookPost(String token, List<String> pageIds, String caption, String imageUrl) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/facebook/publish-post'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode({ 'page_id': pageIds, 'caption': caption, 'imageUrl': imageUrl }), ); return jsonDecode(response.body); } Instagram - Publish a Post // React example const publishInstagramPost = async (caption, imageUrl) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ caption, imageUrl }) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> publishInstagramPost(String token, String caption, String imageUrl) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/instagram/publish-post'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode({ 'caption': caption, 'imageUrl': imageUrl }), ); return jsonDecode(response.body); } 9. Templates API // React example const getTemplates = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/templates', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getTemplates(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/templates'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 10. Gallery & Media API Upload an Image // React example const uploadImage = async (file) => { const token = localStorage.getItem('authToken'); const formData = new FormData(); formData.append(\"file\", file); const response = await fetch('https://admin.devaito.com/api/save-image', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }, body: formData }); return await response.json(); } // Flutter example import 'package:http/http.dart' as http; Future<Map<String, dynamic>> uploadImage(String token, String filePath) async { var request = http.MultipartRequest( 'POST', Uri.parse('https://admin.devaito.com/api/save-image'), ); request.headers['Authorization'] = 'Bearer $token'; request.files.add(await http.MultipartFile.fromPath('file', filePath)); final response = await request.send(); final respStr = await response.stream.bytesToString(); return jsonDecode(respStr); } List Image Gallery // React example const getImageGallery = async (page = 1) => { const token = localStorage.getItem('authToken'); const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`, { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getImageGallery(String token, int page) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/image-gallery?page=$page'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 11. Store Settings API // React example const getFontsAndColors = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getFontsAndColors(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fonts-and-colors'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } 12. Content Generator API // React example const generateContent = async (message) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/content-generator', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ message }) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> generateContent(String token, String message) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/content-generator'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode({ 'message': message }), ); return jsonDecode(response.body); } Best Practices Always use HTTPS in production Store tokens securely Implement automatic token refresh Cache static data (categories, templates, etc.) Handle errors (401 \u2192 reconnect user, 404 \u2192 clear message) Debugging Use Postman/Insomnia to test endpoints Enable browser network DevTools Log all requests/responses on the client side const originalFetch = window.fetch; window.fetch = async (...args) => { console.log('API Call:', args[0], args[1]); const response = await originalFetch(...args); console.log('API Response:', response.status, response.statusText); return response; }","title":"API Usage"},{"location":"api-management/usage/#how-to-connectuse-devaito-apis","text":"","title":"How to Connect/Use Devaito APIs"},{"location":"api-management/usage/#introduction","text":"This guide explains step by step how to integrate and use Devaito APIs (SaaS multi-tenant version). You will find code examples, best practices, and essential steps for each API. Base URL : https://admin.devaito.com/api","title":"Introduction"},{"location":"api-management/usage/#initial-setup","text":"","title":"Initial Setup"},{"location":"api-management/usage/#1-prerequisites","text":"You need access to the Devaito server (API URL and a user account). Your development environment should be ready (for example, VS Code for React, or Flutter SDK for Flutter). You need an HTTP library to make requests (like fetch or axios for React, or the http package for Flutter). You must handle authentication tokens: after login, the API returns a token that you must store and use for all protected requests.","title":"1. Prerequisites"},{"location":"api-management/usage/#2-how-to-use-the-token","text":"After a successful login ( /login ), the API returns a token (usually called token or access_token ). Store this token securely (for example, in localStorage for React or in secure storage for Flutter). For every request to a protected endpoint, add this token in the Authorization header: // React example const token = localStorage.getItem('authToken'); const headers = { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }; // Flutter example final headers = { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' };","title":"2. How to Use the Token"},{"location":"api-management/usage/#api-guide","text":"","title":"API Guide"},{"location":"api-management/usage/#1-authentication-api","text":"","title":"1. Authentication API"},{"location":"api-management/usage/#user-login","text":"// React example const login = async (email, password) => { const response = await fetch('https://admin.devaito.com/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) }); const result = await response.json(); if (response.ok && result.token) { localStorage.setItem('authToken', result.token); } return result; } // Flutter example import 'package:http/http.dart' as http; import 'dart:convert'; Future<String?> login(String email, String password) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/login'), headers: { 'Content-Type': 'application/json' }, body: jsonEncode({ 'email': email, 'password': password }), ); final result = jsonDecode(response.body); if (response.statusCode == 200 && result['token'] != null) { return result['token']; } return null; }","title":"User Login"},{"location":"api-management/usage/#logout","text":"// React example const logout = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/logout', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` } }); if (response.ok) localStorage.removeItem('authToken'); return await response.json(); } // Flutter example Future<Map<String, dynamic>> logout(String token) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/logout'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"Logout"},{"location":"api-management/usage/#2-user-api","text":"","title":"2. User API"},{"location":"api-management/usage/#get-user","text":"// React example const getUser = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/user', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getUser(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/user'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"Get User"},{"location":"api-management/usage/#3-products-api","text":"","title":"3. Products API"},{"location":"api-management/usage/#get-all-products","text":"// React example const getProducts = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fetch-all-products', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getProducts(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fetch-all-products'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"Get All Products"},{"location":"api-management/usage/#get-product-by-slug","text":"// React example const getProduct = async (slug) => { const token = localStorage.getItem('authToken'); const response = await fetch(`https://admin.devaito.com/api/get-product/${slug}`, { headers: { 'Authorization': `Bearer ${token}` } }); if (response.status === 404) { throw new Error('Product not found'); } return await response.json(); } // Flutter example Future<Map<String, dynamic>> getProduct(String token, String slug) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/get-product/$slug'), headers: { 'Authorization': 'Bearer $token' }, ); if (response.statusCode == 404) { throw Exception('Product not found'); } return jsonDecode(response.body); }","title":"Get Product by Slug"},{"location":"api-management/usage/#4-orders-api","text":"// React example const getOrders = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/get-all-orders', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getOrders(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/get-all-orders'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"4. Orders API"},{"location":"api-management/usage/#5-categories-api","text":"// React example const getCategories = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fetch-categories', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } const getProductsByCategory = async (permalink) => { const token = localStorage.getItem('authToken'); const response = await fetch(`https://admin.devaito.com/api/fetch-categories-product/${permalink}`, { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getCategories(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fetch-categories'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); } Future<Map<String, dynamic>> getProductsByCategory(String token, String permalink) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fetch-categories-product/$permalink'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"5. Categories API"},{"location":"api-management/usage/#6-campaigns-api","text":"// React example const createCampaign = async (data) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/campaigns', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> createCampaign(String token, Map<String, dynamic> data) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/campaigns'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode(data), ); return jsonDecode(response.body); }","title":"6. Campaigns API"},{"location":"api-management/usage/#7-posts-api","text":"// React example const createPost = async (data) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/posts', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> createPost(String token, Map<String, dynamic> data) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/posts'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode(data), ); return jsonDecode(response.body); }","title":"7. Posts API"},{"location":"api-management/usage/#8-social-media-apis","text":"","title":"8. Social Media APIs"},{"location":"api-management/usage/#facebook-publish-a-post","text":"// React example const publishFacebookPost = async (pageIds, caption, imageUrl) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/facebook/publish-post', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ page_id: pageIds, caption, imageUrl }) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> publishFacebookPost(String token, List<String> pageIds, String caption, String imageUrl) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/facebook/publish-post'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode({ 'page_id': pageIds, 'caption': caption, 'imageUrl': imageUrl }), ); return jsonDecode(response.body); }","title":"Facebook - Publish a Post"},{"location":"api-management/usage/#instagram-publish-a-post","text":"// React example const publishInstagramPost = async (caption, imageUrl) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/instagram/publish-post', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ caption, imageUrl }) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> publishInstagramPost(String token, String caption, String imageUrl) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/instagram/publish-post'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode({ 'caption': caption, 'imageUrl': imageUrl }), ); return jsonDecode(response.body); }","title":"Instagram - Publish a Post"},{"location":"api-management/usage/#9-templates-api","text":"// React example const getTemplates = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/templates', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getTemplates(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/templates'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"9. Templates API"},{"location":"api-management/usage/#10-gallery-media-api","text":"","title":"10. Gallery &amp; Media API"},{"location":"api-management/usage/#upload-an-image","text":"// React example const uploadImage = async (file) => { const token = localStorage.getItem('authToken'); const formData = new FormData(); formData.append(\"file\", file); const response = await fetch('https://admin.devaito.com/api/save-image', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }, body: formData }); return await response.json(); } // Flutter example import 'package:http/http.dart' as http; Future<Map<String, dynamic>> uploadImage(String token, String filePath) async { var request = http.MultipartRequest( 'POST', Uri.parse('https://admin.devaito.com/api/save-image'), ); request.headers['Authorization'] = 'Bearer $token'; request.files.add(await http.MultipartFile.fromPath('file', filePath)); final response = await request.send(); final respStr = await response.stream.bytesToString(); return jsonDecode(respStr); }","title":"Upload an Image"},{"location":"api-management/usage/#list-image-gallery","text":"// React example const getImageGallery = async (page = 1) => { const token = localStorage.getItem('authToken'); const response = await fetch(`https://admin.devaito.com/api/image-gallery?page=${page}`, { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getImageGallery(String token, int page) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/image-gallery?page=$page'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"List Image Gallery"},{"location":"api-management/usage/#11-store-settings-api","text":"// React example const getFontsAndColors = async () => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/fonts-and-colors', { headers: { 'Authorization': `Bearer ${token}` } }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> getFontsAndColors(String token) async { final response = await http.get( Uri.parse('https://admin.devaito.com/api/fonts-and-colors'), headers: { 'Authorization': 'Bearer $token' }, ); return jsonDecode(response.body); }","title":"11. Store Settings API"},{"location":"api-management/usage/#12-content-generator-api","text":"// React example const generateContent = async (message) => { const token = localStorage.getItem('authToken'); const response = await fetch('https://admin.devaito.com/api/content-generator', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ message }) }); return await response.json(); } // Flutter example Future<Map<String, dynamic>> generateContent(String token, String message) async { final response = await http.post( Uri.parse('https://admin.devaito.com/api/content-generator'), headers: { 'Authorization': 'Bearer $token', 'Content-Type': 'application/json' }, body: jsonEncode({ 'message': message }), ); return jsonDecode(response.body); }","title":"12. Content Generator API"},{"location":"api-management/usage/#best-practices","text":"Always use HTTPS in production Store tokens securely Implement automatic token refresh Cache static data (categories, templates, etc.) Handle errors (401 \u2192 reconnect user, 404 \u2192 clear message)","title":"Best Practices"},{"location":"api-management/usage/#debugging","text":"Use Postman/Insomnia to test endpoints Enable browser network DevTools Log all requests/responses on the client side const originalFetch = window.fetch; window.fetch = async (...args) => { console.log('API Call:', args[0], args[1]); const response = await originalFetch(...args); console.log('API Response:', response.status, response.statusText); return response; }","title":"Debugging"},{"location":"app-management/collaborators/","text":"Managing Collaborators on an Application Introduction This section explains how to manage collaborators on your applications in Devaito, making teamwork easier. Adding Collaborators Access Settings : Open the application card and click \"Manage collaborators\". Invite : Enter the collaborator\u2019s email address and select a role (read, write, admin). Confirmation : The invited person will receive a notification to accept the invitation. Managing Roles and Permissions Available Roles : Read : View-only access. Write : Can edit code and styles. Admin : Full rights, including managing other collaborators. Modification : Adjust roles anytime via the application settings. Removing Collaborators Select : Go to \"Manage collaborators\" and find the collaborator. Action : Click \"Remove\" and confirm the deletion. Notification : The collaborator will be notified that their access has ended. Tips Assign roles that match each collaborator\u2019s responsibilities. Monitor the list of collaborators to keep your team efficient. Check the \"Collaboration\" section for best team practices. For more information, explore the other sections of this guide.","title":"Collaborator Management"},{"location":"app-management/collaborators/#managing-collaborators-on-an-application","text":"","title":"Managing Collaborators on an Application"},{"location":"app-management/collaborators/#introduction","text":"This section explains how to manage collaborators on your applications in Devaito, making teamwork easier.","title":"Introduction"},{"location":"app-management/collaborators/#adding-collaborators","text":"Access Settings : Open the application card and click \"Manage collaborators\". Invite : Enter the collaborator\u2019s email address and select a role (read, write, admin). Confirmation : The invited person will receive a notification to accept the invitation.","title":"Adding Collaborators"},{"location":"app-management/collaborators/#managing-roles-and-permissions","text":"Available Roles : Read : View-only access. Write : Can edit code and styles. Admin : Full rights, including managing other collaborators. Modification : Adjust roles anytime via the application settings.","title":"Managing Roles and Permissions"},{"location":"app-management/collaborators/#removing-collaborators","text":"Select : Go to \"Manage collaborators\" and find the collaborator. Action : Click \"Remove\" and confirm the deletion. Notification : The collaborator will be notified that their access has ended.","title":"Removing Collaborators"},{"location":"app-management/collaborators/#tips","text":"Assign roles that match each collaborator\u2019s responsibilities. Monitor the list of collaborators to keep your team efficient. Check the \"Collaboration\" section for best team practices. For more information, explore the other sections of this guide.","title":"Tips"},{"location":"app-management/deletion/","text":"Deleting / Archiving an Application Introduction This section guides you on how to delete or archive an application on Devaito, ensuring these actions are performed securely and, when possible, reversibly. Steps to Archive Access Settings : Open the application card and click on the management options (e.g., dropdown menu \"...\"). Select Archive : Choose \"Archive\" to pause the application without losing any data. Confirmation : Confirm the action; the application will change to \"Archived\" status. Restoration : To restore, find the archived application and select \"Restore\". Steps to Delete Access Settings : Same procedure as for archiving. Select Delete : Choose \"Delete\" for permanent removal. Confirmation : Enter a confirmation (e.g., the application name) to prevent mistakes. Immediate Effect : The application will be removed from your dashboard and all associated data will be erased. Important Points Archiving vs Deletion : Archiving is reversible and ideal for temporary projects; deletion is permanent. Impact on Collaborators : Collaborators will lose access when an application is deleted or archived. Data : Make sure to back up critical data before taking any action. Tips Use archiving to keep inactive projects without cluttering your dashboard. Double-check before deleting to avoid accidental data loss. See the \"Version Management and History\" section for backup options. For more information, explore the other sections of this guide.","title":"Deletion / Archiving"},{"location":"app-management/deletion/#deleting-archiving-an-application","text":"","title":"Deleting / Archiving an Application"},{"location":"app-management/deletion/#introduction","text":"This section guides you on how to delete or archive an application on Devaito, ensuring these actions are performed securely and, when possible, reversibly.","title":"Introduction"},{"location":"app-management/deletion/#steps-to-archive","text":"Access Settings : Open the application card and click on the management options (e.g., dropdown menu \"...\"). Select Archive : Choose \"Archive\" to pause the application without losing any data. Confirmation : Confirm the action; the application will change to \"Archived\" status. Restoration : To restore, find the archived application and select \"Restore\".","title":"Steps to Archive"},{"location":"app-management/deletion/#steps-to-delete","text":"Access Settings : Same procedure as for archiving. Select Delete : Choose \"Delete\" for permanent removal. Confirmation : Enter a confirmation (e.g., the application name) to prevent mistakes. Immediate Effect : The application will be removed from your dashboard and all associated data will be erased.","title":"Steps to Delete"},{"location":"app-management/deletion/#important-points","text":"Archiving vs Deletion : Archiving is reversible and ideal for temporary projects; deletion is permanent. Impact on Collaborators : Collaborators will lose access when an application is deleted or archived. Data : Make sure to back up critical data before taking any action.","title":"Important Points"},{"location":"app-management/deletion/#tips","text":"Use archiving to keep inactive projects without cluttering your dashboard. Double-check before deleting to avoid accidental data loss. See the \"Version Management and History\" section for backup options. For more information, explore the other sections of this guide.","title":"Tips"},{"location":"app-management/deployment/","text":"Application Deployment Introduction This section explains how to deploy your application to make it accessible and functional for users. Deployment Steps Pre-Deployment Checklist : Make sure your application is complete and tested in your editor. Confirm all APIs and integrations are working. Prepare for Store Deployment : For mobile apps, you need to build a release version (APK for Android, IPA for iOS). In Flutter, run: flutter build apk --release This will generate an APK file in the build/app/outputs/flutter-apk/ directory. Create a Developer Account : Register for a Google Play Console account (for Android). For iOS, use Apple Developer . Upload Your App : Go to the Google Play Console. Create a new app and fill in the required information (app name, description, screenshots, etc.). Upload your APK file in the \"Release\" section. Complete the content rating, privacy policy, and other required forms. Review and Publish : Submit your app for review. Once approved by Google, your app will be available on the Play Store. Post-Deployment Checks : Test your app using the Play Store link. Monitor user feedback and crash reports in the console. Important Notes Deployment to app stores may take several days for review. Make sure your app complies with store policies to avoid rejection. Tips Always back up your project before building the release version. Read the official Google Play launch checklist . For automated deployment, explore CI/CD tools like GitHub Actions or Bitrise. For more information, check other sections of this guide.","title":"Deployment"},{"location":"app-management/deployment/#application-deployment","text":"","title":"Application Deployment"},{"location":"app-management/deployment/#introduction","text":"This section explains how to deploy your application to make it accessible and functional for users.","title":"Introduction"},{"location":"app-management/deployment/#deployment-steps","text":"Pre-Deployment Checklist : Make sure your application is complete and tested in your editor. Confirm all APIs and integrations are working. Prepare for Store Deployment : For mobile apps, you need to build a release version (APK for Android, IPA for iOS). In Flutter, run: flutter build apk --release This will generate an APK file in the build/app/outputs/flutter-apk/ directory. Create a Developer Account : Register for a Google Play Console account (for Android). For iOS, use Apple Developer . Upload Your App : Go to the Google Play Console. Create a new app and fill in the required information (app name, description, screenshots, etc.). Upload your APK file in the \"Release\" section. Complete the content rating, privacy policy, and other required forms. Review and Publish : Submit your app for review. Once approved by Google, your app will be available on the Play Store. Post-Deployment Checks : Test your app using the Play Store link. Monitor user feedback and crash reports in the console.","title":"Deployment Steps"},{"location":"app-management/deployment/#important-notes","text":"Deployment to app stores may take several days for review. Make sure your app complies with store policies to avoid rejection.","title":"Important Notes"},{"location":"app-management/deployment/#tips","text":"Always back up your project before building the release version. Read the official Google Play launch checklist . For automated deployment, explore CI/CD tools like GitHub Actions or Bitrise. For more information, check other sections of this guide.","title":"Tips"},{"location":"appendices/api-references/","text":"API References Overview This section provides detailed references for Devaito v2.0 APIs, including endpoints, parameters, and usage examples. For a list of available APIs, see API List & Descriptions. API Structure Devaito APIs follow RESTful conventions: Base URL: https://admin.devaito.com/api Authentication: Use Bearer tokens in the Authorization header (see Authentication API). Formats: JSON for requests and responses. Main Endpoints 1. Authentication API POST /login \u2014 User login, returns a token. POST /logout \u2014 Logout, invalidates the token. 2. User API GET /user \u2014 Get user and store information. 3. Products API GET /fetch-all-products \u2014 List all products. GET /get-product/{slug} \u2014 Get product details by slug. GET /popular-products \u2014 List popular products. 4. Orders API GET /get-all-orders \u2014 List all orders. 5. Categories API GET /categories \u2014 List categories. POST /categories \u2014 Create a category. PUT /categories/{id} \u2014 Update a category. DELETE /categories/{id} \u2014 Delete a category. GET /fetch-categories \u2014 List categories with images & slug. GET /fetch-categories-product/{permalink} \u2014 Products by category. 6. Campaigns API GET /campaigns \u2014 List campaigns. POST /campaigns \u2014 Create a campaign. GET /campaigns/{id} \u2014 Get campaign details. PUT /campaigns/{id} \u2014 Update a campaign. DELETE /campaigns/{id} \u2014 Delete a campaign. 7. Posts API GET /posts \u2014 List posts. POST /posts \u2014 Create a post. GET /posts/{id} \u2014 Get post details. PUT /posts/{id} \u2014 Update a post. DELETE /posts/{id} \u2014 Delete a post. GET /posts/{id}/{job_id} \u2014 Update job linked to a post. 8. Social Media APIs a. Facebook API GET /facebook/pages \u2014 Get connected Facebook pages. POST /facebook/publish-post \u2014 Publish a post immediately. POST /facebook/publish-post-job \u2014 Schedule a post. b. Instagram API POST /instagram/publish-post \u2014 Publish a post immediately. POST /instagram/publish-post-job \u2014 Schedule a post. c. Platform Connections API GET /platform-connections \u2014 View connected social accounts. 9. Templates API GET /templates \u2014 List templates. POST /templates \u2014 Create a template. GET /templates/{id} \u2014 Get template details. PUT /templates/{id} \u2014 Update a template. DELETE /templates/{id} \u2014 Delete a template. 10. Platforms API GET /platforms \u2014 List platforms. POST /platforms \u2014 Create a platform. GET /platforms/{id} \u2014 Get platform details. PUT /platforms/{id} \u2014 Update a platform. DELETE /platforms/{id} \u2014 Delete a platform. 11. Resolutions API GET /resolutions \u2014 List resolutions. POST /resolutions \u2014 Create a resolution. GET /resolutions/{id} \u2014 Get resolution details. PUT /resolutions/{id} \u2014 Update a resolution. DELETE /resolutions/{id} \u2014 Delete a resolution. 12. Gallery & Media APIs GET /gallery-store \u2014 All store media. GET /image-gallery \u2014 Image gallery (paginated). GET /video-gallery \u2014 Video gallery (paginated). POST /save-image \u2014 Upload image. POST /save-video \u2014 Upload video. 13. Store Settings APIs GET /get-store-prompt \u2014 Get store description. GET /get-store-language \u2014 Get store language. GET /fonts-and-colors \u2014 Get configured fonts & colors. 14. Content Generator API POST /content-generator \u2014 Generate content via AI. Best Practices Rate Limits: Adhere to limits outlined in API Usage. Error Handling: Handle HTTP status codes (e.g., 429 for rate limits, 401 for auth errors). Security: Store tokens securely and rotate regularly. Troubleshooting Authentication Errors: Verify token validity (see Authentication API). Invalid Requests: Check parameter formats and required fields. Rate Limit Issues: Optimize request frequency or contact support for higher quotas. For full API documentation, visit https://admin.devaito.com/api/docs or contact support@devaito.com.","title":"API References"},{"location":"appendices/api-references/#api-references","text":"","title":"API References"},{"location":"appendices/api-references/#overview","text":"This section provides detailed references for Devaito v2.0 APIs, including endpoints, parameters, and usage examples. For a list of available APIs, see API List & Descriptions.","title":"Overview"},{"location":"appendices/api-references/#api-structure","text":"Devaito APIs follow RESTful conventions: Base URL: https://admin.devaito.com/api Authentication: Use Bearer tokens in the Authorization header (see Authentication API). Formats: JSON for requests and responses.","title":"API Structure"},{"location":"appendices/api-references/#main-endpoints","text":"","title":"Main Endpoints"},{"location":"appendices/api-references/#1-authentication-api","text":"POST /login \u2014 User login, returns a token. POST /logout \u2014 Logout, invalidates the token.","title":"1. Authentication API"},{"location":"appendices/api-references/#2-user-api","text":"GET /user \u2014 Get user and store information.","title":"2. User API"},{"location":"appendices/api-references/#3-products-api","text":"GET /fetch-all-products \u2014 List all products. GET /get-product/{slug} \u2014 Get product details by slug. GET /popular-products \u2014 List popular products.","title":"3. Products API"},{"location":"appendices/api-references/#4-orders-api","text":"GET /get-all-orders \u2014 List all orders.","title":"4. Orders API"},{"location":"appendices/api-references/#5-categories-api","text":"GET /categories \u2014 List categories. POST /categories \u2014 Create a category. PUT /categories/{id} \u2014 Update a category. DELETE /categories/{id} \u2014 Delete a category. GET /fetch-categories \u2014 List categories with images & slug. GET /fetch-categories-product/{permalink} \u2014 Products by category.","title":"5. Categories API"},{"location":"appendices/api-references/#6-campaigns-api","text":"GET /campaigns \u2014 List campaigns. POST /campaigns \u2014 Create a campaign. GET /campaigns/{id} \u2014 Get campaign details. PUT /campaigns/{id} \u2014 Update a campaign. DELETE /campaigns/{id} \u2014 Delete a campaign.","title":"6. Campaigns API"},{"location":"appendices/api-references/#7-posts-api","text":"GET /posts \u2014 List posts. POST /posts \u2014 Create a post. GET /posts/{id} \u2014 Get post details. PUT /posts/{id} \u2014 Update a post. DELETE /posts/{id} \u2014 Delete a post. GET /posts/{id}/{job_id} \u2014 Update job linked to a post.","title":"7. Posts API"},{"location":"appendices/api-references/#8-social-media-apis","text":"","title":"8. Social Media APIs"},{"location":"appendices/api-references/#a-facebook-api","text":"GET /facebook/pages \u2014 Get connected Facebook pages. POST /facebook/publish-post \u2014 Publish a post immediately. POST /facebook/publish-post-job \u2014 Schedule a post.","title":"a. Facebook API"},{"location":"appendices/api-references/#b-instagram-api","text":"POST /instagram/publish-post \u2014 Publish a post immediately. POST /instagram/publish-post-job \u2014 Schedule a post.","title":"b. Instagram API"},{"location":"appendices/api-references/#c-platform-connections-api","text":"GET /platform-connections \u2014 View connected social accounts.","title":"c. Platform Connections API"},{"location":"appendices/api-references/#9-templates-api","text":"GET /templates \u2014 List templates. POST /templates \u2014 Create a template. GET /templates/{id} \u2014 Get template details. PUT /templates/{id} \u2014 Update a template. DELETE /templates/{id} \u2014 Delete a template.","title":"9. Templates API"},{"location":"appendices/api-references/#10-platforms-api","text":"GET /platforms \u2014 List platforms. POST /platforms \u2014 Create a platform. GET /platforms/{id} \u2014 Get platform details. PUT /platforms/{id} \u2014 Update a platform. DELETE /platforms/{id} \u2014 Delete a platform.","title":"10. Platforms API"},{"location":"appendices/api-references/#11-resolutions-api","text":"GET /resolutions \u2014 List resolutions. POST /resolutions \u2014 Create a resolution. GET /resolutions/{id} \u2014 Get resolution details. PUT /resolutions/{id} \u2014 Update a resolution. DELETE /resolutions/{id} \u2014 Delete a resolution.","title":"11. Resolutions API"},{"location":"appendices/api-references/#12-gallery-media-apis","text":"GET /gallery-store \u2014 All store media. GET /image-gallery \u2014 Image gallery (paginated). GET /video-gallery \u2014 Video gallery (paginated). POST /save-image \u2014 Upload image. POST /save-video \u2014 Upload video.","title":"12. Gallery &amp; Media APIs"},{"location":"appendices/api-references/#13-store-settings-apis","text":"GET /get-store-prompt \u2014 Get store description. GET /get-store-language \u2014 Get store language. GET /fonts-and-colors \u2014 Get configured fonts & colors.","title":"13. Store Settings APIs"},{"location":"appendices/api-references/#14-content-generator-api","text":"POST /content-generator \u2014 Generate content via AI.","title":"14. Content Generator API"},{"location":"appendices/api-references/#best-practices","text":"Rate Limits: Adhere to limits outlined in API Usage. Error Handling: Handle HTTP status codes (e.g., 429 for rate limits, 401 for auth errors). Security: Store tokens securely and rotate regularly.","title":"Best Practices"},{"location":"appendices/api-references/#troubleshooting","text":"Authentication Errors: Verify token validity (see Authentication API). Invalid Requests: Check parameter formats and required fields. Rate Limit Issues: Optimize request frequency or contact support for higher quotas. For full API documentation, visit https://admin.devaito.com/api/docs or contact support@devaito.com.","title":"Troubleshooting"},{"location":"appendices/glossary/","text":"Glossary Overview This glossary defines key terms used in the Devaito v2.0 Developer Guide to help you understand the platform\u2019s concepts and terminology. Terms API Key: A unique identifier used to authenticate API requests (see API Keys & Permissions). Application: A project or service managed within Devaito, including code, configurations, and APIs. Collaborator: A user invited to work on an application, with roles like Admin or Developer (see Roles & Permissions ). Deployment: The process of publishing an application to a live environment (see Deployment). Webhook: An HTTP callback triggered by events in Devaito, used for integrations (see Automations & Webhooks). Versioning: Tracking and managing different versions of an application\u2019s code or configurations (see Version Management). CI/CD: Continuous Integration and Continuous Deployment, automating code integration and deployment (see CI/CD). Validation: Automated checks to ensure code quality before deployment (see Validation & Testing). Role: A set of permissions defining what a collaborator can do (e.g., Admin, Viewer) (see Roles & Permissions). Integration: Connecting Devaito with external services like GitHub or Slack (see Specific Integrations). Additional Notes Terms are cross-referenced with relevant guide sections for deeper understanding. For platform-specific terms, check API References or contact support@devaito.com.","title":"Glossary"},{"location":"appendices/release-notes/","text":"Release Notes Overview This section lists updates, features, and bug fixes for Devaito v2.0 and its subsequent releases. Check here for the latest platform improvements. Version 2.0.0 (August 2025) New Features: Enhanced collaboration tools (see Collaboration). Advanced integrations with GitHub, Slack, and AWS (see Specific Integrations). CI/CD pipeline support (see CI/CD). Improved API key management (see API Keys & Permissions). Improvements: Faster deployment times (see Deployment). Updated validation scripts (see Validation & Testing). Bug Fixes: Fixed webhook delivery issues. Resolved role permission conflicts for collaborators. Version 2.0.1 (TBD) Planned Features: Support for additional cloud providers. Enhanced debugging tools (see Debugging). Known Issues: Minor UI glitches in the collaborator management panel. Staying Updated Monitor this page for new releases. Subscribe to Devaito\u2019s newsletter for real-time updates. Contact support@devaito.com for release-specific questions.","title":"Release Notes"},{"location":"appendices/resources/","text":"External Resources Overview This section provides links to external tools, documentation, and communities to support your development on Devaito v2.0. Official Resources Devaito Website: https://www.devaito.com \u2013 Main site for account management and support. API Documentation: https://api.devaito.com/docs \u2013 Full API reference (see API References). Support Portal: support@devaito.com \u2013 Contact for technical assistance. Third-Party Tools GitHub: https://docs.github.com \u2013 For version control integration (see Specific Integrations). Jenkins: https://www.jenkins.io/doc \u2013 For CI/CD pipelines (see CI/CD). Slack: https://api.slack.com \u2013 For notification integrations. New Relic: https://docs.newrelic.com \u2013 For monitoring application performance. Communities Devaito Forum: https://forum.devaito.com \u2013 Discuss issues and share tips. Stack Overflow: Use tag devaito for community-driven Q&A. Reddit: Join r/devaito for user discussions and updates. Learning Resources REST API Guide: https://restfulapi.net \u2013 Learn REST principles for Devaito APIs. Git Basics: https://git-scm.com/doc \u2013 Understand version control for Version Management. CI/CD Best Practices: https://www.cloudbees.com/ci-cd-best-practices \u2013 Optimize pipelines. Troubleshooting Use these resources alongside Common Solutions for issue resolution. Contact support@devaito.com for platform-specific guidance.","title":"External Resources"},{"location":"code-management/best-practices/","text":"","title":"Best practices"},{"location":"code-management/debugging/","text":"","title":"Debugging"},{"location":"code-management/formats/","text":"Code Formats & Conventions Overview This guide establishes the coding standards, file organization patterns, and naming conventions for Devaito v2.0 applications. Following these conventions ensures consistency, maintainability, and seamless integration with the Devaito platform APIs. Benefits of Following Conventions: - Improved code readability and maintainability - Better team collaboration - Easier debugging and troubleshooting - Consistent deployment behavior - Enhanced platform compatibility Project Structure Standards Web Application Structure Standard Frontend Structure: project-root/ \u251c\u2500\u2500 index.html # Main entry point (required) \u251c\u2500\u2500 assets/ # Static assets directory \u2502 \u251c\u2500\u2500 css/ # Stylesheets \u2502 \u2502 \u251c\u2500\u2500 main.css # Primary styles \u2502 \u2502 \u251c\u2500\u2500 components.css # Component styles \u2502 \u2502 \u2514\u2500\u2500 responsive.css # Media queries \u2502 \u251c\u2500\u2500 js/ # JavaScript files \u2502 \u2502 \u251c\u2500\u2500 app.js # Main application logic \u2502 \u2502 \u251c\u2500\u2500 api.js # API integration \u2502 \u2502 \u251c\u2500\u2500 utils.js # Utility functions \u2502 \u2502 \u2514\u2500\u2500 components/ # Reusable components \u2502 \u251c\u2500\u2500 images/ # Image assets \u2502 \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2502 \u251c\u2500\u2500 icons/ \u2502 \u2502 \u2514\u2500\u2500 products/ \u2502 \u2514\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 api/ # Backend API files \u2502 \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 controllers/ # Request handlers \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u2514\u2500\u2500 middleware/ # Custom middleware \u251c\u2500\u2500 config/ # Application configuration \u2502 \u251c\u2500\u2500 database.php # Database settings \u2502 \u251c\u2500\u2500 app.js # App configuration \u2502 \u2514\u2500\u2500 environment.env # Environment variables \u251c\u2500\u2500 vendor/ # Third-party libraries \u251c\u2500\u2500 node_modules/ # NPM packages (excluded from upload) \u251c\u2500\u2500 package.json # Node.js dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 README.md # Project documentation Framework-Specific Structures React Application Structure: react-app/ \u251c\u2500\u2500 public/ \u2502 \u251c\u2500\u2500 index.html # HTML template \u2502 \u251c\u2500\u2500 favicon.ico # Site icon \u2502 \u2514\u2500\u2500 manifest.json # PWA manifest \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Reusable components \u2502 \u2502 \u251c\u2500\u2500 common/ # Shared components \u2502 \u2502 \u251c\u2500\u2500 layout/ # Layout components \u2502 \u2502 \u2514\u2500\u2500 ui/ # UI elements \u2502 \u251c\u2500\u2500 pages/ # Page components \u2502 \u2502 \u251c\u2500\u2500 Home.jsx \u2502 \u2502 \u251c\u2500\u2500 Products.jsx \u2502 \u2502 \u2514\u2500\u2500 Cart.jsx \u2502 \u251c\u2500\u2500 hooks/ # Custom React hooks \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u2502 \u251c\u2500\u2500 api.js # Base API client \u2502 \u2502 \u251c\u2500\u2500 products.js # Product API calls \u2502 \u2502 \u2514\u2500\u2500 auth.js # Authentication \u2502 \u251c\u2500\u2500 utils/ # Utility functions \u2502 \u251c\u2500\u2500 styles/ # Style files \u2502 \u251c\u2500\u2500 App.js # Main App component \u2502 \u2514\u2500\u2500 index.js # Entry point \u251c\u2500\u2500 build/ # Production build output \u251c\u2500\u2500 package.json \u2514\u2500\u2500 .env # Environment variables Vue.js Application Structure: vue-app/ \u251c\u2500\u2500 public/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Vue components \u2502 \u251c\u2500\u2500 views/ # Page views \u2502 \u251c\u2500\u2500 router/ # Vue Router config \u2502 \u251c\u2500\u2500 store/ # Vuex store \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u251c\u2500\u2500 App.vue # Root component \u2502 \u2514\u2500\u2500 main.js # Entry point \u251c\u2500\u2500 dist/ # Build output \u2514\u2500\u2500 package.json PHP Application Structure: php-app/ \u251c\u2500\u2500 public/ # Web-accessible directory \u2502 \u251c\u2500\u2500 index.php # Entry point \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u2514\u2500\u2500 .htaccess # Apache configuration \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 Controllers/ # Request controllers \u2502 \u251c\u2500\u2500 Models/ # Data models \u2502 \u251c\u2500\u2500 Services/ # Business logic \u2502 \u2514\u2500\u2500 Utils/ # Utility classes \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 database.php \u2502 \u2514\u2500\u2500 app.php \u251c\u2500\u2500 vendor/ # Composer dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 .env # Environment configuration File Naming Conventions General Rules File Naming Standards: - Use lowercase with hyphens: user-profile.js \u2705 - Avoid spaces and underscores: user_profile.js \u274c, user profile.js \u274c - Use descriptive names: product-card.component.js \u2705 - Include file purpose in name: auth.service.js , product.model.js - Keep names concise but meaningful: cart.js \u2705 vs shopping-cart-functionality.js \u274c Language-Specific Naming JavaScript/TypeScript Files: // Components (PascalCase for classes/components) UserProfile.js ProductCard.jsx ShoppingCart.tsx // Services and utilities (camelCase) apiService.js dataUtils.js authHelper.ts // Configuration files (lowercase with hyphens) webpack-config.js babel-config.js eslint-config.js // Page/route files (lowercase with hyphens) home-page.js product-detail.js checkout-flow.js PHP Files: // Classes (PascalCase) UserController.php ProductModel.php DatabaseService.php // Functions and utilities (camelCase) helpers.php utilities.php functions.php // Configuration (lowercase) config.php database.php settings.php CSS/SCSS Files: // Main stylesheets main.css styles.scss variables.scss // Component styles (match component names) user-profile.css product-card.scss navigation.css // Layout styles layout.css grid-system.scss responsive.css Directory Naming Directory Structure Rules: - Use lowercase with hyphens: user-management/ \u2705 - Be descriptive and specific: product-components/ \u2705 vs components/ \u274c - Group related functionality: auth-services/ , payment-utils/ - Use plural nouns for collections: components/ , services/ , models/ Examples: src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 ui-elements/ \u2502 \u251c\u2500\u2500 form-controls/ \u2502 \u2514\u2500\u2500 navigation/ \u251c\u2500\u2500 services/ \u2502 \u251c\u2500\u2500 api-clients/ \u2502 \u251c\u2500\u2500 data-processing/ \u2502 \u2514\u2500\u2500 third-party/ \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 string-helpers/ \u2502 \u251c\u2500\u2500 date-functions/ \u2502 \u2514\u2500\u2500 validation/ \u2514\u2500\u2500 assets/ \u251c\u2500\u2500 image-files/ \u251c\u2500\u2500 font-files/ \u2514\u2500\u2500 icon-sets/ Configuration Files Environment Configuration Environment Variables (.env): # Application Settings APP_NAME=MyDevaitoApp APP_ENV=production APP_DEBUG=false APP_URL=https://myapp.devaito.com # Database Configuration DB_CONNECTION=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=myapp_db DB_USERNAME=db_user DB_PASSWORD=secure_password # Devaito API Configuration DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=11|your_bearer_token_here DEVAITO_APP_ID=your_app_id # Third-party Services STRIPE_PUBLIC_KEY=pk_live_your_stripe_key STRIPE_SECRET_KEY=sk_live_your_stripe_secret PAYPAL_CLIENT_ID=your_paypal_client_id # Email Configuration MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=587 MAIL_USERNAME=your-email@gmail.com MAIL_PASSWORD=your_app_password # Cache Settings CACHE_DRIVER=redis REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 # File Storage FILESYSTEM_DISK=local AWS_ACCESS_KEY_ID=your_aws_key AWS_SECRET_ACCESS_KEY=your_aws_secret AWS_DEFAULT_REGION=us-east-1 AWS_BUCKET=your_s3_bucket Package Configuration package.json Structure: { \"name\": \"my-devaito-app\", \"version\": \"1.0.0\", \"description\": \"E-commerce application built with Devaito APIs\", \"main\": \"index.js\", \"keywords\": [\"ecommerce\", \"devaito\", \"api\"], \"author\": { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" }, \"license\": \"MIT\", \"engines\": { \"node\": \">=16.0.0\", \"npm\": \">=8.0.0\" }, \"scripts\": { \"start\": \"node server.js\", \"dev\": \"nodemon server.js\", \"build\": \"webpack --mode=production\", \"test\": \"jest\", \"lint\": \"eslint src/\", \"format\": \"prettier --write src/\" }, \"dependencies\": { \"axios\": \"^1.6.0\", \"express\": \"^4.18.0\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.0.0\" }, \"devDependencies\": { \"eslint\": \"^8.50.0\", \"prettier\": \"^3.0.0\", \"jest\": \"^29.0.0\", \"nodemon\": \"^3.0.0\" }, \"devaito\": { \"app_id\": \"your_app_id\", \"api_version\": \"v1\", \"build_command\": \"npm run build\", \"start_command\": \"npm start\" } } composer.json Structure (PHP): { \"name\": \"yourname/devaito-app\", \"description\": \"PHP application using Devaito APIs\", \"type\": \"project\", \"keywords\": [\"php\", \"ecommerce\", \"devaito\"], \"license\": \"MIT\", \"authors\": [ { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" } ], \"minimum-stability\": \"stable\", \"require\": { \"php\": \"^8.0\", \"guzzlehttp/guzzle\": \"^7.0\", \"vlucas/phpdotenv\": \"^5.0\", \"monolog/monolog\": \"^3.0\" }, \"require-dev\": { \"phpunit/phpunit\": \"^10.0\", \"phpstan/phpstan\": \"^1.0\", \"squizlabs/php_codesniffer\": \"^3.0\" }, \"autoload\": { \"psr-4\": { \"App\\\\\": \"src/\" } }, \"autoload-dev\": { \"psr-4\": { \"Tests\\\\\": \"tests/\" } }, \"scripts\": { \"test\": \"phpunit\", \"lint\": \"phpcs src/\", \"analyze\": \"phpstan analyse src/\" } } Code Quality Standards JavaScript/TypeScript Standards Modern JavaScript Practices: // Use const/let instead of var const API_BASE_URL = 'https://svelte.devaito.com'; let currentUser = null; // Arrow functions for callbacks const fetchProducts = async (category) => { try { const response = await fetch(`${API_BASE_URL}/products?category=${category}`); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.json(); } catch (error) { console.error('Failed to fetch products:', error); throw error; } }; // Destructuring for cleaner code const { products, categories, total } = await fetchCatalogData(); // Template literals for strings const productUrl = `${API_BASE_URL}/products/${productSlug}`; // Async/await instead of promises const loadUserData = async (userId) => { const user = await fetchUser(userId); const orders = await fetchUserOrders(userId); return { user, orders }; }; // Object shorthand const createProductData = (name, price, category) => ({ name, price, category, createdAt: new Date().toISOString() }); // Default parameters const formatPrice = (price, currency = 'USD', locale = 'en-US') => { return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(price); }; TypeScript Best Practices: // Interface definitions interface Product { id: string; name: string; price: number; category: string; slug: string; images: string[]; inStock: boolean; createdAt: Date; } interface ApiResponse<T> { success: boolean; data: T; message?: string; errors?: string[]; } // Generic functions async function apiCall<T>(endpoint: string): Promise<ApiResponse<T>> { const response = await fetch(`${API_BASE_URL}${endpoint}`, { headers: { 'Authorization': `Bearer ${process.env.DEVAITO_API_TOKEN}`, 'Content-Type': 'application/json' } }); return response.json(); } // Type guards function isProduct(obj: any): obj is Product { return obj && typeof obj.id === 'string' && typeof obj.name === 'string' && typeof obj.price === 'number'; } // Enum usage enum OrderStatus { PENDING = 'pending', PROCESSING = 'processing', SHIPPED = 'shipped', DELIVERED = 'delivered', CANCELLED = 'cancelled' } PHP Standards (PSR Compliance) PSR-4 Autoloading Structure: <?php // src/Controllers/ProductController.php namespace App\\Controllers; use App\\Services\\ProductService; use App\\Models\\Product; use Exception; class ProductController { private ProductService $productService; public function __construct(ProductService $productService) { $this->productService = $productService; } public function getProducts(array $filters = []): array { try { $products = $this->productService->getFilteredProducts($filters); return [ 'success' => true, 'data' => $products, 'count' => count($products) ]; } catch (Exception $e) { error_log(\"Product fetch error: \" . $e->getMessage()); return [ 'success' => false, 'error' => 'Failed to fetch products', 'message' => $e->getMessage() ]; } } public function getProduct(string $slug): array { if (empty($slug)) { return [ 'success' => false, 'error' => 'Product slug is required' ]; } $product = $this->productService->getBySlug($slug); if (!$product) { return [ 'success' => false, 'error' => 'Product not found' ]; } return [ 'success' => true, 'data' => $product ]; } } Model Structure: <?php // src/Models/Product.php namespace App\\Models; use DateTime; class Product { private string $id; private string $name; private float $price; private string $category; private string $slug; private array $images; private bool $inStock; private DateTime $createdAt; public function __construct(array $data) { $this->id = $data['id'] ?? ''; $this->name = $data['name'] ?? ''; $this->price = (float)($data['price'] ?? 0); $this->category = $data['category'] ?? ''; $this->slug = $data['slug'] ?? ''; $this->images = $data['images'] ?? []; $this->inStock = (bool)($data['in_stock'] ?? false); $this->createdAt = new DateTime($data['created_at'] ?? 'now'); } // Getters public function getId(): string { return $this->id; } public function getName(): string { return $this->name; } public function getPrice(): float { return $this->price; } public function getFormattedPrice(string $currency = 'USD'): string { return number_format($this->price, 2) . ' ' . $currency; } // Validation public function isValid(): bool { return !empty($this->id) && !empty($this->name) && $this->price > 0 && !empty($this->slug); } // Serialization public function toArray(): array { return [ 'id' => $this->id, 'name' => $this->name, 'price' => $this->price, 'category' => $this->category, 'slug' => $this->slug, 'images' => $this->images, 'in_stock' => $this->inStock, 'created_at' => $this->createdAt->format('c') ]; } } CSS/SCSS Standards CSS Architecture: /* Base styles - variables and resets */ :root { --primary-color: #3498db; --secondary-color: #2ecc71; --danger-color: #e74c3c; --warning-color: #f39c12; --text-color: #2c3e50; --background-color: #ffffff; --border-color: #ecf0f1; --font-family-primary: 'Inter', sans-serif; --font-family-secondary: 'Georgia', serif; --spacing-xs: 0.25rem; --spacing-sm: 0.5rem; --spacing-md: 1rem; --spacing-lg: 1.5rem; --spacing-xl: 2rem; --border-radius: 0.375rem; --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); } /* Component-based structure */ .product-card { display: flex; flex-direction: column; background: var(--background-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: var(--box-shadow); padding: var(--spacing-md); transition: transform 0.2s ease, box-shadow 0.2s ease; } .product-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); } .product-card__image { width: 100%; height: 200px; object-fit: cover; border-radius: var(--border-radius); margin-bottom: var(--spacing-sm); } .product-card__title { font-family: var(--font-family-primary); font-size: 1.125rem; font-weight: 600; color: var(--text-color); margin-bottom: var(--spacing-xs); line-height: 1.4; } .product-card__price { font-size: 1.25rem; font-weight: 700; color: var(--primary-color); margin-bottom: var(--spacing-md); } /* Responsive design */ @media (max-width: 768px) { .product-card { padding: var(--spacing-sm); } .product-card__image { height: 150px; } } SCSS Structure: // _variables.scss $primary-color: #3498db; $secondary-color: #2ecc71; $text-color: #2c3e50; $breakpoints: ( 'mobile': 480px, 'tablet': 768px, 'desktop': 1024px, 'wide': 1200px ); // _mixins.scss @mixin respond-to($breakpoint) { @if map-has-key($breakpoints, $breakpoint) { @media (min-width: map-get($breakpoints, $breakpoint)) { @content; } } } @mixin button-style($bg-color: $primary-color, $text-color: white) { background-color: $bg-color; color: $text-color; border: none; padding: 0.75rem 1.5rem; border-radius: 0.375rem; cursor: pointer; transition: all 0.2s ease; &:hover { background-color: darken($bg-color, 10%); transform: translateY(-1px); } } // main.scss @import 'variables'; @import 'mixins'; .btn-primary { @include button-style($primary-color, white); } .product-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; @include respond-to('tablet') { grid-template-columns: repeat(2, 1fr); } @include respond-to('desktop') { grid-template-columns: repeat(3, 1fr); } } API Integration Standards Devaito API Client Structure Base API Client: // services/api.js class DevaitoAPI { constructor() { this.baseURL = process.env.DEVAITO_API_URL || 'https://svelte.devaito.com'; this.token = process.env.DEVAITO_API_TOKEN; this.timeout = 30000; // 30 seconds } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const config = { timeout: this.timeout, headers: { 'Content-Type': 'application/json', ...options.headers }, ...options }; // Add authentication header if token is available if (this.token && !options.skipAuth) { config.headers.Authorization = `Bearer ${this.token}`; } try { const response = await fetch(url, config); if (!response.ok) { throw new APIError(response.status, response.statusText); } const contentType = response.headers.get('content-type'); if (contentType && contentType.includes('application/json')) { return await response.json(); } return await response.text(); } catch (error) { if (error instanceof APIError) { throw error; } throw new APIError(0, 'Network error', error.message); } } // GET request async get(endpoint, params = {}) { const queryString = new URLSearchParams(params).toString(); const url = queryString ? `${endpoint}?${queryString}` : endpoint; return this.request(url, { method: 'GET' }); } // POST request async post(endpoint, data = {}) { return this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); } // PUT request async put(endpoint, data = {}) { return this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); } // DELETE request async delete(endpoint) { return this.request(endpoint, { method: 'DELETE' }); } } // Custom error class class APIError extends Error { constructor(status, statusText, details = null) { super(`API Error ${status}: ${statusText}`); this.status = status; this.statusText = statusText; this.details = details; this.name = 'APIError'; } } export default new DevaitoAPI(); Service-Specific Clients: // services/products.js import api from './api.js'; export const productService = { // Get all products with optional filters async getProducts(filters = {}) { const params = { category: filters.category, min_price: filters.minPrice, max_price: filters.maxPrice, search: filters.search, page: filters.page || 1, limit: filters.limit || 20 }; // Remove undefined values Object.keys(params).forEach(key => { if (params[key] === undefined) delete params[key]; }); return api.get('/products', params); }, // Get single product by slug async getProduct(slug) { if (!slug) { throw new Error('Product slug is required'); } return api.get(`/products/${slug}`); }, // Get product reviews async getProductReviews(slug, page = 1) { return api.get(`/products/${slug}/reviews`, { page }); }, // Add product review (requires authentication) async addReview(slug, reviewData) { const { rating, comment, title } = reviewData; if (!rating || rating < 1 || rating > 5) { throw new Error('Rating must be between 1 and 5'); } return api.post(`/products/${slug}/reviews`, { rating, comment, title }); } }; // services/cart.js export const cartService = { // Get cart contents async getCart() { return api.get('/cart'); }, // Add item to cart async addToCart(productId, quantity = 1, variant = null) { return api.post('/cart', { product_id: productId, quantity, variant }); }, // Update cart item quantity async updateCartItem(itemId, quantity) { return api.put(`/cart/${itemId}`, { quantity }); }, // Remove item from cart async removeFromCart(itemId) { return api.delete(`/cart/${itemId}`); }, // Clear entire cart async clearCart() { return api.delete('/cart'); } }; Error Handling Standards Centralized Error Handler: // utils/error-handler.js export class ErrorHandler { static handle(error, context = '') { console.group(`\ud83d\udea8 Error in ${context || 'Application'}`); console.error('Error:', error.message); if (error instanceof APIError) { console.error('Status:', error.status); console.error('Details:', error.details); // Handle specific API errors switch (error.status) { case 401: this.handleUnauthorized(); break; case 429: this.handleRateLimit(); break; case 500: this.handleServerError(); break; } } console.error('Stack:', error.stack); console.groupEnd(); // Report to monitoring service this.reportError(error, context); } static handleUnauthorized() { // Clear stored tokens localStorage.removeItem('auth_token'); // Redirect to login window.location.href = '/login'; } static handleRateLimit() { // Show rate limit message this.showUserMessage('Too many requests. Please try again later.', 'warning'); } static handleServerError() { // Show generic error message this.showUserMessage('Server error. Please try again.', 'error'); } static showUserMessage(message, type = 'info') { // Implementation depends on your UI framework console.log(`${type.toUpperCase()}: ${message}`); } static reportError(error, context) { // Send error to monitoring service if (typeof window !== 'undefined' && window.analytics) { window.analytics.track('Error Occurred', { error: error.message, context, stack: error.stack, timestamp: new Date().toISOString() }); } } } // Usage in components try { const products = await productService.getProducts(); setProducts(products.data); } catch (error) { ErrorHandler.handle(error, 'ProductList Component'); } Documentation Standards Code Documentation JSDoc Comments: /** * Fetches products from the Devaito API with optional filtering * @param {Object} filters - Filter options for products * @param {string} [filters.category] - Product category slug * @param {number} [filters.minPrice] - Minimum price filter * @param {number} [filters.maxPrice] - Maximum price filter * @param {string} [filters.search] - Search query * @param {number} [filters.page=1] - Page number for pagination * @param {number} [filters.limit=20] - Number of items per page * @returns {Promise<Object>} API response with products array * @throws {APIError} When API request fails * @example * // Get all products * const products = await getProducts(); * * // Get products with filters * const filteredProducts = await getProducts({ * category: 'electronics', * minPrice: 100, * maxPrice: 500 * }); */ async function getProducts(filters = {}) { // Implementation here } README.md Template: # Project Name Brief description of your Devaito-powered application. ## Features - \ud83d\udecd\ufe0f Product catalog integration - \ud83d\uded2 Shopping cart functionality - \ud83d\udc64 User authentication - \ud83d\udcb3 Payment processing - \ud83d\udcf1 Responsive design ## Prerequisites - Node.js 16+ or PHP 8+ - Devaito API token - Modern web browser ## Installation ```bash # Clone repository git clone https://github.com/yourusername/your-app.git cd your-app # Install dependencies npm install # or composer install # Configure environment cp .env.example .env # Edit .env with your API keys Configuration Add your Devaito API credentials to .env : DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=your_bearer_token_here DEVAITO_APP_ID=your_app_id Usage # Development npm run dev # Production build npm run build npm start API Integration This application uses the following Devaito APIs: Products API : Product catalog and details Cart API : Shopping cart management Authentication API : User login/signup Payment Methods API : Available payment options Contributing Fork the repository Create feature branch ( git checkout -b feature/amazing-feature ) Commit changes ( git commit -m 'Add amazing feature' ) Push to branch ( git push origin feature/amazing-feature ) Open a Pull Request License This project is licensed under the MIT License - see LICENSE file. ``` Following these code formats and conventions ensures your Devaito applications are maintainable, scalable, and integrate seamlessly with the platform's APIs and deployment system.","title":"Code Formats & Conventions"},{"location":"code-management/formats/#code-formats-conventions","text":"","title":"Code Formats &amp; Conventions"},{"location":"code-management/formats/#overview","text":"This guide establishes the coding standards, file organization patterns, and naming conventions for Devaito v2.0 applications. Following these conventions ensures consistency, maintainability, and seamless integration with the Devaito platform APIs. Benefits of Following Conventions: - Improved code readability and maintainability - Better team collaboration - Easier debugging and troubleshooting - Consistent deployment behavior - Enhanced platform compatibility","title":"Overview"},{"location":"code-management/formats/#project-structure-standards","text":"","title":"Project Structure Standards"},{"location":"code-management/formats/#web-application-structure","text":"Standard Frontend Structure: project-root/ \u251c\u2500\u2500 index.html # Main entry point (required) \u251c\u2500\u2500 assets/ # Static assets directory \u2502 \u251c\u2500\u2500 css/ # Stylesheets \u2502 \u2502 \u251c\u2500\u2500 main.css # Primary styles \u2502 \u2502 \u251c\u2500\u2500 components.css # Component styles \u2502 \u2502 \u2514\u2500\u2500 responsive.css # Media queries \u2502 \u251c\u2500\u2500 js/ # JavaScript files \u2502 \u2502 \u251c\u2500\u2500 app.js # Main application logic \u2502 \u2502 \u251c\u2500\u2500 api.js # API integration \u2502 \u2502 \u251c\u2500\u2500 utils.js # Utility functions \u2502 \u2502 \u2514\u2500\u2500 components/ # Reusable components \u2502 \u251c\u2500\u2500 images/ # Image assets \u2502 \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2502 \u251c\u2500\u2500 icons/ \u2502 \u2502 \u2514\u2500\u2500 products/ \u2502 \u2514\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 api/ # Backend API files \u2502 \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 controllers/ # Request handlers \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u2514\u2500\u2500 middleware/ # Custom middleware \u251c\u2500\u2500 config/ # Application configuration \u2502 \u251c\u2500\u2500 database.php # Database settings \u2502 \u251c\u2500\u2500 app.js # App configuration \u2502 \u2514\u2500\u2500 environment.env # Environment variables \u251c\u2500\u2500 vendor/ # Third-party libraries \u251c\u2500\u2500 node_modules/ # NPM packages (excluded from upload) \u251c\u2500\u2500 package.json # Node.js dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 README.md # Project documentation","title":"Web Application Structure"},{"location":"code-management/formats/#framework-specific-structures","text":"React Application Structure: react-app/ \u251c\u2500\u2500 public/ \u2502 \u251c\u2500\u2500 index.html # HTML template \u2502 \u251c\u2500\u2500 favicon.ico # Site icon \u2502 \u2514\u2500\u2500 manifest.json # PWA manifest \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Reusable components \u2502 \u2502 \u251c\u2500\u2500 common/ # Shared components \u2502 \u2502 \u251c\u2500\u2500 layout/ # Layout components \u2502 \u2502 \u2514\u2500\u2500 ui/ # UI elements \u2502 \u251c\u2500\u2500 pages/ # Page components \u2502 \u2502 \u251c\u2500\u2500 Home.jsx \u2502 \u2502 \u251c\u2500\u2500 Products.jsx \u2502 \u2502 \u2514\u2500\u2500 Cart.jsx \u2502 \u251c\u2500\u2500 hooks/ # Custom React hooks \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u2502 \u251c\u2500\u2500 api.js # Base API client \u2502 \u2502 \u251c\u2500\u2500 products.js # Product API calls \u2502 \u2502 \u2514\u2500\u2500 auth.js # Authentication \u2502 \u251c\u2500\u2500 utils/ # Utility functions \u2502 \u251c\u2500\u2500 styles/ # Style files \u2502 \u251c\u2500\u2500 App.js # Main App component \u2502 \u2514\u2500\u2500 index.js # Entry point \u251c\u2500\u2500 build/ # Production build output \u251c\u2500\u2500 package.json \u2514\u2500\u2500 .env # Environment variables Vue.js Application Structure: vue-app/ \u251c\u2500\u2500 public/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 components/ # Vue components \u2502 \u251c\u2500\u2500 views/ # Page views \u2502 \u251c\u2500\u2500 router/ # Vue Router config \u2502 \u251c\u2500\u2500 store/ # Vuex store \u2502 \u251c\u2500\u2500 services/ # API services \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u251c\u2500\u2500 App.vue # Root component \u2502 \u2514\u2500\u2500 main.js # Entry point \u251c\u2500\u2500 dist/ # Build output \u2514\u2500\u2500 package.json PHP Application Structure: php-app/ \u251c\u2500\u2500 public/ # Web-accessible directory \u2502 \u251c\u2500\u2500 index.php # Entry point \u2502 \u251c\u2500\u2500 assets/ # Static assets \u2502 \u2514\u2500\u2500 .htaccess # Apache configuration \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 Controllers/ # Request controllers \u2502 \u251c\u2500\u2500 Models/ # Data models \u2502 \u251c\u2500\u2500 Services/ # Business logic \u2502 \u2514\u2500\u2500 Utils/ # Utility classes \u251c\u2500\u2500 config/ # Configuration files \u2502 \u251c\u2500\u2500 database.php \u2502 \u2514\u2500\u2500 app.php \u251c\u2500\u2500 vendor/ # Composer dependencies \u251c\u2500\u2500 composer.json # PHP dependencies \u2514\u2500\u2500 .env # Environment configuration","title":"Framework-Specific Structures"},{"location":"code-management/formats/#file-naming-conventions","text":"","title":"File Naming Conventions"},{"location":"code-management/formats/#general-rules","text":"File Naming Standards: - Use lowercase with hyphens: user-profile.js \u2705 - Avoid spaces and underscores: user_profile.js \u274c, user profile.js \u274c - Use descriptive names: product-card.component.js \u2705 - Include file purpose in name: auth.service.js , product.model.js - Keep names concise but meaningful: cart.js \u2705 vs shopping-cart-functionality.js \u274c","title":"General Rules"},{"location":"code-management/formats/#language-specific-naming","text":"JavaScript/TypeScript Files: // Components (PascalCase for classes/components) UserProfile.js ProductCard.jsx ShoppingCart.tsx // Services and utilities (camelCase) apiService.js dataUtils.js authHelper.ts // Configuration files (lowercase with hyphens) webpack-config.js babel-config.js eslint-config.js // Page/route files (lowercase with hyphens) home-page.js product-detail.js checkout-flow.js PHP Files: // Classes (PascalCase) UserController.php ProductModel.php DatabaseService.php // Functions and utilities (camelCase) helpers.php utilities.php functions.php // Configuration (lowercase) config.php database.php settings.php CSS/SCSS Files: // Main stylesheets main.css styles.scss variables.scss // Component styles (match component names) user-profile.css product-card.scss navigation.css // Layout styles layout.css grid-system.scss responsive.css","title":"Language-Specific Naming"},{"location":"code-management/formats/#directory-naming","text":"Directory Structure Rules: - Use lowercase with hyphens: user-management/ \u2705 - Be descriptive and specific: product-components/ \u2705 vs components/ \u274c - Group related functionality: auth-services/ , payment-utils/ - Use plural nouns for collections: components/ , services/ , models/ Examples: src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 ui-elements/ \u2502 \u251c\u2500\u2500 form-controls/ \u2502 \u2514\u2500\u2500 navigation/ \u251c\u2500\u2500 services/ \u2502 \u251c\u2500\u2500 api-clients/ \u2502 \u251c\u2500\u2500 data-processing/ \u2502 \u2514\u2500\u2500 third-party/ \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 string-helpers/ \u2502 \u251c\u2500\u2500 date-functions/ \u2502 \u2514\u2500\u2500 validation/ \u2514\u2500\u2500 assets/ \u251c\u2500\u2500 image-files/ \u251c\u2500\u2500 font-files/ \u2514\u2500\u2500 icon-sets/","title":"Directory Naming"},{"location":"code-management/formats/#configuration-files","text":"","title":"Configuration Files"},{"location":"code-management/formats/#environment-configuration","text":"Environment Variables (.env): # Application Settings APP_NAME=MyDevaitoApp APP_ENV=production APP_DEBUG=false APP_URL=https://myapp.devaito.com # Database Configuration DB_CONNECTION=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=myapp_db DB_USERNAME=db_user DB_PASSWORD=secure_password # Devaito API Configuration DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=11|your_bearer_token_here DEVAITO_APP_ID=your_app_id # Third-party Services STRIPE_PUBLIC_KEY=pk_live_your_stripe_key STRIPE_SECRET_KEY=sk_live_your_stripe_secret PAYPAL_CLIENT_ID=your_paypal_client_id # Email Configuration MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=587 MAIL_USERNAME=your-email@gmail.com MAIL_PASSWORD=your_app_password # Cache Settings CACHE_DRIVER=redis REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 # File Storage FILESYSTEM_DISK=local AWS_ACCESS_KEY_ID=your_aws_key AWS_SECRET_ACCESS_KEY=your_aws_secret AWS_DEFAULT_REGION=us-east-1 AWS_BUCKET=your_s3_bucket","title":"Environment Configuration"},{"location":"code-management/formats/#package-configuration","text":"package.json Structure: { \"name\": \"my-devaito-app\", \"version\": \"1.0.0\", \"description\": \"E-commerce application built with Devaito APIs\", \"main\": \"index.js\", \"keywords\": [\"ecommerce\", \"devaito\", \"api\"], \"author\": { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" }, \"license\": \"MIT\", \"engines\": { \"node\": \">=16.0.0\", \"npm\": \">=8.0.0\" }, \"scripts\": { \"start\": \"node server.js\", \"dev\": \"nodemon server.js\", \"build\": \"webpack --mode=production\", \"test\": \"jest\", \"lint\": \"eslint src/\", \"format\": \"prettier --write src/\" }, \"dependencies\": { \"axios\": \"^1.6.0\", \"express\": \"^4.18.0\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.0.0\" }, \"devDependencies\": { \"eslint\": \"^8.50.0\", \"prettier\": \"^3.0.0\", \"jest\": \"^29.0.0\", \"nodemon\": \"^3.0.0\" }, \"devaito\": { \"app_id\": \"your_app_id\", \"api_version\": \"v1\", \"build_command\": \"npm run build\", \"start_command\": \"npm start\" } } composer.json Structure (PHP): { \"name\": \"yourname/devaito-app\", \"description\": \"PHP application using Devaito APIs\", \"type\": \"project\", \"keywords\": [\"php\", \"ecommerce\", \"devaito\"], \"license\": \"MIT\", \"authors\": [ { \"name\": \"Your Name\", \"email\": \"your.email@example.com\" } ], \"minimum-stability\": \"stable\", \"require\": { \"php\": \"^8.0\", \"guzzlehttp/guzzle\": \"^7.0\", \"vlucas/phpdotenv\": \"^5.0\", \"monolog/monolog\": \"^3.0\" }, \"require-dev\": { \"phpunit/phpunit\": \"^10.0\", \"phpstan/phpstan\": \"^1.0\", \"squizlabs/php_codesniffer\": \"^3.0\" }, \"autoload\": { \"psr-4\": { \"App\\\\\": \"src/\" } }, \"autoload-dev\": { \"psr-4\": { \"Tests\\\\\": \"tests/\" } }, \"scripts\": { \"test\": \"phpunit\", \"lint\": \"phpcs src/\", \"analyze\": \"phpstan analyse src/\" } }","title":"Package Configuration"},{"location":"code-management/formats/#code-quality-standards","text":"","title":"Code Quality Standards"},{"location":"code-management/formats/#javascripttypescript-standards","text":"Modern JavaScript Practices: // Use const/let instead of var const API_BASE_URL = 'https://svelte.devaito.com'; let currentUser = null; // Arrow functions for callbacks const fetchProducts = async (category) => { try { const response = await fetch(`${API_BASE_URL}/products?category=${category}`); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.json(); } catch (error) { console.error('Failed to fetch products:', error); throw error; } }; // Destructuring for cleaner code const { products, categories, total } = await fetchCatalogData(); // Template literals for strings const productUrl = `${API_BASE_URL}/products/${productSlug}`; // Async/await instead of promises const loadUserData = async (userId) => { const user = await fetchUser(userId); const orders = await fetchUserOrders(userId); return { user, orders }; }; // Object shorthand const createProductData = (name, price, category) => ({ name, price, category, createdAt: new Date().toISOString() }); // Default parameters const formatPrice = (price, currency = 'USD', locale = 'en-US') => { return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(price); }; TypeScript Best Practices: // Interface definitions interface Product { id: string; name: string; price: number; category: string; slug: string; images: string[]; inStock: boolean; createdAt: Date; } interface ApiResponse<T> { success: boolean; data: T; message?: string; errors?: string[]; } // Generic functions async function apiCall<T>(endpoint: string): Promise<ApiResponse<T>> { const response = await fetch(`${API_BASE_URL}${endpoint}`, { headers: { 'Authorization': `Bearer ${process.env.DEVAITO_API_TOKEN}`, 'Content-Type': 'application/json' } }); return response.json(); } // Type guards function isProduct(obj: any): obj is Product { return obj && typeof obj.id === 'string' && typeof obj.name === 'string' && typeof obj.price === 'number'; } // Enum usage enum OrderStatus { PENDING = 'pending', PROCESSING = 'processing', SHIPPED = 'shipped', DELIVERED = 'delivered', CANCELLED = 'cancelled' }","title":"JavaScript/TypeScript Standards"},{"location":"code-management/formats/#php-standards-psr-compliance","text":"PSR-4 Autoloading Structure: <?php // src/Controllers/ProductController.php namespace App\\Controllers; use App\\Services\\ProductService; use App\\Models\\Product; use Exception; class ProductController { private ProductService $productService; public function __construct(ProductService $productService) { $this->productService = $productService; } public function getProducts(array $filters = []): array { try { $products = $this->productService->getFilteredProducts($filters); return [ 'success' => true, 'data' => $products, 'count' => count($products) ]; } catch (Exception $e) { error_log(\"Product fetch error: \" . $e->getMessage()); return [ 'success' => false, 'error' => 'Failed to fetch products', 'message' => $e->getMessage() ]; } } public function getProduct(string $slug): array { if (empty($slug)) { return [ 'success' => false, 'error' => 'Product slug is required' ]; } $product = $this->productService->getBySlug($slug); if (!$product) { return [ 'success' => false, 'error' => 'Product not found' ]; } return [ 'success' => true, 'data' => $product ]; } } Model Structure: <?php // src/Models/Product.php namespace App\\Models; use DateTime; class Product { private string $id; private string $name; private float $price; private string $category; private string $slug; private array $images; private bool $inStock; private DateTime $createdAt; public function __construct(array $data) { $this->id = $data['id'] ?? ''; $this->name = $data['name'] ?? ''; $this->price = (float)($data['price'] ?? 0); $this->category = $data['category'] ?? ''; $this->slug = $data['slug'] ?? ''; $this->images = $data['images'] ?? []; $this->inStock = (bool)($data['in_stock'] ?? false); $this->createdAt = new DateTime($data['created_at'] ?? 'now'); } // Getters public function getId(): string { return $this->id; } public function getName(): string { return $this->name; } public function getPrice(): float { return $this->price; } public function getFormattedPrice(string $currency = 'USD'): string { return number_format($this->price, 2) . ' ' . $currency; } // Validation public function isValid(): bool { return !empty($this->id) && !empty($this->name) && $this->price > 0 && !empty($this->slug); } // Serialization public function toArray(): array { return [ 'id' => $this->id, 'name' => $this->name, 'price' => $this->price, 'category' => $this->category, 'slug' => $this->slug, 'images' => $this->images, 'in_stock' => $this->inStock, 'created_at' => $this->createdAt->format('c') ]; } }","title":"PHP Standards (PSR Compliance)"},{"location":"code-management/formats/#cssscss-standards","text":"CSS Architecture: /* Base styles - variables and resets */ :root { --primary-color: #3498db; --secondary-color: #2ecc71; --danger-color: #e74c3c; --warning-color: #f39c12; --text-color: #2c3e50; --background-color: #ffffff; --border-color: #ecf0f1; --font-family-primary: 'Inter', sans-serif; --font-family-secondary: 'Georgia', serif; --spacing-xs: 0.25rem; --spacing-sm: 0.5rem; --spacing-md: 1rem; --spacing-lg: 1.5rem; --spacing-xl: 2rem; --border-radius: 0.375rem; --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); } /* Component-based structure */ .product-card { display: flex; flex-direction: column; background: var(--background-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: var(--box-shadow); padding: var(--spacing-md); transition: transform 0.2s ease, box-shadow 0.2s ease; } .product-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); } .product-card__image { width: 100%; height: 200px; object-fit: cover; border-radius: var(--border-radius); margin-bottom: var(--spacing-sm); } .product-card__title { font-family: var(--font-family-primary); font-size: 1.125rem; font-weight: 600; color: var(--text-color); margin-bottom: var(--spacing-xs); line-height: 1.4; } .product-card__price { font-size: 1.25rem; font-weight: 700; color: var(--primary-color); margin-bottom: var(--spacing-md); } /* Responsive design */ @media (max-width: 768px) { .product-card { padding: var(--spacing-sm); } .product-card__image { height: 150px; } } SCSS Structure: // _variables.scss $primary-color: #3498db; $secondary-color: #2ecc71; $text-color: #2c3e50; $breakpoints: ( 'mobile': 480px, 'tablet': 768px, 'desktop': 1024px, 'wide': 1200px ); // _mixins.scss @mixin respond-to($breakpoint) { @if map-has-key($breakpoints, $breakpoint) { @media (min-width: map-get($breakpoints, $breakpoint)) { @content; } } } @mixin button-style($bg-color: $primary-color, $text-color: white) { background-color: $bg-color; color: $text-color; border: none; padding: 0.75rem 1.5rem; border-radius: 0.375rem; cursor: pointer; transition: all 0.2s ease; &:hover { background-color: darken($bg-color, 10%); transform: translateY(-1px); } } // main.scss @import 'variables'; @import 'mixins'; .btn-primary { @include button-style($primary-color, white); } .product-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; @include respond-to('tablet') { grid-template-columns: repeat(2, 1fr); } @include respond-to('desktop') { grid-template-columns: repeat(3, 1fr); } }","title":"CSS/SCSS Standards"},{"location":"code-management/formats/#api-integration-standards","text":"","title":"API Integration Standards"},{"location":"code-management/formats/#devaito-api-client-structure","text":"Base API Client: // services/api.js class DevaitoAPI { constructor() { this.baseURL = process.env.DEVAITO_API_URL || 'https://svelte.devaito.com'; this.token = process.env.DEVAITO_API_TOKEN; this.timeout = 30000; // 30 seconds } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const config = { timeout: this.timeout, headers: { 'Content-Type': 'application/json', ...options.headers }, ...options }; // Add authentication header if token is available if (this.token && !options.skipAuth) { config.headers.Authorization = `Bearer ${this.token}`; } try { const response = await fetch(url, config); if (!response.ok) { throw new APIError(response.status, response.statusText); } const contentType = response.headers.get('content-type'); if (contentType && contentType.includes('application/json')) { return await response.json(); } return await response.text(); } catch (error) { if (error instanceof APIError) { throw error; } throw new APIError(0, 'Network error', error.message); } } // GET request async get(endpoint, params = {}) { const queryString = new URLSearchParams(params).toString(); const url = queryString ? `${endpoint}?${queryString}` : endpoint; return this.request(url, { method: 'GET' }); } // POST request async post(endpoint, data = {}) { return this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); } // PUT request async put(endpoint, data = {}) { return this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); } // DELETE request async delete(endpoint) { return this.request(endpoint, { method: 'DELETE' }); } } // Custom error class class APIError extends Error { constructor(status, statusText, details = null) { super(`API Error ${status}: ${statusText}`); this.status = status; this.statusText = statusText; this.details = details; this.name = 'APIError'; } } export default new DevaitoAPI(); Service-Specific Clients: // services/products.js import api from './api.js'; export const productService = { // Get all products with optional filters async getProducts(filters = {}) { const params = { category: filters.category, min_price: filters.minPrice, max_price: filters.maxPrice, search: filters.search, page: filters.page || 1, limit: filters.limit || 20 }; // Remove undefined values Object.keys(params).forEach(key => { if (params[key] === undefined) delete params[key]; }); return api.get('/products', params); }, // Get single product by slug async getProduct(slug) { if (!slug) { throw new Error('Product slug is required'); } return api.get(`/products/${slug}`); }, // Get product reviews async getProductReviews(slug, page = 1) { return api.get(`/products/${slug}/reviews`, { page }); }, // Add product review (requires authentication) async addReview(slug, reviewData) { const { rating, comment, title } = reviewData; if (!rating || rating < 1 || rating > 5) { throw new Error('Rating must be between 1 and 5'); } return api.post(`/products/${slug}/reviews`, { rating, comment, title }); } }; // services/cart.js export const cartService = { // Get cart contents async getCart() { return api.get('/cart'); }, // Add item to cart async addToCart(productId, quantity = 1, variant = null) { return api.post('/cart', { product_id: productId, quantity, variant }); }, // Update cart item quantity async updateCartItem(itemId, quantity) { return api.put(`/cart/${itemId}`, { quantity }); }, // Remove item from cart async removeFromCart(itemId) { return api.delete(`/cart/${itemId}`); }, // Clear entire cart async clearCart() { return api.delete('/cart'); } };","title":"Devaito API Client Structure"},{"location":"code-management/formats/#error-handling-standards","text":"Centralized Error Handler: // utils/error-handler.js export class ErrorHandler { static handle(error, context = '') { console.group(`\ud83d\udea8 Error in ${context || 'Application'}`); console.error('Error:', error.message); if (error instanceof APIError) { console.error('Status:', error.status); console.error('Details:', error.details); // Handle specific API errors switch (error.status) { case 401: this.handleUnauthorized(); break; case 429: this.handleRateLimit(); break; case 500: this.handleServerError(); break; } } console.error('Stack:', error.stack); console.groupEnd(); // Report to monitoring service this.reportError(error, context); } static handleUnauthorized() { // Clear stored tokens localStorage.removeItem('auth_token'); // Redirect to login window.location.href = '/login'; } static handleRateLimit() { // Show rate limit message this.showUserMessage('Too many requests. Please try again later.', 'warning'); } static handleServerError() { // Show generic error message this.showUserMessage('Server error. Please try again.', 'error'); } static showUserMessage(message, type = 'info') { // Implementation depends on your UI framework console.log(`${type.toUpperCase()}: ${message}`); } static reportError(error, context) { // Send error to monitoring service if (typeof window !== 'undefined' && window.analytics) { window.analytics.track('Error Occurred', { error: error.message, context, stack: error.stack, timestamp: new Date().toISOString() }); } } } // Usage in components try { const products = await productService.getProducts(); setProducts(products.data); } catch (error) { ErrorHandler.handle(error, 'ProductList Component'); }","title":"Error Handling Standards"},{"location":"code-management/formats/#documentation-standards","text":"","title":"Documentation Standards"},{"location":"code-management/formats/#code-documentation","text":"JSDoc Comments: /** * Fetches products from the Devaito API with optional filtering * @param {Object} filters - Filter options for products * @param {string} [filters.category] - Product category slug * @param {number} [filters.minPrice] - Minimum price filter * @param {number} [filters.maxPrice] - Maximum price filter * @param {string} [filters.search] - Search query * @param {number} [filters.page=1] - Page number for pagination * @param {number} [filters.limit=20] - Number of items per page * @returns {Promise<Object>} API response with products array * @throws {APIError} When API request fails * @example * // Get all products * const products = await getProducts(); * * // Get products with filters * const filteredProducts = await getProducts({ * category: 'electronics', * minPrice: 100, * maxPrice: 500 * }); */ async function getProducts(filters = {}) { // Implementation here } README.md Template: # Project Name Brief description of your Devaito-powered application. ## Features - \ud83d\udecd\ufe0f Product catalog integration - \ud83d\uded2 Shopping cart functionality - \ud83d\udc64 User authentication - \ud83d\udcb3 Payment processing - \ud83d\udcf1 Responsive design ## Prerequisites - Node.js 16+ or PHP 8+ - Devaito API token - Modern web browser ## Installation ```bash # Clone repository git clone https://github.com/yourusername/your-app.git cd your-app # Install dependencies npm install # or composer install # Configure environment cp .env.example .env # Edit .env with your API keys","title":"Code Documentation"},{"location":"code-management/formats/#configuration","text":"Add your Devaito API credentials to .env : DEVAITO_API_URL=https://svelte.devaito.com DEVAITO_API_TOKEN=your_bearer_token_here DEVAITO_APP_ID=your_app_id","title":"Configuration"},{"location":"code-management/formats/#usage","text":"# Development npm run dev # Production build npm run build npm start","title":"Usage"},{"location":"code-management/formats/#api-integration","text":"This application uses the following Devaito APIs: Products API : Product catalog and details Cart API : Shopping cart management Authentication API : User login/signup Payment Methods API : Available payment options","title":"API Integration"},{"location":"code-management/formats/#contributing","text":"Fork the repository Create feature branch ( git checkout -b feature/amazing-feature ) Commit changes ( git commit -m 'Add amazing feature' ) Push to branch ( git push origin feature/amazing-feature ) Open a Pull Request","title":"Contributing"},{"location":"code-management/formats/#license","text":"This project is licensed under the MIT License - see LICENSE file. ``` Following these code formats and conventions ensures your Devaito applications are maintainable, scalable, and integrate seamlessly with the platform's APIs and deployment system.","title":"License"},{"location":"code-management/upload/","text":"Upload Methods Overview Devaito v2.0 provides multiple flexible methods for uploading and managing your application code. Whether you're working on a simple website, a complex e-commerce application, or integrating with existing development workflows, we have upload options that fit your needs. Key Features: - Multiple upload methods to suit different workflows - Automatic validation and preprocessing - Version control integration - Real-time deployment capabilities - Secure file transfer protocols Method Comparison Method Best For Skill Level Features Web Interface Quick uploads, small projects Beginner Drag & drop, visual feedback Git Integration Team projects, CI/CD Intermediate Auto-deployment, version control API Upload Automated workflows, scripts Advanced Programmable, batch uploads FTP/SFTP Large files, legacy workflows Intermediate Direct file access, bulk transfer CLI Tool Developer workflows, automation Advanced Command-line integration, scripting 1. Web Interface Upload The web interface provides the most user-friendly way to upload your code with visual feedback and progress tracking. Getting Started Navigate to Upload Section Dashboard \u2192 Your Application \u2192 Code Management \u2192 Upload Choose Upload Method Single file upload Multiple file selection Folder upload (Chrome/Edge) Archive upload (.zip, .tar.gz, .rar) Single File Upload Step-by-step Process: 1. Click \"Choose File\" or drag file to upload area 2. Select your file from the file browser 3. File validation occurs automatically 4. Click \"Upload\" to begin transfer 5. Monitor progress bar for completion status Example Usage: <!-- Simple HTML file upload --> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My Devaito App</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <h1>Welcome to My App</h1> <script src=\"app.js\"></script> </body> </html> Folder Upload Browser Support: - Chrome 21+ \u2705 - Firefox 50+ \u2705 - Safari 14+ \u2705 - Edge 79+ \u2705 How to Upload Folders: 1. Drag entire project folder to upload area 2. Or click \"Upload Folder\" and select project directory 3. Review file structure preview 4. Confirm upload to proceed Project Structure Example: my-ecommerce-app/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 css/ \u2502 \u2502 \u251c\u2500\u2500 main.css \u2502 \u2502 \u2514\u2500\u2500 responsive.css \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u251c\u2500\u2500 app.js \u2502 \u2502 \u251c\u2500\u2500 cart.js \u2502 \u2502 \u2514\u2500\u2500 products.js \u2502 \u2514\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2514\u2500\u2500 products/ \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 auth.php \u2502 \u251c\u2500\u2500 products.php \u2502 \u2514\u2500\u2500 cart.php \u2514\u2500\u2500 config/ \u251c\u2500\u2500 database.php \u2514\u2500\u2500 settings.php Archive Upload Supported Formats: - .zip (recommended) - .tar.gz - .tar.bz2 - .rar - .7z Best Practices: - Compress your project at the root level - Exclude unnecessary files (.git, node_modules, .DS_Store) - Keep archive size under 500MB - Use descriptive archive names Creating a Clean Archive: # Create a clean zip file zip -r my-app.zip . -x \"*.git*\" \"node_modules/*\" \".DS_Store\" \"*.log\" # Or use tar tar -czf my-app.tar.gz --exclude='.git' --exclude='node_modules' . Upload Limitations File Size Limits: - Single file: 100MB maximum - Archive file: 500MB maximum - Total project size: 2GB maximum - Individual image: 50MB maximum File Type Restrictions: // Allowed file extensions const allowedExtensions = [ // Web files '.html', '.htm', '.css', '.js', '.jsx', '.ts', '.tsx', '.vue', '.svelte', '.scss', '.sass', '.less', // Backend files '.php', '.py', '.rb', '.go', '.java', '.cs', '.cpp', '.c', '.h', '.hpp', // Configuration '.json', '.xml', '.yml', '.yaml', '.env', '.ini', '.conf', '.config', // Assets '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2', '.ttf', '.eot', '.mp4', '.mp3', // Documentation '.md', '.txt', '.pdf' ]; 2. Git Integration Git integration provides seamless deployment from your version control repositories with automatic updates and collaboration features. GitHub Integration Initial Setup: 1. Go to Application Settings \u2192 Git Integration 2. Click \"Connect GitHub Account\" 3. Authorize Devaito application access 4. Select repository and branch 5. Configure deployment settings Repository Configuration: # .devaito.yml configuration file version: \"1.0\" build: commands: - npm install - npm run build output_directory: \"dist\" deploy: branch: \"main\" auto_deploy: true exclude: - \"node_modules\" - \".git\" - \"tests\" - \"*.log\" Webhook Setup: // GitHub webhook payload example { \"ref\": \"refs/heads/main\", \"repository\": { \"name\": \"my-ecommerce-app\", \"full_name\": \"username/my-ecommerce-app\" }, \"commits\": [ { \"id\": \"abc123\", \"message\": \"Add new product features\", \"author\": { \"name\": \"Developer Name\", \"email\": \"developer@example.com\" } } ] } GitLab Integration Setup Process: # 1. Generate GitLab access token # Go to GitLab \u2192 User Settings \u2192 Access Tokens # Create token with 'api' and 'read_repository' scopes # 2. Configure in Devaito # Settings \u2192 Git Integration \u2192 GitLab # Enter repository URL: https://gitlab.com/username/project.git # Add access token GitLab CI Integration: # .gitlab-ci.yml stages: - build - deploy build: stage: build script: - npm install - npm run build artifacts: paths: - dist/ deploy_to_devaito: stage: deploy script: - curl -X POST \"https://svelte.devaito.com/api/deploy\" -H \"Authorization: Bearer $DEVAITO_TOKEN\" -F \"project_id=$PROJECT_ID\" -F \"archive=@dist.zip\" only: - main Bitbucket Integration Configuration Steps: 1. Create App Password in Bitbucket settings 2. Add repository credentials in Devaito 3. Configure branch and deployment rules 4. Set up automatic deployment triggers Private Repository Access SSH Key Setup: # Generate SSH key pair ssh-keygen -t rsa -b 4096 -C \"devaito-deploy\" # Add public key to your Git provider # Add private key to Devaito dashboard HTTPS with Personal Access Token: # Clone with token git clone https://username:token@github.com/username/repository.git # Configure in Devaito Repository URL: https://github.com/username/repository.git Username: your-username Password/Token: your-personal-access-token Branch Management Multi-branch Deployment: // Branch configuration const branchConfig = { \"main\": { \"environment\": \"production\", \"auto_deploy\": true, \"domain\": \"myapp.devaito.com\" }, \"staging\": { \"environment\": \"staging\", \"auto_deploy\": true, \"domain\": \"myapp-staging.devaito.com\" }, \"development\": { \"environment\": \"dev\", \"auto_deploy\": false, \"domain\": \"myapp-dev.devaito.com\" } }; 3. API Upload The API upload method enables programmatic file uploads and automated deployment workflows. Authentication API Token Generation: # Generate API token in dashboard Dashboard \u2192 Settings \u2192 API Keys \u2192 Generate New Token # Token format Bearer 11|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Basic API Upload cURL Example: # Upload single file curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -H \"Content-Type: multipart/form-data\" \\ -F \"file=@index.html\" \\ -F \"application_id=your-app-id\" \\ -F \"path=/public/index.html\" # Upload archive curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"file=@project.zip\" \\ -F \"application_id=your-app-id\" \\ -F \"extract=true\" Response Format: { \"success\": true, \"message\": \"File uploaded successfully\", \"data\": { \"file_id\": \"file_abc123\", \"filename\": \"index.html\", \"size\": 2048, \"path\": \"/public/index.html\", \"uploaded_at\": \"2025-01-15T10:30:00Z\" } } Programming Language Examples Python Upload Script: import requests import os from pathlib import Path class DevaitoUploader: def __init__(self, api_token, app_id): self.api_token = api_token self.app_id = app_id self.base_url = \"https://svelte.devaito.com/api/v1\" self.headers = { \"Authorization\": f\"Bearer {api_token}\" } def upload_file(self, file_path, remote_path=None): \"\"\"Upload a single file\"\"\" if not os.path.exists(file_path): raise FileNotFoundError(f\"File not found: {file_path}\") with open(file_path, 'rb') as file: files = {'file': file} data = { 'application_id': self.app_id, 'path': remote_path or f\"/{os.path.basename(file_path)}\" } response = requests.post( f\"{self.base_url}/upload\", headers=self.headers, files=files, data=data ) return response.json() def upload_directory(self, directory_path, exclude_patterns=None): \"\"\"Upload entire directory\"\"\" exclude_patterns = exclude_patterns or ['.git', 'node_modules', '.DS_Store'] results = [] for root, dirs, files in os.walk(directory_path): # Filter out excluded directories dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)] for file in files: if any(pattern in file for pattern in exclude_patterns): continue file_path = os.path.join(root, file) relative_path = os.path.relpath(file_path, directory_path) try: result = self.upload_file(file_path, f\"/{relative_path}\") results.append(result) print(f\"Uploaded: {relative_path}\") except Exception as e: print(f\"Failed to upload {relative_path}: {e}\") return results # Usage example uploader = DevaitoUploader(\"your-api-token\", \"your-app-id\") uploader.upload_directory(\"./my-project\") Node.js Upload Script: const axios = require('axios'); const FormData = require('form-data'); const fs = require('fs'); const path = require('path'); class DevaitoUploader { constructor(apiToken, appId) { this.apiToken = apiToken; this.appId = appId; this.baseURL = 'https://svelte.devaito.com/api/v1'; this.headers = { 'Authorization': `Bearer ${apiToken}` }; } async uploadFile(filePath, remotePath = null) { const form = new FormData(); form.append('file', fs.createReadStream(filePath)); form.append('application_id', this.appId); form.append('path', remotePath || `/${path.basename(filePath)}`); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Upload failed: ${error.response?.data?.message || error.message}`); } } async uploadArchive(archivePath) { const form = new FormData(); form.append('file', fs.createReadStream(archivePath)); form.append('application_id', this.appId); form.append('extract', 'true'); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Archive upload failed: ${error.response?.data?.message || error.message}`); } } } // Usage const uploader = new DevaitoUploader('your-api-token', 'your-app-id'); // Upload single file uploader.uploadFile('./index.html') .then(result => console.log('Upload successful:', result)) .catch(error => console.error('Upload failed:', error)); Batch Upload API Multiple File Upload: curl -X POST \"https://svelte.devaito.com/api/v1/upload/batch\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"files[]=@file1.html\" \\ -F \"files[]=@file2.css\" \\ -F \"files[]=@file3.js\" \\ -F \"application_id=your-app-id\" Response: { \"success\": true, \"message\": \"Batch upload completed\", \"data\": { \"uploaded\": 2, \"failed\": 1, \"results\": [ { \"file\": \"file1.html\", \"success\": true, \"file_id\": \"file_123\" }, { \"file\": \"file2.css\", \"success\": true, \"file_id\": \"file_124\" }, { \"file\": \"file3.js\", \"success\": false, \"error\": \"File type not supported\" } ] } } 4. FTP/SFTP Upload FTP/SFTP provides direct file system access for bulk transfers and integration with existing workflows. SFTP Configuration Connection Details: Host: sftp.devaito.com Port: 2022 Protocol: SFTP (SSH File Transfer Protocol) Username: [Generated per application] Password: [Generated per application] Root Directory: /home/[app-id]/ Obtaining Credentials: 1. Navigate to Application Settings \u2192 FTP Access 2. Click \"Generate SFTP Credentials\" 3. Save credentials securely 4. Test connection using provided details Command Line SFTP Basic Connection: # Connect to SFTP server sftp -P 2022 your-app-username@sftp.devaito.com # Navigate and upload cd /public put index.html put -r assets/ ls -la quit Batch Upload Script: #!/bin/bash # upload_to_devaito.sh SFTP_HOST=\"sftp.devaito.com\" SFTP_PORT=\"2022\" SFTP_USER=\"your-app-username\" SFTP_PASS=\"your-app-password\" LOCAL_DIR=\"./build\" REMOTE_DIR=\"/public\" # Create batch command file cat > sftp_commands.txt << EOF cd $REMOTE_DIR lcd $LOCAL_DIR put -r * quit EOF # Execute SFTP commands sshpass -p \"$SFTP_PASS\" sftp -P $SFTP_PORT -b sftp_commands.txt $SFTP_USER@$SFTP_HOST # Cleanup rm sftp_commands.txt echo \"Upload completed successfully!\" GUI FTP Clients FileZilla Configuration: Protocol: SFTP - SSH File Transfer Protocol Host: sftp.devaito.com Port: 2022 Logon Type: Normal User: your-app-username Password: your-generated-password WinSCP Configuration (Windows): File protocol: SFTP Host name: sftp.devaito.com Port number: 2022 User name: your-app-username Password: your-generated-password Cyberduck Configuration (Mac): Connection: SFTP (SSH File Transfer Protocol) Server: sftp.devaito.com Port: 2022 Username: your-app-username Password: your-generated-password Directory Structure SFTP Directory Layout: /home/your-app-id/ \u251c\u2500\u2500 public/ # Web-accessible files \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 assets/ \u2502 \u2514\u2500\u2500 api/ \u251c\u2500\u2500 private/ # Private files (configs, logs) \u251c\u2500\u2500 logs/ # Application logs \u251c\u2500\u2500 backups/ # Automatic backups \u2514\u2500\u2500 temp/ # Temporary files File Permissions: - Public files: 644 (readable by web server) - Directories: 755 (executable/searchable) - Scripts: 755 (if executable) - Private files: 600 (owner only) 5. CLI Tool Upload The Devaito CLI provides powerful command-line tools for developers who prefer terminal-based workflows. Installation NPM Installation: # Install globally npm install -g @devaito/cli # Or install locally in project npm install --save-dev @devaito/cli Python Installation: # Using pip pip install devaito-cli # Using pipx (recommended) pipx install devaito-cli Manual Installation: # Download binary (Linux/Mac) curl -L https://releases.devaito.com/cli/latest/devaito-linux -o /usr/local/bin/devaito chmod +x /usr/local/bin/devaito # Windows PowerShell Invoke-WebRequest -Uri \"https://releases.devaito.com/cli/latest/devaito-windows.exe\" -OutFile \"devaito.exe\" Initial Setup Authentication: # Login with credentials devaito login # Or use API token devaito auth --token \"your-api-token\" # Verify authentication devaito whoami Project Initialization: # Initialize in existing project cd your-project devaito init # Create new project devaito create my-new-app cd my-new-app Basic Commands Upload Commands: # Upload current directory devaito upload # Upload specific files devaito upload index.html styles.css # Upload with environment specification devaito upload --env production # Upload and deploy immediately devaito upload --deploy # Upload with exclusions devaito upload --exclude \"node_modules,*.log,.git\" Advanced Upload Options: # Upload with progress bar devaito upload --progress # Upload with verification devaito upload --verify # Dry run (show what would be uploaded) devaito upload --dry-run # Upload compressed devaito upload --compress # Upload with custom remote path devaito upload --path \"/custom/path\" file.html Configuration File devaito.config.js: module.exports = { // Application configuration app: { id: 'your-app-id', name: 'My Devaito App', environment: 'production' }, // Upload configuration upload: { exclude: [ 'node_modules/**', '.git/**', '*.log', '.DS_Store', 'tests/**' ], include: [ 'public/**', 'api/**', 'index.html', 'package.json' ], compress: true, verify: true }, // Build configuration build: { command: 'npm run build', outputDir: 'dist', beforeUpload: [ 'npm install', 'npm run test' ] }, // Deployment configuration deploy: { beforeDeploy: ['npm run build'], afterDeploy: ['npm run cleanup'] } }; Watch Mode Auto-upload on Changes: # Watch current directory devaito watch # Watch specific files/directories devaito watch src/ public/ # Watch with custom ignore patterns devaito watch --ignore \"*.tmp,*.log\" # Watch with debounce (wait 2 seconds after changes) devaito watch --debounce 2000 Scripting and Automation GitHub Actions Integration: name: Deploy to Devaito on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '16' - name: Install dependencies run: npm install - name: Build project run: npm run build - name: Install Devaito CLI run: npm install -g @devaito/cli - name: Deploy to Devaito env: DEVAITO_TOKEN: ${{ secrets.DEVAITO_TOKEN }} run: | devaito auth --token $DEVAITO_TOKEN devaito upload --deploy Jenkins Pipeline: pipeline { agent any environment { DEVAITO_TOKEN = credentials('devaito-token') } stages { stage('Build') { steps { sh 'npm install' sh 'npm run build' } } stage('Deploy') { steps { sh 'npm install -g @devaito/cli' sh 'devaito auth --token $DEVAITO_TOKEN' sh 'devaito upload --deploy' } } } } Upload Monitoring & Logs Real-time Progress Web Interface Monitoring: - Real-time progress bars - File-by-file status updates - Error notifications with details - Upload speed and ETA display CLI Progress Monitoring: # Verbose output devaito upload --verbose # Progress with file details devaito upload --progress --details # JSON output for parsing devaito upload --output json Upload Logs Accessing Upload History: # View recent uploads devaito logs upload --limit 10 # View specific upload details devaito logs upload --id upload_abc123 # Filter by date devaito logs upload --since \"2025-01-01\" # Export logs devaito logs upload --export logs.json Log Format: { \"upload_id\": \"upload_abc123\", \"timestamp\": \"2025-01-15T10:30:00Z\", \"method\": \"web_interface\", \"status\": \"completed\", \"files_uploaded\": 15, \"files_failed\": 0, \"total_size\": \"2.3MB\", \"duration\": \"45s\", \"errors\": [] } Troubleshooting Common Issues Connection Problems Issue: Cannot connect to upload server # Test connectivity curl -I https://svelte.devaito.com # Check DNS resolution nslookup svelte.devaito.com # Test SFTP connection telnet sftp.devaito.com 2022 Authentication Errors Issue: Invalid API token # Verify token format echo \"Bearer 11|your-token-here\" # Test token validity curl -H \"Authorization: Bearer YOUR_TOKEN\" \\ https://svelte.devaito.com/api/v1/user # Regenerate token if needed # Dashboard \u2192 Settings \u2192 API Keys \u2192 Regenerate File Upload Failures Issue: File too large - Solution: Compress files or split large uploads - Use archive format for multiple files - Consider SFTP for very large files Issue: Invalid file type - Check allowed extensions list - Rename files if necessary - Use generic extensions (.txt for text files) Performance Issues Slow Upload Speeds: # Test upload speed devaito upload --test-speed # Use compression devaito upload --compress # Upload during off-peak hours # Use multiple parallel connections (SFTP) For additional support, contact our technical team or check the FAQ section.","title":"Upload Methods"},{"location":"code-management/upload/#upload-methods","text":"","title":"Upload Methods"},{"location":"code-management/upload/#overview","text":"Devaito v2.0 provides multiple flexible methods for uploading and managing your application code. Whether you're working on a simple website, a complex e-commerce application, or integrating with existing development workflows, we have upload options that fit your needs. Key Features: - Multiple upload methods to suit different workflows - Automatic validation and preprocessing - Version control integration - Real-time deployment capabilities - Secure file transfer protocols","title":"Overview"},{"location":"code-management/upload/#method-comparison","text":"Method Best For Skill Level Features Web Interface Quick uploads, small projects Beginner Drag & drop, visual feedback Git Integration Team projects, CI/CD Intermediate Auto-deployment, version control API Upload Automated workflows, scripts Advanced Programmable, batch uploads FTP/SFTP Large files, legacy workflows Intermediate Direct file access, bulk transfer CLI Tool Developer workflows, automation Advanced Command-line integration, scripting","title":"Method Comparison"},{"location":"code-management/upload/#1-web-interface-upload","text":"The web interface provides the most user-friendly way to upload your code with visual feedback and progress tracking.","title":"1. Web Interface Upload"},{"location":"code-management/upload/#getting-started","text":"Navigate to Upload Section Dashboard \u2192 Your Application \u2192 Code Management \u2192 Upload Choose Upload Method Single file upload Multiple file selection Folder upload (Chrome/Edge) Archive upload (.zip, .tar.gz, .rar)","title":"Getting Started"},{"location":"code-management/upload/#single-file-upload","text":"Step-by-step Process: 1. Click \"Choose File\" or drag file to upload area 2. Select your file from the file browser 3. File validation occurs automatically 4. Click \"Upload\" to begin transfer 5. Monitor progress bar for completion status Example Usage: <!-- Simple HTML file upload --> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My Devaito App</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <h1>Welcome to My App</h1> <script src=\"app.js\"></script> </body> </html>","title":"Single File Upload"},{"location":"code-management/upload/#folder-upload","text":"Browser Support: - Chrome 21+ \u2705 - Firefox 50+ \u2705 - Safari 14+ \u2705 - Edge 79+ \u2705 How to Upload Folders: 1. Drag entire project folder to upload area 2. Or click \"Upload Folder\" and select project directory 3. Review file structure preview 4. Confirm upload to proceed Project Structure Example: my-ecommerce-app/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 css/ \u2502 \u2502 \u251c\u2500\u2500 main.css \u2502 \u2502 \u2514\u2500\u2500 responsive.css \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u251c\u2500\u2500 app.js \u2502 \u2502 \u251c\u2500\u2500 cart.js \u2502 \u2502 \u2514\u2500\u2500 products.js \u2502 \u2514\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 logo.png \u2502 \u2514\u2500\u2500 products/ \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 auth.php \u2502 \u251c\u2500\u2500 products.php \u2502 \u2514\u2500\u2500 cart.php \u2514\u2500\u2500 config/ \u251c\u2500\u2500 database.php \u2514\u2500\u2500 settings.php","title":"Folder Upload"},{"location":"code-management/upload/#archive-upload","text":"Supported Formats: - .zip (recommended) - .tar.gz - .tar.bz2 - .rar - .7z Best Practices: - Compress your project at the root level - Exclude unnecessary files (.git, node_modules, .DS_Store) - Keep archive size under 500MB - Use descriptive archive names Creating a Clean Archive: # Create a clean zip file zip -r my-app.zip . -x \"*.git*\" \"node_modules/*\" \".DS_Store\" \"*.log\" # Or use tar tar -czf my-app.tar.gz --exclude='.git' --exclude='node_modules' .","title":"Archive Upload"},{"location":"code-management/upload/#upload-limitations","text":"File Size Limits: - Single file: 100MB maximum - Archive file: 500MB maximum - Total project size: 2GB maximum - Individual image: 50MB maximum File Type Restrictions: // Allowed file extensions const allowedExtensions = [ // Web files '.html', '.htm', '.css', '.js', '.jsx', '.ts', '.tsx', '.vue', '.svelte', '.scss', '.sass', '.less', // Backend files '.php', '.py', '.rb', '.go', '.java', '.cs', '.cpp', '.c', '.h', '.hpp', // Configuration '.json', '.xml', '.yml', '.yaml', '.env', '.ini', '.conf', '.config', // Assets '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2', '.ttf', '.eot', '.mp4', '.mp3', // Documentation '.md', '.txt', '.pdf' ];","title":"Upload Limitations"},{"location":"code-management/upload/#2-git-integration","text":"Git integration provides seamless deployment from your version control repositories with automatic updates and collaboration features.","title":"2. Git Integration"},{"location":"code-management/upload/#github-integration","text":"Initial Setup: 1. Go to Application Settings \u2192 Git Integration 2. Click \"Connect GitHub Account\" 3. Authorize Devaito application access 4. Select repository and branch 5. Configure deployment settings Repository Configuration: # .devaito.yml configuration file version: \"1.0\" build: commands: - npm install - npm run build output_directory: \"dist\" deploy: branch: \"main\" auto_deploy: true exclude: - \"node_modules\" - \".git\" - \"tests\" - \"*.log\" Webhook Setup: // GitHub webhook payload example { \"ref\": \"refs/heads/main\", \"repository\": { \"name\": \"my-ecommerce-app\", \"full_name\": \"username/my-ecommerce-app\" }, \"commits\": [ { \"id\": \"abc123\", \"message\": \"Add new product features\", \"author\": { \"name\": \"Developer Name\", \"email\": \"developer@example.com\" } } ] }","title":"GitHub Integration"},{"location":"code-management/upload/#gitlab-integration","text":"Setup Process: # 1. Generate GitLab access token # Go to GitLab \u2192 User Settings \u2192 Access Tokens # Create token with 'api' and 'read_repository' scopes # 2. Configure in Devaito # Settings \u2192 Git Integration \u2192 GitLab # Enter repository URL: https://gitlab.com/username/project.git # Add access token GitLab CI Integration: # .gitlab-ci.yml stages: - build - deploy build: stage: build script: - npm install - npm run build artifacts: paths: - dist/ deploy_to_devaito: stage: deploy script: - curl -X POST \"https://svelte.devaito.com/api/deploy\" -H \"Authorization: Bearer $DEVAITO_TOKEN\" -F \"project_id=$PROJECT_ID\" -F \"archive=@dist.zip\" only: - main","title":"GitLab Integration"},{"location":"code-management/upload/#bitbucket-integration","text":"Configuration Steps: 1. Create App Password in Bitbucket settings 2. Add repository credentials in Devaito 3. Configure branch and deployment rules 4. Set up automatic deployment triggers","title":"Bitbucket Integration"},{"location":"code-management/upload/#private-repository-access","text":"SSH Key Setup: # Generate SSH key pair ssh-keygen -t rsa -b 4096 -C \"devaito-deploy\" # Add public key to your Git provider # Add private key to Devaito dashboard HTTPS with Personal Access Token: # Clone with token git clone https://username:token@github.com/username/repository.git # Configure in Devaito Repository URL: https://github.com/username/repository.git Username: your-username Password/Token: your-personal-access-token","title":"Private Repository Access"},{"location":"code-management/upload/#branch-management","text":"Multi-branch Deployment: // Branch configuration const branchConfig = { \"main\": { \"environment\": \"production\", \"auto_deploy\": true, \"domain\": \"myapp.devaito.com\" }, \"staging\": { \"environment\": \"staging\", \"auto_deploy\": true, \"domain\": \"myapp-staging.devaito.com\" }, \"development\": { \"environment\": \"dev\", \"auto_deploy\": false, \"domain\": \"myapp-dev.devaito.com\" } };","title":"Branch Management"},{"location":"code-management/upload/#3-api-upload","text":"The API upload method enables programmatic file uploads and automated deployment workflows.","title":"3. API Upload"},{"location":"code-management/upload/#authentication","text":"API Token Generation: # Generate API token in dashboard Dashboard \u2192 Settings \u2192 API Keys \u2192 Generate New Token # Token format Bearer 11|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","title":"Authentication"},{"location":"code-management/upload/#basic-api-upload","text":"cURL Example: # Upload single file curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -H \"Content-Type: multipart/form-data\" \\ -F \"file=@index.html\" \\ -F \"application_id=your-app-id\" \\ -F \"path=/public/index.html\" # Upload archive curl -X POST \"https://svelte.devaito.com/api/v1/upload\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"file=@project.zip\" \\ -F \"application_id=your-app-id\" \\ -F \"extract=true\" Response Format: { \"success\": true, \"message\": \"File uploaded successfully\", \"data\": { \"file_id\": \"file_abc123\", \"filename\": \"index.html\", \"size\": 2048, \"path\": \"/public/index.html\", \"uploaded_at\": \"2025-01-15T10:30:00Z\" } }","title":"Basic API Upload"},{"location":"code-management/upload/#programming-language-examples","text":"Python Upload Script: import requests import os from pathlib import Path class DevaitoUploader: def __init__(self, api_token, app_id): self.api_token = api_token self.app_id = app_id self.base_url = \"https://svelte.devaito.com/api/v1\" self.headers = { \"Authorization\": f\"Bearer {api_token}\" } def upload_file(self, file_path, remote_path=None): \"\"\"Upload a single file\"\"\" if not os.path.exists(file_path): raise FileNotFoundError(f\"File not found: {file_path}\") with open(file_path, 'rb') as file: files = {'file': file} data = { 'application_id': self.app_id, 'path': remote_path or f\"/{os.path.basename(file_path)}\" } response = requests.post( f\"{self.base_url}/upload\", headers=self.headers, files=files, data=data ) return response.json() def upload_directory(self, directory_path, exclude_patterns=None): \"\"\"Upload entire directory\"\"\" exclude_patterns = exclude_patterns or ['.git', 'node_modules', '.DS_Store'] results = [] for root, dirs, files in os.walk(directory_path): # Filter out excluded directories dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)] for file in files: if any(pattern in file for pattern in exclude_patterns): continue file_path = os.path.join(root, file) relative_path = os.path.relpath(file_path, directory_path) try: result = self.upload_file(file_path, f\"/{relative_path}\") results.append(result) print(f\"Uploaded: {relative_path}\") except Exception as e: print(f\"Failed to upload {relative_path}: {e}\") return results # Usage example uploader = DevaitoUploader(\"your-api-token\", \"your-app-id\") uploader.upload_directory(\"./my-project\") Node.js Upload Script: const axios = require('axios'); const FormData = require('form-data'); const fs = require('fs'); const path = require('path'); class DevaitoUploader { constructor(apiToken, appId) { this.apiToken = apiToken; this.appId = appId; this.baseURL = 'https://svelte.devaito.com/api/v1'; this.headers = { 'Authorization': `Bearer ${apiToken}` }; } async uploadFile(filePath, remotePath = null) { const form = new FormData(); form.append('file', fs.createReadStream(filePath)); form.append('application_id', this.appId); form.append('path', remotePath || `/${path.basename(filePath)}`); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Upload failed: ${error.response?.data?.message || error.message}`); } } async uploadArchive(archivePath) { const form = new FormData(); form.append('file', fs.createReadStream(archivePath)); form.append('application_id', this.appId); form.append('extract', 'true'); try { const response = await axios.post(`${this.baseURL}/upload`, form, { headers: { ...this.headers, ...form.getHeaders() } }); return response.data; } catch (error) { throw new Error(`Archive upload failed: ${error.response?.data?.message || error.message}`); } } } // Usage const uploader = new DevaitoUploader('your-api-token', 'your-app-id'); // Upload single file uploader.uploadFile('./index.html') .then(result => console.log('Upload successful:', result)) .catch(error => console.error('Upload failed:', error));","title":"Programming Language Examples"},{"location":"code-management/upload/#batch-upload-api","text":"Multiple File Upload: curl -X POST \"https://svelte.devaito.com/api/v1/upload/batch\" \\ -H \"Authorization: Bearer YOUR_API_TOKEN\" \\ -F \"files[]=@file1.html\" \\ -F \"files[]=@file2.css\" \\ -F \"files[]=@file3.js\" \\ -F \"application_id=your-app-id\" Response: { \"success\": true, \"message\": \"Batch upload completed\", \"data\": { \"uploaded\": 2, \"failed\": 1, \"results\": [ { \"file\": \"file1.html\", \"success\": true, \"file_id\": \"file_123\" }, { \"file\": \"file2.css\", \"success\": true, \"file_id\": \"file_124\" }, { \"file\": \"file3.js\", \"success\": false, \"error\": \"File type not supported\" } ] } }","title":"Batch Upload API"},{"location":"code-management/upload/#4-ftpsftp-upload","text":"FTP/SFTP provides direct file system access for bulk transfers and integration with existing workflows.","title":"4. FTP/SFTP Upload"},{"location":"code-management/upload/#sftp-configuration","text":"Connection Details: Host: sftp.devaito.com Port: 2022 Protocol: SFTP (SSH File Transfer Protocol) Username: [Generated per application] Password: [Generated per application] Root Directory: /home/[app-id]/ Obtaining Credentials: 1. Navigate to Application Settings \u2192 FTP Access 2. Click \"Generate SFTP Credentials\" 3. Save credentials securely 4. Test connection using provided details","title":"SFTP Configuration"},{"location":"code-management/upload/#command-line-sftp","text":"Basic Connection: # Connect to SFTP server sftp -P 2022 your-app-username@sftp.devaito.com # Navigate and upload cd /public put index.html put -r assets/ ls -la quit Batch Upload Script: #!/bin/bash # upload_to_devaito.sh SFTP_HOST=\"sftp.devaito.com\" SFTP_PORT=\"2022\" SFTP_USER=\"your-app-username\" SFTP_PASS=\"your-app-password\" LOCAL_DIR=\"./build\" REMOTE_DIR=\"/public\" # Create batch command file cat > sftp_commands.txt << EOF cd $REMOTE_DIR lcd $LOCAL_DIR put -r * quit EOF # Execute SFTP commands sshpass -p \"$SFTP_PASS\" sftp -P $SFTP_PORT -b sftp_commands.txt $SFTP_USER@$SFTP_HOST # Cleanup rm sftp_commands.txt echo \"Upload completed successfully!\"","title":"Command Line SFTP"},{"location":"code-management/upload/#gui-ftp-clients","text":"FileZilla Configuration: Protocol: SFTP - SSH File Transfer Protocol Host: sftp.devaito.com Port: 2022 Logon Type: Normal User: your-app-username Password: your-generated-password WinSCP Configuration (Windows): File protocol: SFTP Host name: sftp.devaito.com Port number: 2022 User name: your-app-username Password: your-generated-password Cyberduck Configuration (Mac): Connection: SFTP (SSH File Transfer Protocol) Server: sftp.devaito.com Port: 2022 Username: your-app-username Password: your-generated-password","title":"GUI FTP Clients"},{"location":"code-management/upload/#directory-structure","text":"SFTP Directory Layout: /home/your-app-id/ \u251c\u2500\u2500 public/ # Web-accessible files \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 assets/ \u2502 \u2514\u2500\u2500 api/ \u251c\u2500\u2500 private/ # Private files (configs, logs) \u251c\u2500\u2500 logs/ # Application logs \u251c\u2500\u2500 backups/ # Automatic backups \u2514\u2500\u2500 temp/ # Temporary files File Permissions: - Public files: 644 (readable by web server) - Directories: 755 (executable/searchable) - Scripts: 755 (if executable) - Private files: 600 (owner only)","title":"Directory Structure"},{"location":"code-management/upload/#5-cli-tool-upload","text":"The Devaito CLI provides powerful command-line tools for developers who prefer terminal-based workflows.","title":"5. CLI Tool Upload"},{"location":"code-management/upload/#installation","text":"NPM Installation: # Install globally npm install -g @devaito/cli # Or install locally in project npm install --save-dev @devaito/cli Python Installation: # Using pip pip install devaito-cli # Using pipx (recommended) pipx install devaito-cli Manual Installation: # Download binary (Linux/Mac) curl -L https://releases.devaito.com/cli/latest/devaito-linux -o /usr/local/bin/devaito chmod +x /usr/local/bin/devaito # Windows PowerShell Invoke-WebRequest -Uri \"https://releases.devaito.com/cli/latest/devaito-windows.exe\" -OutFile \"devaito.exe\"","title":"Installation"},{"location":"code-management/upload/#initial-setup","text":"Authentication: # Login with credentials devaito login # Or use API token devaito auth --token \"your-api-token\" # Verify authentication devaito whoami Project Initialization: # Initialize in existing project cd your-project devaito init # Create new project devaito create my-new-app cd my-new-app","title":"Initial Setup"},{"location":"code-management/upload/#basic-commands","text":"Upload Commands: # Upload current directory devaito upload # Upload specific files devaito upload index.html styles.css # Upload with environment specification devaito upload --env production # Upload and deploy immediately devaito upload --deploy # Upload with exclusions devaito upload --exclude \"node_modules,*.log,.git\" Advanced Upload Options: # Upload with progress bar devaito upload --progress # Upload with verification devaito upload --verify # Dry run (show what would be uploaded) devaito upload --dry-run # Upload compressed devaito upload --compress # Upload with custom remote path devaito upload --path \"/custom/path\" file.html","title":"Basic Commands"},{"location":"code-management/upload/#configuration-file","text":"devaito.config.js: module.exports = { // Application configuration app: { id: 'your-app-id', name: 'My Devaito App', environment: 'production' }, // Upload configuration upload: { exclude: [ 'node_modules/**', '.git/**', '*.log', '.DS_Store', 'tests/**' ], include: [ 'public/**', 'api/**', 'index.html', 'package.json' ], compress: true, verify: true }, // Build configuration build: { command: 'npm run build', outputDir: 'dist', beforeUpload: [ 'npm install', 'npm run test' ] }, // Deployment configuration deploy: { beforeDeploy: ['npm run build'], afterDeploy: ['npm run cleanup'] } };","title":"Configuration File"},{"location":"code-management/upload/#watch-mode","text":"Auto-upload on Changes: # Watch current directory devaito watch # Watch specific files/directories devaito watch src/ public/ # Watch with custom ignore patterns devaito watch --ignore \"*.tmp,*.log\" # Watch with debounce (wait 2 seconds after changes) devaito watch --debounce 2000","title":"Watch Mode"},{"location":"code-management/upload/#scripting-and-automation","text":"GitHub Actions Integration: name: Deploy to Devaito on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '16' - name: Install dependencies run: npm install - name: Build project run: npm run build - name: Install Devaito CLI run: npm install -g @devaito/cli - name: Deploy to Devaito env: DEVAITO_TOKEN: ${{ secrets.DEVAITO_TOKEN }} run: | devaito auth --token $DEVAITO_TOKEN devaito upload --deploy Jenkins Pipeline: pipeline { agent any environment { DEVAITO_TOKEN = credentials('devaito-token') } stages { stage('Build') { steps { sh 'npm install' sh 'npm run build' } } stage('Deploy') { steps { sh 'npm install -g @devaito/cli' sh 'devaito auth --token $DEVAITO_TOKEN' sh 'devaito upload --deploy' } } } }","title":"Scripting and Automation"},{"location":"code-management/upload/#upload-monitoring-logs","text":"","title":"Upload Monitoring &amp; Logs"},{"location":"code-management/upload/#real-time-progress","text":"Web Interface Monitoring: - Real-time progress bars - File-by-file status updates - Error notifications with details - Upload speed and ETA display CLI Progress Monitoring: # Verbose output devaito upload --verbose # Progress with file details devaito upload --progress --details # JSON output for parsing devaito upload --output json","title":"Real-time Progress"},{"location":"code-management/upload/#upload-logs","text":"Accessing Upload History: # View recent uploads devaito logs upload --limit 10 # View specific upload details devaito logs upload --id upload_abc123 # Filter by date devaito logs upload --since \"2025-01-01\" # Export logs devaito logs upload --export logs.json Log Format: { \"upload_id\": \"upload_abc123\", \"timestamp\": \"2025-01-15T10:30:00Z\", \"method\": \"web_interface\", \"status\": \"completed\", \"files_uploaded\": 15, \"files_failed\": 0, \"total_size\": \"2.3MB\", \"duration\": \"45s\", \"errors\": [] }","title":"Upload Logs"},{"location":"code-management/upload/#troubleshooting-common-issues","text":"","title":"Troubleshooting Common Issues"},{"location":"code-management/upload/#connection-problems","text":"Issue: Cannot connect to upload server # Test connectivity curl -I https://svelte.devaito.com # Check DNS resolution nslookup svelte.devaito.com # Test SFTP connection telnet sftp.devaito.com 2022","title":"Connection Problems"},{"location":"code-management/upload/#authentication-errors","text":"Issue: Invalid API token # Verify token format echo \"Bearer 11|your-token-here\" # Test token validity curl -H \"Authorization: Bearer YOUR_TOKEN\" \\ https://svelte.devaito.com/api/v1/user # Regenerate token if needed # Dashboard \u2192 Settings \u2192 API Keys \u2192 Regenerate","title":"Authentication Errors"},{"location":"code-management/upload/#file-upload-failures","text":"Issue: File too large - Solution: Compress files or split large uploads - Use archive format for multiple files - Consider SFTP for very large files Issue: Invalid file type - Check allowed extensions list - Rename files if necessary - Use generic extensions (.txt for text files)","title":"File Upload Failures"},{"location":"code-management/upload/#performance-issues","text":"Slow Upload Speeds: # Test upload speed devaito upload --test-speed # Use compression devaito upload --compress # Upload during off-peak hours # Use multiple parallel connections (SFTP) For additional support, contact our technical team or check the FAQ section.","title":"Performance Issues"},{"location":"code-management/validation/","text":"Validation & Testing Overview Validation and testing are critical components of the development process on Devaito v2.0. This comprehensive guide covers automated validation, testing methodologies, performance benchmarking, and quality assurance practices to ensure your applications are robust, secure, and performant. Testing Philosophy: - Prevention over Detection : Catch issues early in development - Automated Quality Gates : Continuous validation throughout deployment - Performance First : Ensure optimal user experience - Security by Default : Validate security at every level Pre-Upload Validation Automated Code Validation Devaito automatically validates your code before deployment using multiple validation layers: Syntax Validation: // JavaScript/TypeScript validation const validationRules = { syntax: 'ES2020+', strictMode: true, allowedGlobals: ['console', 'fetch', 'document', 'window'], bannedFunctions: ['eval', 'Function', 'setTimeout'], maxComplexity: 10, maxDepth: 4 }; // PHP validation const phpRules = { version: '8.0+', psr: ['PSR-1', 'PSR-4', 'PSR-12'], security: ['no-eval', 'no-exec', 'no-shell-exec'], errorReporting: 'E_ALL' }; Dependency Validation: { \"validation\": { \"dependencies\": { \"checkLockFiles\": true, \"allowedRegistries\": [\"npmjs.org\", \"packagist.org\"], \"vulnerabilityCheck\": true, \"licenseCompliance\": true, \"maxDependencies\": 100 }, \"security\": { \"auditLevel\": \"high\", \"autoFix\": true, \"bannedPackages\": [\"lodash\", \"moment\"], \"preferredAlternatives\": { \"lodash\": \"native-js-methods\", \"moment\": \"date-fns\" } } } } File Structure Validation: // Required files validation const requiredFiles = { web: ['index.html'], react: ['package.json', 'src/index.js', 'public/index.html'], vue: ['package.json', 'src/main.js', 'public/index.html'], php: ['index.php', 'composer.json'] }; // File size limits const sizeLimits = { singleFile: '100MB', totalProject: '2GB', imageFile: '50MB', videoFile: '500MB' }; Manual Validation Checklist Pre-Upload Checklist: ```markdown Code Quality","title":"Validation & Testing"},{"location":"code-management/validation/#validation-testing","text":"","title":"Validation &amp; Testing"},{"location":"code-management/validation/#overview","text":"Validation and testing are critical components of the development process on Devaito v2.0. This comprehensive guide covers automated validation, testing methodologies, performance benchmarking, and quality assurance practices to ensure your applications are robust, secure, and performant. Testing Philosophy: - Prevention over Detection : Catch issues early in development - Automated Quality Gates : Continuous validation throughout deployment - Performance First : Ensure optimal user experience - Security by Default : Validate security at every level","title":"Overview"},{"location":"code-management/validation/#pre-upload-validation","text":"","title":"Pre-Upload Validation"},{"location":"code-management/validation/#automated-code-validation","text":"Devaito automatically validates your code before deployment using multiple validation layers: Syntax Validation: // JavaScript/TypeScript validation const validationRules = { syntax: 'ES2020+', strictMode: true, allowedGlobals: ['console', 'fetch', 'document', 'window'], bannedFunctions: ['eval', 'Function', 'setTimeout'], maxComplexity: 10, maxDepth: 4 }; // PHP validation const phpRules = { version: '8.0+', psr: ['PSR-1', 'PSR-4', 'PSR-12'], security: ['no-eval', 'no-exec', 'no-shell-exec'], errorReporting: 'E_ALL' }; Dependency Validation: { \"validation\": { \"dependencies\": { \"checkLockFiles\": true, \"allowedRegistries\": [\"npmjs.org\", \"packagist.org\"], \"vulnerabilityCheck\": true, \"licenseCompliance\": true, \"maxDependencies\": 100 }, \"security\": { \"auditLevel\": \"high\", \"autoFix\": true, \"bannedPackages\": [\"lodash\", \"moment\"], \"preferredAlternatives\": { \"lodash\": \"native-js-methods\", \"moment\": \"date-fns\" } } } } File Structure Validation: // Required files validation const requiredFiles = { web: ['index.html'], react: ['package.json', 'src/index.js', 'public/index.html'], vue: ['package.json', 'src/main.js', 'public/index.html'], php: ['index.php', 'composer.json'] }; // File size limits const sizeLimits = { singleFile: '100MB', totalProject: '2GB', imageFile: '50MB', videoFile: '500MB' };","title":"Automated Code Validation"},{"location":"code-management/validation/#manual-validation-checklist","text":"Pre-Upload Checklist: ```markdown","title":"Manual Validation Checklist"},{"location":"code-management/validation/#code-quality","text":"","title":"Code Quality"},{"location":"collaboration/add-remove/","text":"Adding and Removing Collaborators Overview In Devaito v2.0, collaboration is a key feature that allows multiple users to work on the same application or project. Collaborators can be added to your application to contribute to development, testing, or management tasks. This section guides you through the process of adding and removing collaborators, including best practices to ensure smooth teamwork. Prerequisites You must have an active Devaito account and be logged in. You need to be the owner or have administrative permissions for the application to manage collaborators. Ensure you have the email addresses or Devaito usernames of the collaborators you wish to add. Adding a Collaborator Follow these steps to add a collaborator to your application: Navigate to Your Application: Log in to your Devaito account and go to the \"My Applications\" section from the dashboard. Select the application to which you want to add a collaborator. Access Collaborator Management: In the application\u2019s settings, locate the \"Collaborators\" tab or section. Click on the \"Add Collaborator\" button. Enter Collaborator Details: Input the collaborator\u2019s Devaito username or email address. Select the appropriate role for the collaborator (e.g., Developer, Tester, or Admin). Refer to Roles & Permissions for details on available roles. Optionally, add a note or message to the invitation (e.g., \"Please join our project for API development\"). Send Invitation: Click \"Send Invitation\" to notify the collaborator. The collaborator will receive an email or in-platform notification with instructions to accept the invitation. Verify Addition: Once the collaborator accepts the invitation, they will appear in the \"Collaborators\" list with their assigned role. You can verify their status in the application\u2019s collaborator management panel. Removing a Collaborator If a collaborator no longer needs access to your application, you can remove them as follows: Navigate to Collaborator Management: Go to the \"My Applications\" section and select the relevant application. Access the \"Collaborators\" tab. Locate the Collaborator: Find the collaborator in the list. You can use the search bar if the list is long. Remove Access: Click the \"Remove\" or \"Revoke Access\" button next to the collaborator\u2019s name. Confirm the action in the dialog box that appears. You may be prompted to provide a reason for removal (optional). Verify Removal: The collaborator will be removed from the application and will no longer have access to its resources. Check the \"Collaborators\" list to ensure the user is no longer listed. Best Practices Role Assignment: Assign roles based on the collaborator\u2019s responsibilities. Avoid granting Admin access unless necessary. See Team Best Practices for more guidance. Communication: Inform collaborators about their roles and expectations before adding them to the project. Regular Audits: Periodically review the collaborator list to ensure only active team members have access. Secure Invitations: Use verified email addresses or usernames to prevent unauthorized access. Troubleshooting Invitation Not Received: Ask the collaborator to check their spam/junk folder or verify the email address used. Permission Errors: Ensure you have administrative rights to add or remove collaborators. Contact Devaito support if issues persist. Role Conflicts: If a collaborator cannot perform expected actions, verify their role in the Roles & Permissions section. For additional help, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.","title":"Adding/Removing Collaborators"},{"location":"collaboration/best-practices/","text":"Team Best Practices Overview Effective collaboration is essential for successful application development on Devaito v2.0. This section provides best practices for managing teams, ensuring clear communication, and optimizing workflows when working with collaborators. General Guidelines Define Clear Roles: Assign roles based on each collaborator\u2019s responsibilities (see Roles & Permissions). Clearly communicate expectations when adding collaborators (see Adding/Removing Collaborators). Use Version Control: Integrate version management tools to track changes and avoid conflicts (see Version Management). Regular Syncs: Schedule team meetings or updates to align on project goals, progress, and blockers. Document Everything: Maintain detailed documentation in your application\u2019s codebase and use Devaito\u2019s built-in tools to share updates with collaborators. Collaboration Workflow Onboarding Collaborators: Provide new team members with access to the Quick Start Guide and relevant documentation. Assign appropriate roles (e.g., Developer for coders, Tester for QA) to streamline onboarding. Share project goals, timelines, and key contacts in the invitation message. Code and Resource Management: Follow coding standards outlined in Code Formats & Conventions. Use Devaito\u2019s validation tools to ensure code quality before deployment (see Validation & Testing). Encourage collaborators to document their changes in commit messages or logs. Communication Best Practices: Use in-platform notifications or external tools (e.g., Slack, email) for updates, as supported by Devaito\u2019s integrations (see Specific Integrations). Create a shared space (e.g., a project wiki) for team notes, FAQs, or troubleshooting steps. Avoid direct modifications to shared resources without team consensus. Conflict Resolution: Address merge conflicts promptly using version control tools. If permission issues arise, verify roles and adjust as needed (see Roles & Permissions). Escalate unresolved issues to the application\u2019s Admin or Devaito support. Security Considerations Limit Access: Only grant Admin or Developer roles to trusted team members. Use Viewer or Tester roles for temporary or external collaborators. Monitor Activity: Regularly review application logs and collaborator actions to detect unauthorized changes (see Application Status). Secure API Keys: Ensure collaborators with API key access follow security protocols (see API Keys & Permissions). Optimizing Team Performance Automate Workflows: Use Devaito\u2019s automation and webhook features to streamline repetitive tasks (see Automations & Webhooks). Leverage CI/CD: Implement continuous integration and deployment pipelines for faster iterations (see CI/CD). Feedback Loops: Encourage team members to provide feedback on processes and tools to improve efficiency. Troubleshooting Collaborator Confusion: If team members are unsure of their roles, review Roles & Permissions and clarify responsibilities. Communication Breakdowns: Ensure all collaborators have access to communication tools and project updates. Workflow Bottlenecks: If delays occur, check for misconfigured permissions or outdated validation scripts (see Validation & Testing). For additional guidance, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.","title":"Team Best Practices"},{"location":"collaboration/roles/","text":"Roles & Permissions Overview In Devaito v2.0, roles and permissions define what actions collaborators can perform within an application. This section explains the available roles, their associated permissions, and how to manage them effectively to ensure secure and efficient collaboration. Available Roles Devaito provides the following predefined roles for collaborators: Role Description Admin Full access to all application features, including management of collaborators, API keys, and deployments. Developer Access to code upload, validation, and debugging, with limited management capabilities. Tester Access to testing and validation features, with read-only access to code and configurations. Viewer Read-only access to application details, status, and logs, with no modification rights. Permissions Breakdown Each role is associated with specific permissions, as outlined below: Admin: Add/remove collaborators (see Adding/Removing Collaborators). Manage API keys and permissions (see API Keys & Permissions). Deploy applications (see Deployment). Edit application settings, code, and configurations. View all logs, statuses, and reports. Developer: Upload and manage code (see Code Upload & Management). Run validation and testing scripts (see Validation & Testing). Debug applications (see Debugging). View application status and logs. Cannot manage collaborators or API keys. Tester: Run validation and testing scripts. View test results and application status. Read-only access to code and configurations. Cannot modify code, deploy applications, or manage collaborators. Viewer: View application status, logs, and configurations. Cannot modify any settings, code, or collaborator roles. Managing Roles To assign or modify a collaborator\u2019s role: Navigate to Collaborator Management: Go to the \"My Applications\" section and select the relevant application. Access the \"Collaborators\" tab (see Adding/Removing Collaborators). Edit Role: Locate the collaborator in the list. Click \"Edit Role\" or a similar option next to their name. Select the new role from the dropdown menu (e.g., Admin, Developer). Save changes to update the collaborator\u2019s permissions. Verify Changes: Confirm the role update in the collaborator list. Notify the collaborator if their permissions have changed significantly. Best Practices Least Privilege Principle: Assign the lowest level of access necessary for a collaborator\u2019s tasks. For example, use Viewer for team members who only need to monitor progress. Regular Role Reviews: Periodically audit collaborator roles to ensure they align with current responsibilities. Clear Communication: Inform collaborators about their role\u2019s capabilities and limitations when adding them (see Team Best Practices). Role Transitions: When changing roles (e.g., Developer to Admin), ensure the collaborator is aware of new responsibilities. Troubleshooting Permission Denied Errors: Verify the collaborator\u2019s role matches their intended actions. For example, only Admins can manage API keys. Role Not Updating: Ensure you have Admin rights to modify roles. If issues persist, contact Devaito support. Unexpected Access: If a collaborator has incorrect permissions, check for overlapping roles or misconfigurations in the collaborator settings. For further assistance, refer to Frequently Asked Questions or contact Devaito support at support@devaito.com.","title":"Roles & Permissions"},{"location":"faq/questions/","text":"Frequently Asked Questions Overview This section addresses common questions about using Devaito v2.0, covering account setup, application management, API usage, and more. For specific issues, see Common Solutions. Account and Access Q: How do I create a Devaito account?A: Visit the Devaito website and follow the steps in Creation / Login. You\u2019ll need a valid email address and password. Q: I forgot my password. How do I reset it?A: Use the \"Forgot Password\" link on the login page. Follow the email instructions to reset your password. Contact support@devaito.com if issues persist. Q: Can multiple users collaborate on a single application?A: Yes, add collaborators via the \"Collaborators\" tab in your application settings. See Adding/Removing Collaborators. Application Management Q: How do I deploy my application?A: Configure deployment settings as described in Deployment. Ensure your code passes validation (see Validation & Testing). Q: Why is my application status \"Failed\"?A: Check the application logs in Application Status. Common issues include code errors or misconfigured integrations. Q: Can I archive an application instead of deleting it?A: Yes, use the archiving option in Deletion / Archiving to preserve application data. API Usage Q: How do I access Devaito APIs?A: Browse available APIs in API List & Descriptions and generate API keys via API Keys & Permissions. Q: Why am I getting an \"Invalid API Key\" error?A: Verify the key is correct and has the right permissions. Regenerate the key if needed (see API Keys & Permissions). Code and Integrations Q: What code formats are supported?A: Devaito supports multiple languages and formats. See Code Formats & Conventions for details. Q: How do I set up a GitHub integration?A: Follow the steps in Specific Integrations to connect your repository. Q: My webhook isn\u2019t triggering. What\u2019s wrong?A: Check the webhook URL and event settings in Automations & Webhooks. Ensure the receiving service is active. Collaboration Q: How do I change a collaborator\u2019s role?A: Edit their role in the \"Collaborators\" tab. See Roles & Permissions for available roles. Q: Can collaborators access my API keys?A: Only Admins can manage API keys. Restrict roles appropriately (see Roles & Permissions). Advanced Features Q: How do I roll back to a previous version?A: Use the version history in Version Management to select and restore a previous version. Q: Can I automate testing in a CI/CD pipeline?A: Yes, configure pipelines as described in CI/CD. Need More Help? If your question isn\u2019t answered here, check Common Solutions or contact Devaito support at support@devaito.com. Refer to External Resources for additional guides.","title":"Frequently Asked Questions"},{"location":"faq/solutions/","text":"Common Solutions Overview This section provides solutions to common issues encountered while using Devaito v2.0, from login problems to deployment errors. For additional questions, see Frequently Asked Questions. Account and Login Issues Problem: Unable to log in due to incorrect credentials.Solution: Verify your email and password. Use the \"Forgot Password\" link to reset your password (see Creation / Login). Clear browser cache or try incognito mode. Contact support@devaito.com if the issue persists. Problem: Account locked after multiple failed login attempts.Solution: Wait 15 minutes or contact support to unlock your account. Application Management Problem: Deployment fails with a generic error.Solution: Check logs in Application Status. Ensure code passes validation (see Validation & Testing). Verify integration settings (see Specific Integrations). Problem: Application is stuck in \"Pending\" status.Solution: Refresh the dashboard or check server status. Restart the deployment process (see Deployment). Contact support if unresolved after 30 minutes. API Issues Problem: API requests return \"401 Unauthorized.\"Solution: Verify the API key is correct and active (see API Keys & Permissions). Check key permissions align with the API endpoint. Regenerate the key if compromised. Problem: API rate limit exceeded.Solution: Review rate limits in API Usage. Optimize requests or request a higher quota from support. Code and Debugging Problem: Code upload fails validation.Solution: Review validation errors in Validation & Testing. Ensure code follows Code Formats & Conventions. Use debugging tools (see Debugging). Problem: Integration with GitHub not syncing.Solution: Verify OAuth token and repository settings (see Specific Integrations). Check webhook configuration (see Automations & Webhooks). Collaboration Problem: Collaborator cannot access application features.Solution: Confirm their role in Roles & Permissions. Ensure they\u2019ve accepted the invitation (see Adding/Removing Collaborators). Reassign the role if needed. Problem: Too many collaborators added.Solution: Remove unnecessary collaborators (see Adding/Removing Collaborators). Advanced Features Problem: Webhook not delivering to external service.Solution: Verify the webhook URL and payload format (see Automations & Webhooks). Check external service logs for errors. Test with a simple payload to isolate issues. Problem: CI/CD pipeline fails at the testing stage.Solution: Review test scripts in Validation & Testing. Check pipeline configuration in CI/CD. Ensure sufficient resources are allocated. Still Stuck? Refer to Frequently Asked Questions for more insights or contact Devaito support at support@devaito.com. Additional resources are available in External Resources.","title":"Common Solutions"},{"location":"getting-started/available-apis/","text":"Available APIs Don\u2019t worry if this list looks long or complicated! You don\u2019t need to use every API right away. Just start with the ones you need for your project, and come back to this list whenever you want to add new features. Each API is explained with its purpose, so you can pick what fits your needs step by step. If you need more details, you\u2019ll find further explanations in the API Management section. Below is the list of all APIs available on Devaito (SaaS multi-tenant version): 1. Authentication API /login /logout 2. User API /user 3. Products API /fetch-all-products /get-product/{slug} /popular-products 4. Orders API /get-all-orders 5. Categories API /categories (GET, POST, PUT, DELETE) /categories/{id} /fetch-categories /fetch-categories-product/{permalink} 6. Campaigns API /campaigns (GET, POST) /campaigns/{id} (GET, PUT, DELETE) 7. Posts API /posts (GET, POST) /posts/{id} (GET, PUT, DELETE) /posts/{id}/{job_id} 8. Social Media APIs a. Facebook API /facebook/pages /facebook/publish-post /facebook/publish-post-job b. Instagram API /instagram/publish-post /instagram/publish-post-job c. Platform Connections API /platform-connections 9. Templates API /templates (GET, POST) /templates/{id} (GET, PUT, DELETE) 10. Platforms API /platforms (GET, POST) /platforms/{id} (GET, PUT, DELETE) 11. Resolutions API /resolutions (GET, POST) /resolutions/{id} (GET, PUT, DELETE) 12. Gallery & Media APIs /gallery-store /image-gallery /video-gallery /save-image /save-video 13. Store Settings APIs /get-store-prompt /get-store-language /fonts-and-colors 14. Content Generator API /content-generator","title":"Available APIs"},{"location":"getting-started/available-apis/#available-apis","text":"Don\u2019t worry if this list looks long or complicated! You don\u2019t need to use every API right away. Just start with the ones you need for your project, and come back to this list whenever you want to add new features. Each API is explained with its purpose, so you can pick what fits your needs step by step. If you need more details, you\u2019ll find further explanations in the API Management section. Below is the list of all APIs available on Devaito (SaaS multi-tenant version):","title":"Available APIs"},{"location":"getting-started/available-apis/#1-authentication-api","text":"/login /logout","title":"1. Authentication API"},{"location":"getting-started/available-apis/#2-user-api","text":"/user","title":"2. User API"},{"location":"getting-started/available-apis/#3-products-api","text":"/fetch-all-products /get-product/{slug} /popular-products","title":"3. Products API"},{"location":"getting-started/available-apis/#4-orders-api","text":"/get-all-orders","title":"4. Orders API"},{"location":"getting-started/available-apis/#5-categories-api","text":"/categories (GET, POST, PUT, DELETE) /categories/{id} /fetch-categories /fetch-categories-product/{permalink}","title":"5. Categories API"},{"location":"getting-started/available-apis/#6-campaigns-api","text":"/campaigns (GET, POST) /campaigns/{id} (GET, PUT, DELETE)","title":"6. Campaigns API"},{"location":"getting-started/available-apis/#7-posts-api","text":"/posts (GET, POST) /posts/{id} (GET, PUT, DELETE) /posts/{id}/{job_id}","title":"7. Posts API"},{"location":"getting-started/available-apis/#8-social-media-apis","text":"","title":"8. Social Media APIs"},{"location":"getting-started/available-apis/#a-facebook-api","text":"/facebook/pages /facebook/publish-post /facebook/publish-post-job","title":"a. Facebook API"},{"location":"getting-started/available-apis/#b-instagram-api","text":"/instagram/publish-post /instagram/publish-post-job","title":"b. Instagram API"},{"location":"getting-started/available-apis/#c-platform-connections-api","text":"/platform-connections","title":"c. Platform Connections API"},{"location":"getting-started/available-apis/#9-templates-api","text":"/templates (GET, POST) /templates/{id} (GET, PUT, DELETE)","title":"9. Templates API"},{"location":"getting-started/available-apis/#10-platforms-api","text":"/platforms (GET, POST) /platforms/{id} (GET, PUT, DELETE)","title":"10. Platforms API"},{"location":"getting-started/available-apis/#11-resolutions-api","text":"/resolutions (GET, POST) /resolutions/{id} (GET, PUT, DELETE)","title":"11. Resolutions API"},{"location":"getting-started/available-apis/#12-gallery-media-apis","text":"/gallery-store /image-gallery /video-gallery /save-image /save-video","title":"12. Gallery &amp; Media APIs"},{"location":"getting-started/available-apis/#13-store-settings-apis","text":"/get-store-prompt /get-store-language /fonts-and-colors","title":"13. Store Settings APIs"},{"location":"getting-started/available-apis/#14-content-generator-api","text":"/content-generator","title":"14. Content Generator API"},{"location":"getting-started/creation-login/","text":"Account Creation / Login Introduction Welcome to the account creation and login section for Devaito. This part guides you through the steps needed to access the platform, whether you are a new or existing user. Creating an Account Go to the registration page : Visit the Devaito homepage and click the \"Create Account\" button. Fill out the form : Enter your email address. Choose a secure password. Provide your full name or a username. Verification : A verification email will be sent to you. Click the link provided to activate your account. Complete your profile : After activation, you can complete your profile with additional information (optional) to personalize your experience. Tips Make sure to use a valid email address for verification. Keep your login credentials in a secure place. If you encounter any issues, check the FAQ section or contact support. For more information, explore the other sections of this guide.","title":"Creation / Login"},{"location":"getting-started/creation-login/#account-creation-login","text":"","title":"Account Creation / Login"},{"location":"getting-started/creation-login/#introduction","text":"Welcome to the account creation and login section for Devaito. This part guides you through the steps needed to access the platform, whether you are a new or existing user.","title":"Introduction"},{"location":"getting-started/creation-login/#creating-an-account","text":"Go to the registration page : Visit the Devaito homepage and click the \"Create Account\" button. Fill out the form : Enter your email address. Choose a secure password. Provide your full name or a username. Verification : A verification email will be sent to you. Click the link provided to activate your account. Complete your profile : After activation, you can complete your profile with additional information (optional) to personalize your experience.","title":"Creating an Account"},{"location":"getting-started/creation-login/#tips","text":"Make sure to use a valid email address for verification. Keep your login credentials in a secure place. If you encounter any issues, check the FAQ section or contact support. For more information, explore the other sections of this guide.","title":"Tips"},{"location":"getting-started/quick-start/","text":"\ud83d\ude80 Ultra Beginner Guide \u2014 Create an Application (No Experience Needed) This guide is made for complete beginners . Even if you have never coded before , you can follow every step. \ud83e\uddf0 Before You Start \u2014 Install the Basic Tools 1\ufe0f\u20e3 Install Node.js Node.js is a tool that lets you run JavaScript applications on your computer. Go to the official website: nodejs.org Click the green \u201cDownload (LTS)\u201d button (Add a screenshot of the Download button here) Open the downloaded file and install it (just click \u201cNext\u201d until the end) To check the installation: Open the terminal (on Windows, search for \u201cCommand Prompt\u201d or \u201cTerminal\u201d in the Start menu) Type: node -v If you see a version number (e.g., v20.0.0), it\u2019s working! Tip: If you get an error, try installing again or make sure you downloaded the \u201cLTS\u201d version. 2\ufe0f\u20e3 Install Git (optional but recommended) Git helps you save and share your code easily. Go to: git-scm.com/downloads Download and install (just click \u201cNext\u201d until \u201cFinish\u201d) To check: Open the terminal and type: git --version If you see a version number, it\u2019s working! \ud83d\udcf1 1. Create a Flutter Application (mobile & web) a) Install Flutter Flutter lets you build apps for Android, iOS, and the web with the same code. Go to: docs.flutter.dev/get-started/install Download the Flutter SDK for your system (Windows, Mac, Linux) Follow the official installation tutorial (Add a screenshot of the SDK download here) b) Create and Run the App Open the terminal Type: flutter create my_flutter_app cd my_flutter_app flutter run The app will start on an emulator or your phone (depending on your setup) Tip: If you get an error, check that Flutter is installed and your phone or emulator is connected. \ud83c\udf10 2. Create a React Web App (with Vite) React is a tool for building interactive websites. Vite helps you start a React project quickly. Open the terminal Type: npm create vite@latest my-react-app -- --template react cd my-react-app npm install npm run dev Open the link shown in the terminal (e.g., http://localhost:5173) in your browser Tip: If you get an error, make sure Node.js is installed. \ud83d\udcf2 3. Create a React Native Mobile App (with Expo) React Native lets you build mobile apps with JavaScript. Expo makes creating and testing apps easier. Open the terminal Type: npm install --global expo-cli expo init my-expo-app cd my-expo-app expo start Scan the QR code with your phone (you need the Expo Go app from the Play Store / App Store) Tip: If you don\u2019t see the QR code, make sure you\u2019re in the project folder and Expo is installed. \ud83c\udd98 FAQ & Tips Can\u2019t find the terminal? On Windows, search for \u201cCommand Prompt\u201d or \u201cTerminal\u201d in the Start menu. A command doesn\u2019t work? Check that the tools are installed, restart the terminal, or reboot your computer. Need help? Search on Google or ask on Stack Overflow . \ud83c\udf89 Quick Summary Technology Creation Command Flutter flutter create my_flutter_app React Web (Vite) npm create vite@latest my-react-app -- --template react React Native (Expo) expo init my-expo-app Next Steps Once you have finished the installation, you can start integrating the required Devaito APIs by going to the API Management section.","title":"Quick Start Guide"},{"location":"getting-started/quick-start/#ultra-beginner-guide-create-an-application-no-experience-needed","text":"This guide is made for complete beginners . Even if you have never coded before , you can follow every step.","title":"\ud83d\ude80 Ultra Beginner Guide \u2014 Create an Application (No Experience Needed)"},{"location":"getting-started/quick-start/#before-you-start-install-the-basic-tools","text":"","title":"\ud83e\uddf0 Before You Start \u2014 Install the Basic Tools"},{"location":"getting-started/quick-start/#1-install-nodejs","text":"Node.js is a tool that lets you run JavaScript applications on your computer. Go to the official website: nodejs.org Click the green \u201cDownload (LTS)\u201d button (Add a screenshot of the Download button here) Open the downloaded file and install it (just click \u201cNext\u201d until the end) To check the installation: Open the terminal (on Windows, search for \u201cCommand Prompt\u201d or \u201cTerminal\u201d in the Start menu) Type: node -v If you see a version number (e.g., v20.0.0), it\u2019s working! Tip: If you get an error, try installing again or make sure you downloaded the \u201cLTS\u201d version.","title":"1\ufe0f\u20e3 Install Node.js"},{"location":"getting-started/quick-start/#2-install-git-optional-but-recommended","text":"Git helps you save and share your code easily. Go to: git-scm.com/downloads Download and install (just click \u201cNext\u201d until \u201cFinish\u201d) To check: Open the terminal and type: git --version If you see a version number, it\u2019s working!","title":"2\ufe0f\u20e3 Install Git (optional but recommended)"},{"location":"getting-started/quick-start/#1-create-a-flutter-application-mobile-web","text":"","title":"\ud83d\udcf1 1. Create a Flutter Application (mobile &amp; web)"},{"location":"getting-started/quick-start/#a-install-flutter","text":"Flutter lets you build apps for Android, iOS, and the web with the same code. Go to: docs.flutter.dev/get-started/install Download the Flutter SDK for your system (Windows, Mac, Linux) Follow the official installation tutorial (Add a screenshot of the SDK download here)","title":"a) Install Flutter"},{"location":"getting-started/quick-start/#b-create-and-run-the-app","text":"Open the terminal Type: flutter create my_flutter_app cd my_flutter_app flutter run The app will start on an emulator or your phone (depending on your setup) Tip: If you get an error, check that Flutter is installed and your phone or emulator is connected.","title":"b) Create and Run the App"},{"location":"getting-started/quick-start/#2-create-a-react-web-app-with-vite","text":"React is a tool for building interactive websites. Vite helps you start a React project quickly. Open the terminal Type: npm create vite@latest my-react-app -- --template react cd my-react-app npm install npm run dev Open the link shown in the terminal (e.g., http://localhost:5173) in your browser Tip: If you get an error, make sure Node.js is installed.","title":"\ud83c\udf10 2. Create a React Web App (with Vite)"},{"location":"getting-started/quick-start/#3-create-a-react-native-mobile-app-with-expo","text":"React Native lets you build mobile apps with JavaScript. Expo makes creating and testing apps easier. Open the terminal Type: npm install --global expo-cli expo init my-expo-app cd my-expo-app expo start Scan the QR code with your phone (you need the Expo Go app from the Play Store / App Store) Tip: If you don\u2019t see the QR code, make sure you\u2019re in the project folder and Expo is installed.","title":"\ud83d\udcf2 3. Create a React Native Mobile App (with Expo)"},{"location":"getting-started/quick-start/#faq-tips","text":"Can\u2019t find the terminal? On Windows, search for \u201cCommand Prompt\u201d or \u201cTerminal\u201d in the Start menu. A command doesn\u2019t work? Check that the tools are installed, restart the terminal, or reboot your computer. Need help? Search on Google or ask on Stack Overflow .","title":"\ud83c\udd98 FAQ &amp; Tips"},{"location":"getting-started/quick-start/#quick-summary","text":"Technology Creation Command Flutter flutter create my_flutter_app React Web (Vite) npm create vite@latest my-react-app -- --template react React Native (Expo) expo init my-expo-app","title":"\ud83c\udf89 Quick Summary"},{"location":"getting-started/quick-start/#next-steps","text":"Once you have finished the installation, you can start integrating the required Devaito APIs by going to the API Management section.","title":"Next Steps"}]}